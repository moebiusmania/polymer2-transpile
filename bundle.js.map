{"version":3,"sources":["webpack:///webpack/bootstrap 3eb65f5bf256f90640ba","webpack:///./components/index.js","webpack:///./components/button-clab/class.js","webpack:///./components/polymer-element.js","webpack:///./polymer.bundle.js"],"names":["ButtonClab","evt","dispatchEvent","CustomEvent","bubbles","type","appearance","size","block","arr","push","join","icon","String","value","reflectToAttribute","disabled","Boolean","buttonType","Element","customElements","define","is","Polymer","window","modules","installedModules","__webpack_require__","moduleId","exports","module","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","getDefault","getModuleExports","object","property","prototype","hasOwnProperty","p","s","document","_htmlStr","head","el","div","createElement","innerHTML","children","length","appendChild","write","body","userPolymer","info","_polymerFn","assign","Error","version","goog","reflect","objectProperty","dedupeId","cachingMixin","mixin","base","__mixinApplications","WeakMap","map","application","set","dedupingMixin","__id","__dedupeId","baseSet","__mixinSet","extended","create","caseMap","DASH_TO_CAMEL","CAMEL_TO_DASH","CaseMap","dashToCamelCase","dash","indexOf","replace","toUpperCase","camelToDashCase","camel","toLowerCase","CSS_URL_RX","ABS_URL","workingURL","resolveDoc","resolveUrl","url","baseURI","test","undefined","u","URL","pathname","href","e","location","implementation","createHTMLDocument","anchor","resolveCss","cssText","pre","post","pathFromUrl","substring","lastIndexOf","ResolveUrl","PolymerElementProperties","PolymerElementConstructor","extends","properties","observers","template","ElementMixin","polymerElementBase","PropertyEffects","ownPropertiesForClass","klass","__ownProperties","ownObserversForClass","__ownObservers","flattenProperties","flattenedProps","props","propertiesForClass","__classProperties","superCtor","getPrototypeOf","constructor","PolymerElement","propertyDefaultsForClass","__classPropertyDefaults","hasClassFinalized","finalizeClassAndSuper","proto","finalize","finalizeClass","__finalized","telemetry","register","finalizeProperties","finalizeObservers","t","cloneNode","_template","createPropertyFromConfig","dynamicProperties","_createMethodObserver","allProps","computed","readOnly","_hasReadOnlyEffect","_createComputedProperty","_createReadOnlyProperty","_hasReflectEffect","_createReflectedProperty","notify","_hasNotifyEffect","_createNotifyingProperty","observer","_createPropertyObserver","finalizeTemplate","ext","StyleGather","cssFromTemplate","cssFromModuleImports","style","textContent","content","insertBefore","firstChild","ShadyCSS","prepareTemplate","_bindTemplate","list","prop","__observedAttributes","DomModule","import","_importPath","assetpath","importPath","instanceCount","root","_stampTemplate","__polymerFinalized","__proto__","localName","rootPath","p$","_isPropertyPending","_hasPropertyEffect","_setProperty","styleElement","_flushProperties","_attachDom","dom","attachShadow","shadowRoot","mode","old","_attributeToProperty","styleSubtree","registrations","_regLog","console","log","dumpRegistrations","forEach","updateStyles","styleDocument","lcModules","findModule","id","styleOutsideTemplateCheck","inst","querySelector","warn","__assetpath","owner","HTMLImports","importForElement","ownerDocument","getAttribute","selector","HTMLElement","microtask","Async","microTask","nativeProperties","getOwnPropertyNames","saveAccessorValue","model","__data","_setPendingProperty","__dataProto","PropertyAccessors","superClass","a$","observedAttributes","_createPropertyAccessor","_initializeProperties","__serializing","__dataCounter","__dataInvalid","__dataPending","__dataOld","_initializeProtoProperties","attribute","hasAttribute","_valueToNodeAttribute","_deserializeValue","arguments","node","str","_serializeValue","removeAttribute","setAttribute","Date","toString","JSON","stringify","x","outValue","Number","parse","Array","_invalidateProperties","_shouldPropertyChange","run","oldProps","changedProps","_propertiesChanged","currentProps","TYPES","ANY","COMPUTE","REFLECT","NOTIFY","PROPAGATE","OBSERVE","READ_ONLY","ensureOwnEffectMap","effects","protoFx","instFx","runEffects","hasPaths","ran","runEffectsForProperty","rootProperty","Path","fxs","fx","lastRun","pathMatchesTrigger","trigger","fn","path","triggerPath","structured","isAncestor","wildcard","isDescendant","runObserverEffect","methodName","changedProp","runNotifyEffects","notifyProps","__notifyEffects","notified","notifyPath","host","__dataHost","eventName","dispatchNotifyEvent","detail","queueProperty","runNotifyEffect","addNotifyListener","addEventListener","event","handleNotification","negate","targetPath","translate","target","setPropertyFromNotification","__readOnly","_setPendingPropertyOrPath","runReflectEffect","sanitizeDOMValue","attrName","_propertyToAttribute","runComputedEffects","computeEffects","__computeEffects","inputProps","runComputedEffect","result","runMethodEffect","computedProp","methodInfo","__propertyEffects","computeLinkedPaths","links","__dataLinkedPaths","cache","__dataTemp","link","a","b","__dataToNotify","addBindingEffect","note","index","dynamicFns","parts","part","signature","addMethodBindingEffect","literal","kind","_addPropertyEffect","runBindingEffect","propertyName","isCompound","compoundIndex","customEvent","__templateNodes","_enqueueClient","isPath","applyBindingValue","computeBindingValue","_setUnmanagedPropertyToNode","storage","__dataCompoundStorage","createMethodEffect","runMethodBindingEffect","val","processAnnotations","notes","_processed","j","bindings","k","parseMethod","templateContent","_notes","hostProps","_hostProps","discoverTemplateHostProps","concat","b$","args","kk","templateHostProps","shouldAddListener","binding","addAnnotatedListener","__notifyListeners","setupNotifyListeners","setupBindings","__templateNotes","setupCompoundBinding","sig","effectFn","dynamicFn","static","arg","context","_methodHost","marshalArgs","apply","emptyArray","expression","match","trim","split","parseArgs","argList","rawArg","parseArg","fc","slice","isDeep","data","values","v","baseChanged","matches","literals","notifySplices","array","splices","splicesPath","indexSplices","notifySplice","addedCount","removed","upper","initalizeInstanceProperties","propertyEffectsBase","TemplateStamp","__dataInitialized","__dataClientsInitialized","__dataPendingClients","__dataHasPaths","__dataInstanceProps","effect","shouldNotify","isPathNotification","isArray","hasEffect","prevProps","client","_readyClients","clients","ready","instanceProps","__propagateEffects","_flushClients","__reflectEffects","__observeEffects","to","from","normalize","len","items","ret","hadLength","pop","start","deleteCount","Math","floor","splice","shift","unshift","propPath","protectedSetter","attr","_parseTemplateAnnotations","bindingRegex","IDENT","NUMBER","SQUOTE_STRING","DQUOTE_STRING","STRING","ARGUMENT","ARGUMENTS","ARGUMENT_LIST","BINDING","OPEN_BRACKET","CLOSE_BRACKET","NEGATE","EXPRESSION","RegExp","insertionPointTag","parseTemplateAnnotations","stripWhiteSpace","_content","parseNodeAnnotations","nodeType","Node","TEXT_NODE","parseTextNodeAnnotation","parseElementAnnotations","parseBindings","text","lastIndex","exec","notifyEvent","colon","literalFromParts","element","events","_hasInsertionPoint","parseChildNodesAnnotations","attributes","parseNodeAttributeAnnotations","templateExtensions","wrapTemplateExtension","parentNode","replaceChild","parseTemplate","next","nextSibling","removeChild","childAnnotation","parent","createDocumentFragment","annotation","attrs","parseNodeAttributeAnnotation","origName","findTemplateAnnotatedNode","applyIdToMap","applyEventListener","e$","_addMethodEventListenerToNode","applyTemplateContent","createNodeEventHandler","handler","$","HTMLTemplateElement","decorate","importNode","__noInsertionPoint","_addEventListenerToNode","removeEventListener","AsyncInterface","microtaskCurrHandle","microtaskLastHandle","microtaskCallbacks","microtaskNodeContent","microtaskNode","createTextNode","MutationObserver","microtaskFlush","observe","characterData","cb","setTimeout","timeOut","after","delay","cancel","clearTimeout","bind","animationFrame","requestAnimationFrame","cancelAnimationFrame","idlePeriod","requestIdleCallback","timer","cancelIdleCallback","callback","handle","idx","dotIndex","newBase","last","MODULE_STYLE_LINK_SELECTOR","INCLUDE_ATTR","importModule","cssFromModules","moduleIds","cssFromModule","_cssText","querySelectorAll","include","importDoc","container"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 3eb65f5bf256f90640ba","'use strict';\n\nimport './../polymer.bundle.js';\nimport './button-clab/class';\n\n\n\n// WEBPACK FOOTER //\n// ./components/index.js","'use strict';\n\nimport {Polymer} from \"./../polymer-element\";\n\nclass ButtonClab extends Polymer.Element {\n  static get is() { return 'button-clab' }\n  static get properties() {\n    return {\n      type: {\n        type: String,\n        value: \"\",\n        reflectToAttribute: true\n      },\n      appearance: {\n        type: String,\n        value: \"\"\n      },\n      size: {\n        type: String,\n        value: \"\"\n      },\n      icon: {\n        type: String,\n        value: \"\"\n      },\n      disabled: {\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true\n      },\n      block: {\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true\n      },\n      buttonType: {\n        type: String,\n        value: 'button',\n      }\n    }\n  }\n\n  _click(evt) {\n    this.dispatchEvent(new CustomEvent('btnclick'), {bubbles: true});\n  }\n\n\n  _computeClass(type, appearance, size, block) {\n    let arr = ['btn', type, appearance, size];\n    block ? arr.push('block') : null;\n    return arr.join(' ');\n  }\n\n\n  _computeIconClass(icon) {\n    return ['icon', icon].join(' ');\n  }\n\n}\n\ncustomElements.define(ButtonClab.is, ButtonClab);\n\n\n\n// WEBPACK FOOTER //\n// ./components/button-clab/class.js","'use strict';\n\n// import './../bower_components/polymer/polymer-element.html';\n\n// Exports Polymer global object as module\nexport const Polymer = window.Polymer;\n\n\n\n// WEBPACK FOOTER //\n// ./components/polymer-element.js","/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 14);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\n/*__wc__loader*/\n\n(function (document) {\n  var _htmlStr = \"\\n\";\n  if (document.head) {\n    var el = document.head;\n    var div = document.createElement('div');\n    div.innerHTML = _htmlStr;\n    while (div.children.length > 0) {\n      el.appendChild(div.children[0]);\n    }\n  } else {\n    document.write(_htmlStr);\n  }\n})(document);\n\n(function (document) {\n  var _htmlStr = \"\";\n  if (document.body) {\n    var el = document.body;\n    var div = document.createElement('div');\n    div.innerHTML = _htmlStr;\n    while (div.children.length > 0) {\n      el.appendChild(div.children[0]);\n    }\n  } else {\n    document.write(_htmlStr);\n  }\n})(document);\n\n(function () {\n  'use strict';\n\n  const userPolymer = window.Polymer;\n\n  /**\n   * @namespace Polymer\n   * @summary Polymer is a lightweight library built on top of the web\n   * standards-based Web Components API's, and makes it easy to build your\n   * own custom HTML elements.\n   */\n  window.Polymer = function (info) {\n    return window.Polymer._polymerFn(info);\n  };\n\n  // support user settings on the Polymer object\n  if (userPolymer) {\n    Object.assign(Polymer, userPolymer);\n  }\n\n  // To be plugged by legacy implementation if loaded\n  window.Polymer._polymerFn = function () {\n    throw new Error('Load polymer.html to use the Polymer() function.');\n  };\n  window.Polymer.version = '2.0-preview';\n\n  /* eslint-disable no-unused-vars */\n  /*\n  When using Closure Compiler, goog.reflect.objectProperty(property, object) is replaced by the munged name for object[property]\n  We cannot alias this function, so we have to use a small shim that has the same behavior when not compiling.\n  */\n  window.goog = window.goog || {};\n  window.goog.reflect = window.goog.reflect || {\n    objectProperty(s, o) {\n      return s;\n    }\n  };\n  /* eslint-enable */\n})();\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/*__wc__loader*/\n\n(function (document) {\n  var _htmlStr = \"\\n\\n\\n\";\n  if (document.head) {\n    var el = document.head;\n    var div = document.createElement('div');\n    div.innerHTML = _htmlStr;\n    while (div.children.length > 0) {\n      el.appendChild(div.children[0]);\n    }\n  } else {\n    document.write(_htmlStr);\n  }\n})(document);\n\n(function (document) {\n  var _htmlStr = \"\";\n  if (document.body) {\n    var el = document.body;\n    var div = document.createElement('div');\n    div.innerHTML = _htmlStr;\n    while (div.children.length > 0) {\n      el.appendChild(div.children[0]);\n    }\n  } else {\n    document.write(_htmlStr);\n  }\n})(document);\n\n__webpack_require__(0);\n\n(function () {\n\n  'use strict';\n\n  // unique global id for deduping mixins.\n\n  let dedupeId = 0;\n\n  /**\n   * Given a mixin producing function, memoize applications of mixin to base\n   * @private\n   */\n  function cachingMixin(mixin) {\n    return function (base) {\n      if (!mixin.__mixinApplications) {\n        mixin.__mixinApplications = new WeakMap();\n      }\n      let map = mixin.__mixinApplications;\n      let application = map.get(base);\n      if (!application) {\n        application = mixin(base);\n        map.set(base, application);\n      }\n      return application;\n    };\n  }\n\n  /**\n   * Wraps an ES6 class expression mixin such that the mixin is only applied\n   * if it has not already been applied its base argument.  Also memoizes mixin\n   * applications.\n   *\n   * @memberof Polymer\n   * @param {function} mixin ES6 class expression mixin to wrap\n   * @return {function} Wrapped mixin that deduplicates and memoizes\n   *   mixin applications to base\n   */\n  Polymer.dedupingMixin = function (mixin) {\n    mixin = cachingMixin(mixin);\n    // maintain a unique id for each mixin\n    if (!mixin.__id) {\n      mixin.__dedupeId = ++dedupeId;\n    }\n    return function (base) {\n      let baseSet = base.__mixinSet;\n      if (baseSet && baseSet[mixin.__dedupeId]) {\n        return base;\n      }\n      let extended = mixin(base);\n      // copy inherited mixin set from the extended class, or the base class\n      // NOTE: we avoid use of Set here because some browser (IE11)\n      // cannot extend a base Set via the constructor.\n      extended.__mixinSet = Object.create(extended.__mixinSet || baseSet || null);\n      extended.__mixinSet[mixin.__dedupeId] = true;\n      return extended;\n    };\n  };\n})();\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/*__wc__loader*/\n\n(function (document) {\n  var _htmlStr = \"\\n\\n\";\n  if (document.head) {\n    var el = document.head;\n    var div = document.createElement('div');\n    div.innerHTML = _htmlStr;\n    while (div.children.length > 0) {\n      el.appendChild(div.children[0]);\n    }\n  } else {\n    document.write(_htmlStr);\n  }\n})(document);\n\n(function (document) {\n  var _htmlStr = \"\";\n  if (document.body) {\n    var el = document.body;\n    var div = document.createElement('div');\n    div.innerHTML = _htmlStr;\n    while (div.children.length > 0) {\n      el.appendChild(div.children[0]);\n    }\n  } else {\n    document.write(_htmlStr);\n  }\n})(document);\n\n__webpack_require__(0);\n\n(function () {\n  'use strict';\n\n  const caseMap = {};\n  const DASH_TO_CAMEL = /-[a-z]/g;\n  const CAMEL_TO_DASH = /([A-Z])/g;\n\n  /**\n   * Module with utilities for converting between \"dash-case\" and \"camelCase\"\n   * identifiers.\n   *\n   * @namespace\n   * @memberof Polymer\n   * @summary Module that provides utilities for converting between \"dash-case\"\n   *   and \"camelCase\".\n   */\n  const CaseMap = {\n\n    /**\n     * Converts \"dash-case\" identifier (e.g. `foo-bar-baz`) to \"camelCase\"\n     * (e.g. `fooBarBaz`).\n     *\n     * @memberof Polymer.CaseMap\n     * @param {string} dash Dash-case identifier\n     * @return {string} Camel-case representation of the identifier\n     */\n    dashToCamelCase(dash) {\n      return caseMap[dash] || (caseMap[dash] = dash.indexOf('-') < 0 ? dash : dash.replace(DASH_TO_CAMEL, m => m[1].toUpperCase()));\n    },\n\n    /**\n     * Converts \"camelCase\" identifier (e.g. `fooBarBaz`) to \"dash-case\"\n     * (e.g. `foo-bar-baz`).\n     *\n     * @memberof Polymer.CaseMap\n     * @param {string} camel Camel-case identifier\n     * @return {string} Dash-case representation of the identifier\n     */\n    camelToDashCase(camel) {\n      return caseMap[camel] || (caseMap[camel] = camel.replace(CAMEL_TO_DASH, '-$1').toLowerCase());\n    }\n\n  };\n\n  Polymer.CaseMap = CaseMap;\n})();\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/*__wc__loader*/\n\n(function (document) {\n  var _htmlStr = \"\\n\\n\\n\";\n  if (document.head) {\n    var el = document.head;\n    var div = document.createElement('div');\n    div.innerHTML = _htmlStr;\n    while (div.children.length > 0) {\n      el.appendChild(div.children[0]);\n    }\n  } else {\n    document.write(_htmlStr);\n  }\n})(document);\n\n(function (document) {\n  var _htmlStr = \"\";\n  if (document.body) {\n    var el = document.body;\n    var div = document.createElement('div');\n    div.innerHTML = _htmlStr;\n    while (div.children.length > 0) {\n      el.appendChild(div.children[0]);\n    }\n  } else {\n    document.write(_htmlStr);\n  }\n})(document);\n\n__webpack_require__(0);\n\n(function () {\n  'use strict';\n\n  let CSS_URL_RX = /(url\\()([^)]*)(\\))/g;\n  let ABS_URL = /(^\\/)|(^#)|(^[\\w-\\d]*:)/;\n  let workingURL;\n  let resolveDoc;\n  /**\n   * Resolves the given URL against the provided `baseUri'.\n   *\n   * @memberof Polymer.ResolveUrl\n   * @param {string} url Input URL to resolve\n   * @param {string} baseURI Base URI to resolve the URL against\n   * @return {string} resolved URL\n   */\n  function resolveUrl(url, baseURI) {\n    if (url && ABS_URL.test(url)) {\n      return url;\n    }\n    // Lazy feature detection.\n    if (workingURL === undefined) {\n      workingURL = false;\n      try {\n        const u = new URL('b', 'http://a');\n        u.pathname = 'c%20d';\n        workingURL = u.href === 'http://a/c%20d';\n      } catch (e) {\n        // silently fail\n      }\n    }\n    if (!baseURI) {\n      baseURI = document.baseURI || window.location.href;\n    }\n    if (workingURL) {\n      return new URL(url, baseURI).href;\n    }\n    // Fallback to creating an anchor into a disconnected document.\n    if (!resolveDoc) {\n      resolveDoc = document.implementation.createHTMLDocument('temp');\n      resolveDoc.base = resolveDoc.createElement('base');\n      resolveDoc.head.appendChild(resolveDoc.base);\n      resolveDoc.anchor = resolveDoc.createElement('a');\n      resolveDoc.body.appendChild(resolveDoc.anchor);\n    }\n    resolveDoc.base.href = baseURI;\n    resolveDoc.anchor.href = url;\n    return resolveDoc.anchor.href || url;\n  }\n\n  /**\n   * Resolves any relative URL's in the given CSS text against the provided\n   * `ownerDocument`'s `baseURI`.\n   *\n   * @memberof Polymer.ResolveUrl\n   * @param {string} cssText CSS text to process\n   * @param {string} baseURI Base URI to resolve the URL against\n   * @return {string} Processed CSS text with resolved URL's\n   */\n  function resolveCss(cssText, baseURI) {\n    return cssText.replace(CSS_URL_RX, function (m, pre, url, post) {\n      return pre + '\\'' + resolveUrl(url.replace(/[\"']/g, ''), baseURI) + '\\'' + post;\n    });\n  }\n\n  /**\n   * Returns a path from a given `url`. The path includes the trailing\n   * `/` from the url.\n   *\n   * @memberof Polymer.ResolveUrl\n   * @param {string} url Input URL to transform\n   * @return {string} resolved path\n   */\n  function pathFromUrl(url) {\n    return url.substring(0, url.lastIndexOf('/') + 1);\n  }\n\n  /**\n   * Module with utilities for resolving relative URL's.\n   *\n   * @namespace\n   * @memberof Polymer\n   * @summary Module with utilities for resolving relative URL's.\n   */\n  Polymer.ResolveUrl = {\n    resolveCss: resolveCss,\n    resolveUrl: resolveUrl,\n    pathFromUrl: pathFromUrl\n  };\n})();\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/*__wc__loader*/\n\n(function (document) {\n  var _htmlStr = \"\\n\\n\\n\\n\\n\\n\\n\\n\\n\";\n  if (document.head) {\n    var el = document.head;\n    var div = document.createElement('div');\n    div.innerHTML = _htmlStr;\n    while (div.children.length > 0) {\n      el.appendChild(div.children[0]);\n    }\n  } else {\n    document.write(_htmlStr);\n  }\n})(document);\n\n(function (document) {\n  var _htmlStr = \"\";\n  if (document.body) {\n    var el = document.body;\n    var div = document.createElement('div');\n    div.innerHTML = _htmlStr;\n    while (div.children.length > 0) {\n      el.appendChild(div.children[0]);\n    }\n  } else {\n    document.write(_htmlStr);\n  }\n})(document);\n\n__webpack_require__(0);\n\n__webpack_require__(1);\n\n__webpack_require__(2);\n\n__webpack_require__(12);\n\n__webpack_require__(3);\n\n__webpack_require__(6);\n\n__webpack_require__(8);\n\n(function () {\n  'use strict';\n  /**\n   * @typedef Object<string, {\n   *   value: *,\n   *   type: (Function | undefined),\n   *   readOnly: (boolean | undefined),\n   *   computed: (string | undefined),\n   *   reflectToAttribute: (boolean | undefined),\n   *   notify: (boolean | undefined),\n   *   observer: (string | undefined)\n   * }>)\n   */\n\n  let PolymerElementProperties; // eslint-disable-line no-unused-vars\n\n  /** @record */\n  let PolymerElementConstructor = function () {}; // eslint-disable-line no-unused-vars\n  /** @type {(string | undefined)} */\n  PolymerElementConstructor.is;\n  /** @type {(string | undefined)} */\n  PolymerElementConstructor.extends;\n  /** @type {(!PolymerElementProperties | undefined)} */\n  PolymerElementConstructor.properties;\n  /** @type {(!Array<string> | undefined)} */\n  PolymerElementConstructor.observers;\n  /** @type {(!HTMLTemplateElement | string | undefined)} */\n  PolymerElementConstructor.template;\n\n  /**\n   * Element class mixin that provides the core API for Polymer's meta-programming\n   * features including template stamping, data-binding, attribute deserialization,\n   * and property change observation.\n   *\n   * Subclassers may provide the following static getters to return metadata\n   * used to configure Polymer's features for the class:\n   *\n   * - `static get is()`: When the template is provided via a `dom-module`,\n   *   users should return the `dom-module` id from a static `is` getter.  If\n   *   no template is needed or the template is provided directly via the\n   *   `template` getter, there is no need to define `is` for the element.\n   *\n   * - `static get template()`: Users may provide the template directly (as\n   *   opposed to via `dom-module`) by implementing a static `template` getter.\n   *   The getter may return an `HTMLTemplateElement` or a string, which will\n   *   automatically be parsed into a template.\n   *\n   * - `static get properties()`: Should return an object describing\n   *   property-related metadata used by Polymer features (key: property name\n   *   value: object containing property metadata). Valid keys in per-property\n   *   metadata include:\n   *   - `type` (String|Number|Object|Array|...): Used by\n   *     `attributeChangedCallback` to determine how string-based attributes\n   *     are deserialized to JavaScript property values.\n   *   - `notify` (boolean): Causes a change in the property to fire a\n   *     non-bubbling event called `<property>-changed`. Elements that have\n   *     enabled two-way binding to the property use this event to observe changes.\n   *   - `readOnly` (boolean): Creates a getter for the property, but no setter.\n   *     To set a read-only property, use the private setter method\n   *     `_setProperty(property, value)`.\n   *   - `observer` (string): Observer method name that will be called when\n   *     the property changes. The arguments of the method are\n   *     `(value, previousValue)`.\n   *   - `computed` (string): String describing method and dependent properties\n   *     for computing the value of this property (e.g. `'computeFoo(bar, zot)'`).\n   *     Computed properties are read-only by default and can only be changed\n   *     via the return value of the computing method.\n   *\n   * - `static get observers()`: Array of strings describing multi-property\n   *   observer methods and their dependent properties (e.g.\n   *   `'observeABC(a, b, c)'`).\n   *\n   * The base class provides default implementations for the following standard\n   * custom element lifecycle callbacks; users may override these, but should\n   * call the super method to ensure\n   * - `constructor`: Run when the element is created or upgraded\n   * - `connectedCallback`: Run each time the element is connected to the\n   *   document\n   * - `disconnectedCallback`: Run each time the element is disconnected from\n   *   the document\n   * - `attributeChangedCallback`: Run each time an attribute in\n   *   `observedAttributes` is set or removed (note: this element's default\n   *   `observedAttributes` implementation will automatically return an array\n   *   of dash-cased attributes based on `properties`)\n   *\n   * @polymerMixin\n   * @mixes Polymer.PropertyEffects\n   * @memberof Polymer\n   * @property rootPath {string} Set to the value of `Polymer.rootPath`,\n   *   which defaults to the main document path\n   * @property importPath {string} Set to the value of the class's static\n   *   `importPath` property, which defaults to the path of this element's\n   *   `dom-module` (when `is` is used), but can be overridden for other\n   *   import strategies.\n   * @summary Element class mixin that provides the core API for Polymer's\n   * meta-programming features.\n   */\n  Polymer.ElementMixin = Polymer.dedupingMixin(function (base) {\n\n    const polymerElementBase = Polymer.PropertyEffects(base);\n\n    let caseMap = Polymer.CaseMap;\n\n    /**\n     * Returns the `properties` object specifically on `klass`. Use for:\n     * (1) super chain mixes togther to make `propertiesForClass` which is\n     * then used to make `observedAttributes`.\n     * (2) properties effects and observers are created from it at `finalize` time.\n     * @param {HTMLElement} klass\n     * @private\n     */\n    function ownPropertiesForClass(klass) {\n      if (!klass.hasOwnProperty(goog.reflect.objectProperty('__ownProperties', klass))) {\n        klass.__ownProperties = klass.hasOwnProperty(goog.reflect.objectProperty('properties', klass)) ? klass.properties : {};\n      }\n      return klass.__ownProperties;\n    }\n\n    /**\n     * Returns the `observers` array specifically on `klass`. Use for\n     * setting up observers.\n     * @param {HTMLElement} klass\n     * @private\n     */\n    function ownObserversForClass(klass) {\n      if (!klass.hasOwnProperty(goog.reflect.objectProperty('__ownObservers', klass))) {\n        klass.__ownObservers = klass.hasOwnProperty(goog.reflect.objectProperty('observers', klass)) ? klass.observers : [];\n      }\n      return klass.__ownObservers;\n    }\n\n    /**\n     * Mixes `props` into `flattenedProps` but upgrades shorthand type\n     * syntax to { type: Type}.\n     * @param {Object} flattenedProps\n     * @param {Object} props\n     * @private\n     */\n    function flattenProperties(flattenedProps, props) {\n      for (let p in props) {\n        let o = props[p];\n        if (typeof o == 'function') {\n          o = { type: o };\n        }\n        flattenedProps[p] = o;\n      }\n      return flattenedProps;\n    }\n\n    /**\n     * Returns a flattened list of properties mixed together from the chain of all\n     * constructor's `config.properties`. This list is used to create\n     * (1) observedAttributes,\n     * (2) class property default values\n     * @param {HTMLElement} klass\n     * @return {PolymerElementProperties}\n     * @private\n     */\n    function propertiesForClass(klass) {\n      if (!klass.hasOwnProperty(goog.reflect.objectProperty('__classProperties', klass))) {\n        klass.__classProperties = flattenProperties({}, ownPropertiesForClass(klass));\n        let superCtor = Object.getPrototypeOf(klass.prototype).constructor;\n        if (superCtor.prototype instanceof PolymerElement) {\n          klass.__classProperties = Object.assign(Object.create(propertiesForClass(superCtor)), klass.__classProperties);\n        }\n      }\n      return klass.__classProperties;\n    }\n\n    /**\n     * Returns a list of properties with default values.\n     * This list is created as an optimization since it is a subset of\n     * the list returned from `propertiesForClass`.\n     * This list is used in `_initializeProperties` to set property defaults.\n     * @param {HTMLElement} klass\n     * @return {PolymerElementProperties}\n     * @private\n     */\n    function propertyDefaultsForClass(klass) {\n      if (!klass.hasOwnProperty(goog.reflect.objectProperty('__classPropertyDefaults', klass))) {\n        klass.__classPropertyDefaults = null;\n        let props = propertiesForClass(klass);\n        for (let p in props) {\n          let info = props[p];\n          if ('value' in info) {\n            klass.__classPropertyDefaults = klass.__classPropertyDefaults || {};\n            klass.__classPropertyDefaults[p] = info;\n          }\n        }\n      }\n      return klass.__classPropertyDefaults;\n    }\n\n    /**\n     * Returns true if a `klass` has finalized. Called in `ElementClass.finalize()`\n     * @param {HTMLElement} klass\n     * @private\n     */\n    function hasClassFinalized(klass) {\n      return klass.hasOwnProperty(goog.reflect.objectProperty('__finalized', klass));\n    }\n\n    /**\n     * Called by `ElementClass.finalize()`. Ensures this `klass` and\n     * *all superclasses* are finalized by traversing the prototype chain\n     * and calling `klass.finalize()`.\n     * @param {HTMLElement} klass\n     * @private\n     */\n    function finalizeClassAndSuper(klass) {\n      let proto = klass.prototype;\n      let superCtor = Object.getPrototypeOf(proto).constructor;\n      if (superCtor.prototype instanceof PolymerElement) {\n        superCtor.finalize();\n      }\n      finalizeClass(klass);\n    }\n\n    /**\n     * Configures a `klass` based on a staic `klass.config` object and\n     * a `template`. This includes creating accessors and effects\n     * for properties in `config` and the `template` as well as preparing the\n     * `template` for stamping.\n     */\n    function finalizeClass(klass) {\n      klass.__finalized = true;\n      let proto = klass.prototype;\n      if (klass.hasOwnProperty(goog.reflect.objectProperty('is', klass)) && klass.is) {\n        Polymer.telemetry.register(proto);\n      }\n      let props = ownPropertiesForClass(klass);\n      if (props) {\n        finalizeProperties(proto, props);\n      }\n      let observers = ownObserversForClass(klass);\n      if (observers) {\n        finalizeObservers(proto, observers, props);\n      }\n      // note: create \"working\" template that is finalized at instance time\n      let template = klass.template;\n      if (template) {\n        if (typeof template === 'string') {\n          let t = document.createElement('template');\n          t.innerHTML = template;\n          template = t;\n        } else {\n          template = template.cloneNode(true);\n        }\n        proto._template = template;\n      }\n    }\n\n    /**\n     * Configures a `proto` based on a `properties` object.\n     * Leverages `PropertyEffects` to create property accessors and effects\n     * supporting, observers, reflecting to attributes, change notification,\n     * computed properties, and read only properties.\n     * @param {HTMLElement} proto\n     * @param {Object} properties\n     * @private\n     */\n    function finalizeProperties(proto, properties) {\n      for (let p in properties) {\n        createPropertyFromConfig(proto, p, properties[p], properties);\n      }\n    }\n\n    /**\n     * Configures a `proto` based on a `observers` array.\n     * Leverages `PropertyEffects` to create observers.\n     * @param {HTMLElement} proto\n     * @param {Array} observers\n     * @private\n     */\n    function finalizeObservers(proto, observers, dynamicProperties) {\n      for (let i = 0; i < observers.length; i++) {\n        proto._createMethodObserver(observers[i], dynamicProperties);\n      }\n    }\n\n    /**\n     * Creates effects for a property.\n     *\n     * Note, once a property has been set to\n     * `readOnly`, `computed`, `reflectToAttribute`, or `notify`\n     * these values may not be changed. For example, a subclass cannot\n     * alter these settings. However, additional `observers` may be added\n     * by subclasses.\n     *\n     * The info object should may contain property metadata as follows:\n     *\n     * * `type`: {function} type to which an attribute matching the property\n     * is deserialized. Note the property is camel-cased from a dash-cased\n     * attribute. For example, 'foo-bar' attribute is dersialized to a\n     * property named 'fooBar'.\n     *\n     * * `readOnly`: {boolean} creates a readOnly property and\n     * makes a private setter for the private of the form '_setFoo' for a\n     * property 'foo',\n     *\n     * * `computed`: {string} creates a computed property. A computed property\n     * also automatically is set to `readOnly: true`. The value is calculated\n     * by running a method and arguments parsed from the given string. For\n     * example 'compute(foo)' will compute a given property when the\n     * 'foo' property changes by executing the 'compute' method. This method\n     * must return the computed value.\n     *\n     * * `reflectToAttriute`: {boolean} If true, the property value is reflected\n     * to an attribute of the same name. Note, the attribute is dash-cased\n     * so a property named 'fooBar' is reflected as 'foo-bar'.\n     *\n     * * `notify`: {boolean} sends a non-bubbling notification event when\n     * the property changes. For example, a property named 'foo' sends an\n     * event named 'foo-changed' with `event.detail` set to the value of\n     * the property.\n     *\n     * * observer: {string} name of a method that runs when the property\n     * changes. The arguments of the method are (value, previousValue).\n     *\n     * Note: Users may want control over modifying property\n     * effects via subclassing. For example, a user might want to make a\n     * reflectToAttribute property not do so in a subclass. We've chosen to\n     * disable this because it leads to additional complication.\n     * For example, a readOnly effect generates a special setter. If a subclass\n     * disables the effect, the setter would fail unexpectedly.\n     * Based on feedback, we may want to try to make effects more malleable\n     * and/or provide an advanced api for manipulating them.\n     * Also consider adding warnings when an effect cannot be changed.\n     *\n     * @param {HTMLElement} proto\n     * @param {string} name Name of the property.\n     * @param {object} info Info object from which to create property effects.\n     * Supported keys:\n     * @param {object} allProps Flattened map of all properties defined in this\n     *   element (including inherited properties)\n     * @private\n     */\n    function createPropertyFromConfig(proto, name, info, allProps) {\n      // computed forces readOnly...\n      if (info.computed) {\n        info.readOnly = true;\n      }\n      // Note, since all computed properties are readOnly, this prevents\n      // adding additional computed property effects (which leads to a confusing\n      // setup where multiple triggers for setting a property)\n      // While we do have `hasComputedEffect` this is set on the property's\n      // dependencies rather than itself.\n      if (info.computed && !proto._hasReadOnlyEffect(name)) {\n        proto._createComputedProperty(name, info.computed, allProps);\n      }\n      if (info.readOnly && !proto._hasReadOnlyEffect(name)) {\n        proto._createReadOnlyProperty(name, !info.computed);\n      }\n      if (info.reflectToAttribute && !proto._hasReflectEffect(name)) {\n        proto._createReflectedProperty(name);\n      }\n      if (info.notify && !proto._hasNotifyEffect(name)) {\n        proto._createNotifyingProperty(name);\n      }\n      // always add observer\n      if (info.observer) {\n        proto._createPropertyObserver(name, info.observer, allProps[info.observer]);\n      }\n    }\n\n    /**\n     * Configures an element `proto` to function with a given `template`.\n     * The element name `is` and extends `ext` must be specified for ShadyCSS\n     * style scoping.\n     * @param {HTMLElement} proto\n     * @param {HTMLTemplateElement} template\n     * @param {string} baseURI URL against which to resolve urls in\n     * style element cssText.\n     * @param {string} is\n     * @param {string} ext\n     * @private\n     */\n    function finalizeTemplate(proto, template, baseURI, is, ext) {\n      // support `include=\"module-name\"`\n      let cssText = Polymer.StyleGather.cssFromTemplate(template, baseURI) + Polymer.StyleGather.cssFromModuleImports(is);\n      if (cssText) {\n        let style = document.createElement('style');\n        style.textContent = cssText;\n        template.content.insertBefore(style, template.content.firstChild);\n      }\n      if (window.ShadyCSS) {\n        window.ShadyCSS.prepareTemplate(template, is, ext);\n      }\n      proto._bindTemplate(template, propertiesForClass(proto.constructor));\n    }\n\n    /**\n     * @polymerMixinClass\n     * @unrestricted\n     */\n    class PolymerElement extends polymerElementBase {\n\n      /**\n       * Standard Custom Elements V1 API.  The default implementation returns\n       * a list of dash-cased attributes based on a flattening of all properties\n       * declared in `static get properties()` for this element and any\n       * superclasses.\n       *\n       * @return {Array} Observed attribute list\n       */\n      static get observedAttributes() {\n        if (!this.hasOwnProperty(goog.reflect.objectProperty('__observedAttributes', this))) {\n          let list = [];\n          let properties = propertiesForClass(this);\n          for (let prop in properties) {\n            list.push(Polymer.CaseMap.camelToDashCase(prop));\n          }\n          this.__observedAttributes = list;\n        }\n        return this.__observedAttributes;\n      }\n\n      /**\n       * Called automatically when the first element instance is created to\n       * ensure that class finalization work has been completed.\n       * May be called by users to eagerly perform class finalization work\n       * prior to the creation of the first element instance.\n       *\n       * Class finalization work generally includes meta-programming such as\n       * creating property accessors and any property effect metadata needed for\n       * the features used.\n       *\n       * @public\n       */\n      static finalize() {\n        if (!hasClassFinalized(this)) {\n          finalizeClassAndSuper(this);\n        }\n      }\n\n      /**\n       * Returns the template stamped into this element's shadow root.\n       *\n       * If a `static get is()` getter is defined, the default implementation\n       * will return the first `<template>` in a `dom-module` whose `id`\n       * matches this element's `is`.\n       *\n       * Users may override this getter to return an arbitrary template\n       * (in which case the `is` getter is unnecessary). The template returned\n       * may be either an `HTMLTemplateElement` or a string that will be\n       * automatically parsed into a template.\n       *\n       * Note that when subclassing, if the super class overrode the default\n       * implementation and the subclass would like to provide an alternate\n       * template via a `dom-module`, it should override this getter and\n       * return `Polymer.DomModule.import(this.is, 'template')`.\n       *\n       * If a subclass would like to modify the super class template, it should\n       * clone it rather than modify it in place.  If the getter does expensive\n       * work such as cloning/modifying a template, it should memoize the\n       * template for maximum performance:\n       *\n       *   let memoizedTemplate;\n       *   class MySubClass extends MySuperClass {\n       *     static get template() {\n       *       if (!memoizedTemplate) {\n       *         memoizedTemplate = super.template.cloneNode(true);\n       *         let subContent = document.createElement('div');\n       *         subContent.textContent = 'This came from MySubClass';\n       *         memoizedTemplate.content.appendChild(subContent);\n       *       }\n       *       return memoizedTemplate;\n       *     }\n       *   }\n       *\n       * @returns {HTMLTemplateElement|string}\n       */\n      static get template() {\n        if (!this.hasOwnProperty(goog.reflect.objectProperty('_template', this))) {\n          this._template = Polymer.DomModule.import(this.is, 'template') ||\n          // note: implemented so a subclass can retrieve the super\n          // template; call the super impl this way so that `this` points\n          // to the superclass.\n          Object.getPrototypeOf(this.prototype).constructor.template;\n        }\n        return this._template;\n      }\n\n      /**\n       * Path matching the url from which the element was imported.\n       * This path is used to resolve url's in template style cssText.\n       * The `importPath` property is also set on element instances and can be\n       * used to create bindings relative to the import path.\n       * Defaults to the path matching the url containing a `dom-module` element\n       * matching this element's static `is` property.\n       * Note, this path should contain a trailing `/`.\n       *\n       * @returns {string}\n       */\n      static get importPath() {\n        if (!this.hasOwnProperty(goog.reflect.objectProperty('_importPath', this))) {\n          const module = Polymer.DomModule.import(this.is);\n          this._importPath = module ? module.assetpath : '' || Object.getPrototypeOf(this.prototype).constructor.importPath;\n        }\n        return this._importPath;\n      }\n\n      constructor() {\n        super();\n        Polymer.telemetry.instanceCount++;\n        // Stamp template\n        if (this._template) {\n          this.root = this._stampTemplate(this._template);\n        } else {\n          this.root = this;\n        }\n      }\n\n      /**\n       * Overrides the default `Polymer.PropertyAccessors` to ensure class\n       * metaprogramming related to property accessors and effects has\n       * completed (calls `finalize`).\n       *\n       * It also initializes any property defaults provided via `value` in\n       * `properties` metadata.\n       *\n       * @override\n       */\n      _initializeProperties() {\n        this.constructor.finalize();\n        const importPath = this.constructor.importPath;\n        // note: finalize template when we have access to `localName` to\n        // avoid dependence on `is` for polyfilling styling.\n        if (this._template && !this._template.__polymerFinalized) {\n          this._template.__polymerFinalized = true;\n          const baseURI = importPath ? Polymer.ResolveUrl.resolveUrl(importPath) : '';\n          finalizeTemplate(this.__proto__, this._template, baseURI, this.localName);\n        }\n        super._initializeProperties();\n        // set path defaults\n        this.rootPath = Polymer.rootPath;\n        this.importPath = importPath;\n        // apply property defaults...\n        let p$ = propertyDefaultsForClass(this.constructor);\n        if (!p$) {\n          return;\n        }\n        for (let p in p$) {\n          let info = p$[p];\n          if (!this._isPropertyPending(p)) {\n            let value = typeof info.value == 'function' ? info.value.call(this) : info.value;\n            if (this._hasPropertyEffect(p)) {\n              this._setProperty(p, value);\n            } else {\n              this[p] = value;\n            }\n          }\n        }\n      }\n\n      /**\n       * Provides a default implementation of the standard Custom Elements\n       * `connectedCallback`.\n       *\n       * The default implementation enables the property effects system and\n       * flushes any pending properties, and updates shimmed CSS properties\n       * when using the ShadyCSS scoping/custom properties polyfill.\n       *\n       * @override\n       */\n      connectedCallback() {\n        if (window.ShadyCSS) {\n          window.ShadyCSS.styleElement(this);\n        }\n        this._flushProperties();\n      }\n\n      /**\n       * Provides a default implementation of the standard Custom Elements\n       * `disconnectedCallback`.\n       *\n       * @override\n       */\n      disconnectedCallback() {}\n\n      /**\n       * Implements `PropertyEffects`'s `_readyClients` call. Attaches\n       * element dom by calling `_attachDom` with the dom stamped from the\n       * element's template via `_stampTemplate`. Note that this allows\n       * client dom to be attached to the element prior to any observers\n       * running.\n       *\n       * @override\n       */\n      _readyClients() {\n        super._readyClients();\n        if (this._template) {\n          this.root = this._attachDom(this.root);\n        }\n      }\n\n      /**\n       * Attaches an element's stamped dom to itself. By default,\n       * this method creates a `shadowRoot` and adds the dom to it.\n       * However, this method may be overridden to allow an element\n       * to put its dom in another location.\n       *\n       * @method _attachDom\n       * @throws {Error}\n       * @suppress {missingReturn}\n       * @param {NodeList} dom to attach to the element.\n       * @return {Node} node to which the dom has been attached.\n       */\n      _attachDom(dom) {\n        if (this.attachShadow) {\n          if (dom) {\n            if (!this.shadowRoot) {\n              this.attachShadow({ mode: 'open' });\n            }\n            this.shadowRoot.appendChild(dom);\n            return this.shadowRoot;\n          }\n        } else {\n          throw new Error('ShadowDOM not available. ' +\n          // TODO(sorvell): move to compile-time conditional when supported\n          'Polymer.Element can create dom as children instead of in ' + 'ShadowDOM by setting `this.root = this;\\` before \\`ready\\`.');\n        }\n      }\n\n      /**\n       * Provides a default implementation of the standard Custom Elements\n       * `attributeChangedCallback`.\n       *\n       * By default, attributes declared in `properties` metadata are\n       * deserialized using their `type` information to properties of the\n       * same name.  \"Dash-cased\" attributes are deserialzed to \"camelCase\"\n       * properties.\n       *\n       * @override\n       */\n      attributeChangedCallback(name, old, value) {\n        if (old !== value) {\n          let property = caseMap.dashToCamelCase(name);\n          let type = propertiesForClass(this.constructor)[property].type;\n          if (!this._hasReadOnlyEffect(property)) {\n            this._attributeToProperty(name, value, type);\n          }\n        }\n      }\n\n      /**\n       * When using the ShadyCSS scoping and custom property shim, causes all\n       * shimmed styles in this element (and its subtree) to be updated\n       * based on current custom property values.\n       *\n       * The optional parameter overrides inline custom property styles with an\n       * object of properties where the keys are CSS properties, and the values\n       * are strings.\n       *\n       * Example: `this.updateStyles({'--color': 'blue'})`\n       *\n       * These properties are retained unless a value of `null` is set.\n       *\n       * @param {Object=} properties Bag of custom property key/values to\n       *   apply to this element.\n       */\n      updateStyles(properties) {\n        if (window.ShadyCSS) {\n          window.ShadyCSS.styleSubtree(this, properties);\n        }\n      }\n\n      /**\n       * Rewrites a given URL relative to a base URL. The base URL defaults to\n       * the original location of the document containing the `dom-module` for\n       * this element. This method will return the same URL before and after\n       * bundling.\n       *\n       * @param {string} url URL to resolve.\n       * @param {string=} base Optional base URL to resolve against, defaults\n       * to the element's `importPath`\n       * @return {string} Rewritten URL relative to base\n       */\n      resolveUrl(url, base) {\n        if (!base && this.importPath) {\n          base = Polymer.ResolveUrl.resolveUrl(this.importPath);\n        }\n        return Polymer.ResolveUrl.resolveUrl(url, base);\n      }\n\n    }\n\n    return PolymerElement;\n  });\n\n  /**\n   * Provides basic tracking of element definitions (registrations) and\n   * instance counts.\n   *\n   * @namespace\n   */\n  Polymer.telemetry = {\n    /**\n     * Total number of Polymer element instances created.\n     * @type {number}\n     */\n    instanceCount: 0,\n    /**\n     * Array of Polymer element classes that have been finalized.\n     * @type {Array<Polymer.Element>}\n     */\n    registrations: [],\n    /**\n     * @private\n     */\n    _regLog: function (prototype) {\n      console.log('[' + prototype.is + ']: registered');\n    },\n    /**\n     * Registers a class prototype for telemetry purposes.\n     * @protected\n     */\n    register: function (prototype) {\n      this.registrations.push(prototype);\n      Polymer.log && this._regLog(prototype);\n    },\n    /**\n     * Logs all elements registered with an `is` to the console.\n     * @public\n     */\n    dumpRegistrations: function () {\n      this.registrations.forEach(this._regLog);\n    }\n  };\n\n  /**\n   * When using the ShadyCSS scoping and custom property shim, causes all\n   * shimmed `styles` (via `custom-style`) in the document (and its subtree)\n   * to be updated based on current custom property values.\n   *\n   * The optional parameter overrides inline custom property styles with an\n   * object of properties where the keys are CSS properties, and the values\n   * are strings.\n   *\n   * Example: `Polymer.updateStyles({'--color': 'blue'})`\n   *\n   * These properties are retained unless a value of `null` is set.\n   *\n   * @param {Object=} properties Bag of custom property key/values to\n   *   apply to the document.\n   */\n  Polymer.updateStyles = function (props) {\n    if (window.ShadyCSS) {\n      window.ShadyCSS.styleDocument(props);\n    }\n  };\n\n  /**\n   * Globally settable property that is automatically assigned to\n   * `Polymer.ElementMixin` instances, useful for binding in templates to\n   * make URL's relative to an application's root.  Defaults to the main\n   * document URL, but can be overridden by users.  It may be useful to set\n   * `Polymer.rootPath` to provide a stable application mount path when\n   * using client side routing.\n   *\n   * @memberof Polymer\n   */\n  Polymer.rootPath = Polymer.rootPath || Polymer.ResolveUrl.pathFromUrl(document.baseURI || window.location.href);\n})();\n\n/***/ }),\n/* 5 */,\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/*__wc__loader*/\n\n(function (document) {\n  var _htmlStr = \"\\n\\n\\n\";\n  if (document.head) {\n    var el = document.head;\n    var div = document.createElement('div');\n    div.innerHTML = _htmlStr;\n    while (div.children.length > 0) {\n      el.appendChild(div.children[0]);\n    }\n  } else {\n    document.write(_htmlStr);\n  }\n})(document);\n\n(function (document) {\n  var _htmlStr = \"\";\n  if (document.body) {\n    var el = document.body;\n    var div = document.createElement('div');\n    div.innerHTML = _htmlStr;\n    while (div.children.length > 0) {\n      el.appendChild(div.children[0]);\n    }\n  } else {\n    document.write(_htmlStr);\n  }\n})(document);\n\n__webpack_require__(0);\n\n__webpack_require__(3);\n\n(function () {\n  'use strict';\n\n  let modules = {};\n  let lcModules = {};\n  function findModule(id) {\n    return modules[id] || lcModules[id.toLowerCase()];\n  }\n\n  function styleOutsideTemplateCheck(inst) {\n    if (inst.querySelector('style')) {\n      console.warn('dom-module %s has style outside template', inst.id);\n    }\n  }\n\n  /**\n   * The `dom-module` element registers the dom it contains to the name given\n   * by the module's id attribute. It provides a unified database of dom\n   * accessible via its static `import` API.\n   *\n   * A key use case of `dom-module` is for providing custom element `<template>`s\n   * via HTML imports that are parsed by the native HTML parser, that can be\n   * relocated during a bundling pass and still looked up by `id`.\n   *\n   * Example:\n   *\n   *     <dom-module id=\"foo\">\n   *       <img src=\"stuff.png\">\n   *     </dom-module>\n   *\n   * Then in code in some other location that cannot access the dom-module above\n   *\n   *     let img = document.createElement('dom-module').import('foo', 'img');\n   *\n   * @extends HTMLElement\n   * @memberof Polymer\n   * @summary Custom element that provides a registry of relocatable DOM content\n   *   by `id` that is agnostic to bundling.\n   */\n  class DomModule extends HTMLElement {\n\n    static get observedAttributes() {\n      return ['id'];\n    }\n\n    /**\n     * Retrieves the dom specified by `selector` in the module specified by\n     * `id`. For example, this.import('foo', 'img');\n     * @method register\n     * @param {string} id\n     * @param {string=} selector\n     * @return {Element} Returns the dom which matches `selector` in the module\n     * at the specified `id`.\n     */\n    static import(id, selector) {\n      if (id) {\n        let m = findModule(id);\n        if (m && selector) {\n          return m.querySelector(selector);\n        }\n        return m;\n      }\n      return null;\n    }\n\n    attributeChangedCallback(name, old, value) {\n      if (old !== value) {\n        this.register();\n      }\n    }\n\n    /**\n     * The absolute URL of the original location of this `dom-module`.\n     *\n     * This value will differ from this element's `ownerDocument` in the\n     * following ways:\n     * - Takes into account any `assetpath` attribute added during bundling\n     *   to indicate the original location relative to the bundled location\n     * - Uses the HTMLImports polyfill's `importForElement` API to ensure\n     *   the path is relative to the import document's location since\n     *   `ownerDocument` is not currently polyfilled\n     */\n    get assetpath() {\n      // Don't override existing assetpath.\n      if (!this.__assetpath) {\n        // note: assetpath set via an attribute must be relative to this\n        // element's location; accomodate polyfilled HTMLImports\n        const owner = window.HTMLImports && HTMLImports.importForElement ? HTMLImports.importForElement(this) || document : this.ownerDocument;\n        const url = Polymer.ResolveUrl.resolveUrl(this.getAttribute('assetpath') || '', owner.baseURI);\n        this.__assetpath = Polymer.ResolveUrl.pathFromUrl(url);\n      }\n      return this.__assetpath;\n    }\n\n    /**\n     * Registers the dom-module at a given id. This method should only be called\n     * when a dom-module is imperatively created. For\n     * example, `document.createElement('dom-module').register('foo')`.\n     * @method register\n     * @param {string=} id The id at which to register the dom-module.\n     */\n    register(id) {\n      id = id || this.id;\n      if (id) {\n        this.id = id;\n        // store id separate from lowercased id so that\n        // in all cases mixedCase id will stored distinctly\n        // and lowercase version is a fallback\n        modules[id] = this;\n        lcModules[id.toLowerCase()] = this;\n        styleOutsideTemplateCheck(this);\n      }\n    }\n  }\n\n  DomModule.prototype['modules'] = modules;\n\n  customElements.define('dom-module', DomModule);\n\n  // export\n  Polymer.DomModule = DomModule;\n})();\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/*__wc__loader*/\n\n(function (document) {\n  var _htmlStr = \"\\n\\n\\n\\n\\n\\n\";\n  if (document.head) {\n    var el = document.head;\n    var div = document.createElement('div');\n    div.innerHTML = _htmlStr;\n    while (div.children.length > 0) {\n      el.appendChild(div.children[0]);\n    }\n  } else {\n    document.write(_htmlStr);\n  }\n})(document);\n\n(function (document) {\n  var _htmlStr = \"\";\n  if (document.body) {\n    var el = document.body;\n    var div = document.createElement('div');\n    div.innerHTML = _htmlStr;\n    while (div.children.length > 0) {\n      el.appendChild(div.children[0]);\n    }\n  } else {\n    document.write(_htmlStr);\n  }\n})(document);\n\n__webpack_require__(0);\n\n__webpack_require__(1);\n\n__webpack_require__(2);\n\n__webpack_require__(10);\n\n(function () {\n\n  'use strict';\n\n  let caseMap = Polymer.CaseMap;\n\n  let microtask = Polymer.Async.microTask;\n\n  // Save map of native properties; this forms a blacklist or properties\n  // that won't have their values \"saved\" by `saveAccessorValue`, since\n  // reading from an HTMLElement accessor from the context of a prototype throws\n  const nativeProperties = {};\n  let proto = HTMLElement.prototype;\n  while (proto) {\n    let props = Object.getOwnPropertyNames(proto);\n    for (let i = 0; i < props.length; i++) {\n      nativeProperties[props[i]] = true;\n    }\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  /**\n   * Used to save the value of a property that will be overridden with\n   * an accessor. If the `model` is a prototype, the values will be saved\n   * in `__dataProto`, and it's up to the user (or downstream mixin) to\n   * decide how/when to set these values back into the accessors.\n   * If `model` is already an instance (it has a `__data` property), then\n   * the value will be set as a pending property, meaning the user should\n   * call `_invalidateProperties` or `_flushProperties` to take effect\n   *\n   * @param {Object} model Prototype or instance\n   * @param {string} property Name of property\n   * @private\n   */\n  function saveAccessorValue(model, property) {\n    // Don't read/store value for any native properties since they could throw\n    if (!nativeProperties[property]) {\n      let value = model[property];\n      if (value !== undefined) {\n        if (model.__data) {\n          // Adding accessor to instance; update the property\n          // It is the user's responsibility to call _flushProperties\n          model._setPendingProperty(property, value);\n        } else {\n          // Adding accessor to proto; save proto's value for instance-time use\n          if (!model.__dataProto) {\n            model.__dataProto = {};\n          } else if (!model.hasOwnProperty(goog.reflect.objectProperty('__dataProto', model))) {\n            model.__dataProto = Object.create(model.__dataProto);\n          }\n          model.__dataProto[property] = value;\n        }\n      }\n    }\n  }\n\n  /**\n   * Element class mixin that provides basic meta-programming for creating one\n   * or more property accessors (getter/setter pair) that enqueue an async\n   * (batched) `_propertiesChanged` callback.\n   *\n   * For basic usage of this mixin, simply declare attributes to observe via\n   * the standard `static get observedAttributes()`, implement `_propertiesChanged`\n   * on the class, and then call `MyClass.createPropertiesForAttributes()` once\n   * on the class to generate property accessors for each observed attribute\n   * prior to instancing.  Any `observedAttributes` will automatically be\n   * deserialized via `attributeChangedCallback` and set to the associated\n   * property using `dash-case`-to-`camelCase` convention.\n   *\n   * @polymerMixin\n   * @memberof Polymer\n   * @summary Element class mixin for reacting to property changes from\n   *   generated property accessors.\n   */\n  Polymer.PropertyAccessors = Polymer.dedupingMixin(function (superClass) {\n\n    return class PropertyAccessors extends superClass {\n\n      /**\n       * Generates property accessors for all attributes in the standard\n       * static `observedAttributes` array.\n       *\n       * Attribute names are mapped to property names using the `dash-case` to\n       * `camelCase` convention\n       *\n       */\n      static createPropertiesForAttributes() {\n        let a$ = this.observedAttributes;\n        for (let i = 0; i < a$.length; i++) {\n          this.prototype._createPropertyAccessor(caseMap.dashToCamelCase(a$[i]));\n        }\n      }\n\n      constructor() {\n        super();\n        this._initializeProperties();\n      }\n\n      attributeChangedCallback(name, old, value) {\n        if (old !== value) {\n          this._attributeToProperty(name, value);\n        }\n      }\n\n      /**\n       * Initializes the local storage for property accessors.\n       *\n       * Provided as an override point for performing any setup work prior\n       * to initializing the property accessor system.\n       *\n       * @protected\n       */\n      _initializeProperties() {\n        this.__serializing = false;\n        this.__dataCounter = 0;\n        this.__dataInvalid = false;\n        // initialize data with prototype values saved when creating accessors\n        this.__data = {};\n        this.__dataPending = null;\n        this.__dataOld = null;\n        if (this.__dataProto) {\n          this._initializeProtoProperties(this.__dataProto);\n        }\n      }\n\n      /**\n       * Called at instance time with bag of properties that were overwritten\n       * by accessors on the prototype when accessors were created.\n       *\n       * The default implementation sets these properties back into the\n       * setter at instance time.  This method is provided as an override\n       * point for customizing or providing more efficient initialization.\n       *\n       * @param {Object} props Bag of property values that were overwritten\n       *   when creating property accessors.\n       * @protected\n       */\n      _initializeProtoProperties(props) {\n        for (let p in props) {\n          this._setProperty(p, props[p]);\n        }\n      }\n\n      /**\n       * Ensures the element has the given attribute. If it does not,\n       * assigns the given value to the attribute.\n       *\n       *\n       * @method _ensureAttribute\n       * @param {string} attribute Name of attribute to ensure is set.\n       * @param {string} value of the attribute.\n       */\n      _ensureAttribute(attribute, value) {\n        if (!this.hasAttribute(attribute)) {\n          this._valueToNodeAttribute(this, value, attribute);\n        }\n      }\n\n      /**\n       * Deserializes an attribute to its associated property.\n       *\n       * This method calls the `_deserializeValue` method to convert the string to\n       * a typed value.\n       *\n       * @method _attributeToProperty\n       * @param {string} attribute Name of attribute to deserialize.\n       * @param {string} value of the attribute.\n       * @param {*} type type to deserialize to.\n       */\n      _attributeToProperty(attribute, value, type) {\n        // Don't deserialize back to property if currently reflecting\n        if (!this.__serializing) {\n          let property = caseMap.dashToCamelCase(attribute);\n          this[property] = this._deserializeValue(value, type);\n        }\n      }\n\n      /**\n       * Serializes a property to its associated attribute.\n       *\n       * @method _propertyToAttribute\n       * @param {string} property Property name to reflect.\n       * @param {string=} attribute Attribute name to reflect.\n       * @param {*=} value Property value to refect.\n       */\n      _propertyToAttribute(property, attribute, value) {\n        this.__serializing = true;\n        value = arguments.length < 3 ? this[property] : value;\n        this._valueToNodeAttribute(this, value, attribute || caseMap.camelToDashCase(property));\n        this.__serializing = false;\n      }\n\n      /**\n       * Sets a typed value to an HTML attribute on a node.\n       *\n       * This method calls the `_serializeValue` method to convert the typed\n       * value to a string.  If the `_serializeValue` method returns `undefined`,\n       * the attribute will be removed (this is the default for boolean\n       * type `false`).\n       *\n       * @method _valueToNodeAttribute\n       * @param {Element} node Element to set attribute to.\n       * @param {*} value Value to serialize.\n       * @param {string} attribute Attribute name to serialize to.\n       */\n      _valueToNodeAttribute(node, value, attribute) {\n        let str = this._serializeValue(value);\n        if (str === undefined) {\n          node.removeAttribute(attribute);\n        } else {\n          node.setAttribute(attribute, str);\n        }\n      }\n\n      /**\n       * Converts a typed JavaScript value to a string.\n       *\n       * This method is called by Polymer when setting JS property values to\n       * HTML attributes.  Users may override this method on Polymer element\n       * prototypes to provide serialization for custom types.\n       *\n       * @method _serializeValue\n       * @param {*} value Property value to serialize.\n       * @return {string | undefined} String serialized from the provided property value.\n       */\n      _serializeValue(value) {\n        /* eslint-disable no-fallthrough */\n        switch (typeof value) {\n          case 'boolean':\n            return value ? '' : undefined;\n\n          case 'object':\n            if (value instanceof Date) {\n              return value.toString();\n            } else if (value) {\n              try {\n                return JSON.stringify(value);\n              } catch (x) {\n                return '';\n              }\n            }\n\n          default:\n            return value != null ? value.toString() : undefined;\n        }\n      }\n\n      /**\n       * Converts a string to a typed JavaScript value.\n       *\n       * This method is called by Polymer when reading HTML attribute values to\n       * JS properties.  Users may override this method on Polymer element\n       * prototypes to provide deserialization for custom `type`s.  Note,\n       * the `type` argument is the value of the `type` field provided in the\n       * `properties` configuration object for a given property, and is\n       * by convention the constructor for the type to deserialize.\n       *\n       * Note: The return value of `undefined` is used as a sentinel value to\n       * indicate the attribute should be removed.\n       *\n       * @method _deserializeValue\n       * @param {string} value Attribute value to deserialize.\n       * @param {*} type Type to deserialize the string to.\n       * @return {*} Typed value deserialized from the provided string.\n       */\n      _deserializeValue(value, type) {\n        /**\n         * @type {*}\n         */\n        let outValue;\n        switch (type) {\n          case Number:\n            outValue = Number(value);\n            break;\n\n          case Boolean:\n            outValue = value !== null;\n            break;\n\n          case Object:\n            try {\n              outValue = JSON.parse(value);\n            } catch (x) {\n              // allow non-JSON literals like Strings and Numbers\n            }\n            break;\n\n          case Array:\n            try {\n              outValue = JSON.parse(value);\n            } catch (x) {\n              outValue = null;\n              console.warn('Polymer::Attributes: couldn`t decode Array as JSON');\n            }\n            break;\n\n          case Date:\n            outValue = new Date(value);\n            break;\n\n          case String:\n          default:\n            outValue = value;\n            break;\n        }\n\n        return outValue;\n      }\n      /* eslint-enable no-fallthrough */\n\n      /**\n       * Creates a setter/getter pair for the named property with its own\n       * local storage.  The getter returns the value in the local storage,\n       * and the setter calls `_setProperty`, which updates the local storage\n       * for the property and enqueues a `_propertiesChanged` callback.\n       *\n       * This method may be called on a prototype or an instance.  Calling\n       * this method may overwrite a property value that already exists on\n       * the prototype/instance by creating the accessor.  When calling on\n       * a prototype, any overwritten values are saved in `__dataProto`,\n       * and it is up to the subclasser to decide how/when to set those\n       * properties back into the accessor.  When calling on an instance,\n       * the overwritten value is set via `_setPendingProperty`, and the\n       * user should call `_invalidateProperties` or `_flushProperties`\n       * for the values to take effect.\n       *\n       * @param {string} property Name of the property\n       * @param {boolean=} readOnly When true, no setter is created; the\n       *   protected `_setProperty` function must be used to set the property\n       * @protected\n       */\n      _createPropertyAccessor(property, readOnly) {\n        saveAccessorValue(this, property);\n        Object.defineProperty(this, property, {\n          get: function () {\n            return this.__data[property];\n          },\n          set: readOnly ? function () {} : function (value) {\n            this._setProperty(property, value);\n          }\n        });\n      }\n\n      /**\n       * Updates the local storage for a property (via `_setPendingProperty`)\n       * and enqueues a `_proeprtiesChanged` callback.\n       *\n       * @param {string} property Name of the property\n       * @param {*} value Value to set\n       * @protected\n       */\n      _setProperty(property, value) {\n        if (this._setPendingProperty(property, value)) {\n          this._invalidateProperties();\n        }\n      }\n\n      /**\n       * Updates the local storage for a property, records the previous value,\n       * and adds it to the set of \"pending changes\" that will be passed to the\n       * `_propertiesChanged` callback.  This method does not enqueue the\n       * `_propertiesChanged` callback.\n       *\n       * @param {string} property Name of the property\n       * @param {*} value Value to set\n       * @protected\n       */\n      _setPendingProperty(property, value) {\n        let old = this.__data[property];\n        if (this._shouldPropertyChange(property, value, old)) {\n          if (!this.__dataPending) {\n            this.__dataPending = {};\n            this.__dataOld = {};\n          }\n          // Ensure old is captured from the last turn\n          if (!(property in this.__dataOld)) {\n            this.__dataOld[property] = old;\n          }\n          this.__data[property] = value;\n          this.__dataPending[property] = value;\n          return true;\n        }\n      }\n\n      /**\n       * Returns true if the specified property has a pending change.\n       *\n       * @param {string} prop Property name\n       * @return {boolean} True if property has a pending change\n       * @protected\n       */\n      _isPropertyPending(prop) {\n        return this.__dataPending && prop in this.__dataPending;\n      }\n\n      /**\n       * Marks the properties as invalid, and enqueues an async\n       * `_propertiesChanged` callback.\n       *\n       * @protected\n       */\n      _invalidateProperties() {\n        if (!this.__dataInvalid) {\n          this.__dataInvalid = true;\n          microtask.run(() => {\n            if (this.__dataInvalid) {\n              this.__dataInvalid = false;\n              this._flushProperties();\n            }\n          });\n        }\n      }\n\n      /**\n       * Calls the `_propertiesChanged` callback with the current set of\n       * pending changes (and old values recorded when pending changes were\n       * set), and resets the pending set of changes.\n       *\n       * @protected\n       */\n      _flushProperties() {\n        let oldProps = this.__dataOld;\n        let changedProps = this.__dataPending;\n        this.__dataPending = null;\n        this.__dataCounter++;\n        this._propertiesChanged(this.__data, changedProps, oldProps);\n        this.__dataCounter--;\n      }\n\n      /**\n       * Callback called when any properties with accessors created via\n       * `_createPropertyAccessor` have been set.\n       *\n       * @param {Object} currentProps Bag of all current accessor values\n       * @param {Object} changedProps Bag of properties changed since the last\n       *   call to `_propertiesChanged`\n       * @param {Object} oldProps Bag of previous values for each property\n       *   in `changedProps`\n       * @protected\n       */\n      _propertiesChanged(currentProps, changedProps, oldProps) {} // eslint-disable-line no-unused-vars\n\n\n      /**\n       * Method called to determine whether a property value should be\n       * considered as a change and cause the `_propertiesChanged` callback\n       * to be enqueued.\n       *\n       * The default implementation returns `true` for primitive types if a\n       * strict equality check fails, and returns `true` for all Object/Arrays.\n       * The method always returns false for `NaN`.\n       *\n       * Override this method to e.g. provide stricter checking for\n       * Objects/Arrays when using immutable patterns.\n       *\n       * @param {string} property Property name\n       * @param {*} value New property value\n       * @param {*} old Previous property value\n       * @return {boolean} Whether the property should be considered a change\n       *   and enqueue a `_proeprtiesChanged` callback\n       * @protected\n       */\n      _shouldPropertyChange(property, value, old) {\n        return (\n          // Strict equality check\n          old !== value && (\n          // This ensures (old==NaN, value==NaN) always returns false\n          old === old || value === value)\n        );\n      }\n\n    };\n  });\n})();\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/*__wc__loader*/\n\n(function (document) {\n  var _htmlStr = \"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\";\n  if (document.head) {\n    var el = document.head;\n    var div = document.createElement('div');\n    div.innerHTML = _htmlStr;\n    while (div.children.length > 0) {\n      el.appendChild(div.children[0]);\n    }\n  } else {\n    document.write(_htmlStr);\n  }\n})(document);\n\n(function (document) {\n  var _htmlStr = \"\";\n  if (document.body) {\n    var el = document.body;\n    var div = document.createElement('div');\n    div.innerHTML = _htmlStr;\n    while (div.children.length > 0) {\n      el.appendChild(div.children[0]);\n    }\n  } else {\n    document.write(_htmlStr);\n  }\n})(document);\n\n__webpack_require__(0);\n\n__webpack_require__(1);\n\n__webpack_require__(11);\n\n__webpack_require__(2);\n\n__webpack_require__(7);\n\n__webpack_require__(9);\n\n(function () {\n\n  'use strict';\n\n  const CaseMap = Polymer.CaseMap;\n\n  // Monotonically increasing unique ID used for de-duping effects triggered\n  // from multiple properties in the same turn\n  let dedupeId = 0;\n\n  // Property effect types; effects are stored on the prototype using these keys\n  const TYPES = {\n    ANY: '__propertyEffects',\n    COMPUTE: '__computeEffects',\n    REFLECT: '__reflectEffects',\n    NOTIFY: '__notifyEffects',\n    PROPAGATE: '__propagateEffects',\n    OBSERVE: '__observeEffects',\n    READ_ONLY: '__readOnly'\n  };\n\n  /**\n   * Ensures that the model has an own-property map of effects for the given type.\n   * The model may be a prototype or an instance.\n   *\n   * Property effects are stored as arrays of effects by property in a map,\n   * by named type on the model. e.g.\n   *\n   *   __computeEffects: {\n   *     foo: [ ... ],\n   *     bar: [ ... ]\n   *   }\n   *\n   * If the model does not yet have an effect map for the type, one is created\n   * and returned.  If it does, but it is not an own property (i.e. the\n   * prototype had effects), the the map is deeply cloned and the copy is\n   * set on the model and returned, ready for new effects to be added.\n   *\n   * @param {Object} model Prototype or instance\n   * @param {string} type Property effect type\n   * @return {Object} The own-property map of effects for the given type\n   * @private\n   */\n  function ensureOwnEffectMap(model, type) {\n    let effects = model[type];\n    if (!effects) {\n      effects = model[type] = {};\n    } else if (!model.hasOwnProperty(type)) {\n      effects = model[type] = Object.create(model[type]);\n      for (let p in effects) {\n        let protoFx = effects[p];\n        let instFx = effects[p] = Array(protoFx.length);\n        for (let i = 0; i < protoFx.length; i++) {\n          instFx[i] = protoFx[i];\n        }\n      }\n    }\n    return effects;\n  }\n\n  // -- effects ----------------------------------------------\n\n  /**\n   * Runs all effects of a given type for the given set of property changes\n   * on an instance.\n   *\n   * @param {Object} inst The instance with effects to run\n   * @param {string} type Type of effect to run\n   * @param {Object} props Bag of current property changes\n   * @param {Object=} oldProps Bag of previous values for changed properties\n   * @private\n   */\n  function runEffects(inst, effects, props, oldProps, hasPaths) {\n    if (effects) {\n      let ran;\n      let id = dedupeId++;\n      for (let prop in props) {\n        if (runEffectsForProperty(inst, effects, id, prop, props, oldProps, hasPaths)) {\n          ran = true;\n        }\n      }\n      return ran;\n    }\n  }\n\n  /**\n   * Runs a list of effects for a given property.\n   *\n   * @param {Object} inst The instance with effects to run\n   * @param {Array} effects Array of effects\n   * @param {number} id Effect run id used for de-duping effects\n   * @param {string} prop Name of changed property\n   * @param {*} value Value of changed property\n   * @param {*} old Previous value of changed property\n   * @private\n   */\n  function runEffectsForProperty(inst, effects, dedupeId, prop, props, oldProps, hasPaths) {\n    let ran;\n    let rootProperty = hasPaths ? Polymer.Path.root(prop) : prop;\n    let fxs = effects[rootProperty];\n    if (fxs) {\n      for (let i = 0, l = fxs.length, fx; i < l && (fx = fxs[i]); i++) {\n        if ((!fx.info || fx.info.lastRun !== dedupeId) && (!hasPaths || pathMatchesTrigger(prop, fx.trigger))) {\n          fx.fn(inst, prop, props, oldProps, fx.info, hasPaths);\n          if (fx.info) {\n            fx.info.lastRun = dedupeId;\n          }\n          ran = true;\n        }\n      }\n    }\n    return ran;\n  }\n\n  /**\n   * Determines whether a property/path that has changed matches the trigger\n   * criteria for an effect.  A trigger is a descriptor with the following\n   * structure, which matches the descriptors returned from `parseArg`.\n   * e.g. for `foo.bar.*`:\n   * ```\n   * trigger: {\n   *   name: 'a.b',\n   *   structured: true,\n   *   wildcard: true\n   * }\n   * ```\n   * If no trigger is given, the path is deemed to match.\n   *\n   * @param {string} path Path or property that changed\n   * @param {Object} trigger Descriptor\n   * @return {boolean} Whether the path matched the trigger\n   */\n  function pathMatchesTrigger(path, trigger) {\n    if (trigger) {\n      let triggerPath = trigger.name;\n      return triggerPath == path || trigger.structured && Polymer.Path.isAncestor(triggerPath, path) || trigger.wildcard && Polymer.Path.isDescendant(triggerPath, path);\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   * Implements the \"observer\" effect.\n   *\n   * Calls the method with `info.methodName` on the instance, passing the\n   * new and old values.\n   *\n   * @param {Object} inst The instance the effect will be run on\n   * @param {string} property Name of property\n   * @param {*} value Current value of property\n   * @param {*} old Previous value of property\n   * @param {Object} info Effect metadata\n   * @private\n   */\n  function runObserverEffect(inst, property, props, oldProps, info) {\n    let fn = inst[info.methodName];\n    let changedProp = info.property;\n    if (fn) {\n      fn.call(inst, inst.__data[changedProp], oldProps[changedProp]);\n    } else {\n      console.warn('observer method `' + info.methodName + '` not defined');\n    }\n  }\n\n  /**\n   * Runs \"notify\" effects for a set of changed properties.\n   *\n   * This method differs from the generic `runEffects` method in that it\n   * will dispatch path notification events in the case that the property\n   * changed was a path and the root property for that path didn't have a\n   * \"notify\" effect.  This is to maintain 1.0 behavior that did not require\n   * `notify: true` to ensure object sub-property notifications were\n   * sent.\n   *\n   * @param {Element} inst The instance with effects to run\n   * @param {Object} props Bag of current property changes\n   * @param {Object} oldProps Bag of previous values for changed properties\n   * @private\n   */\n  function runNotifyEffects(inst, notifyProps, props, oldProps, hasPaths) {\n    // Notify\n    let fxs = inst.__notifyEffects;\n    let notified;\n    let id = dedupeId++;\n    // Try normal notify effects; if none, fall back to try path notification\n    for (let prop in notifyProps) {\n      if (notifyProps[prop]) {\n        if (fxs && runEffectsForProperty(inst, fxs, id, prop, props, oldProps, hasPaths)) {\n          notified = true;\n        } else if (hasPaths && notifyPath(inst, prop, props)) {\n          notified = true;\n        }\n      }\n    }\n    // Flush host if we actually notified and host was batching\n    let host;\n    if (notified && (host = inst.__dataHost) && host._flushProperties) {\n      host._flushProperties();\n    }\n  }\n\n  /**\n   * Dispatches {property}-changed events with path information in the detail\n   * object to indicate a sub-path of the property was changed.\n   *\n   * @param {Element} inst The element from which to fire the event\n   * @param {string} path The path that was changed\n   * @param {*} value\n   * @private\n   */\n  function notifyPath(inst, path, props) {\n    let rootProperty = Polymer.Path.root(path);\n    if (rootProperty !== path) {\n      let eventName = Polymer.CaseMap.camelToDashCase(rootProperty) + '-changed';\n      dispatchNotifyEvent(inst, eventName, props[path], path);\n      return true;\n    }\n  }\n\n  /**\n   * Dispatches {property}-changed events to indicate a property (or path)\n   * changed.\n   *\n   * @param {Element} inst The element from which to fire the event\n   * @param {string} eventName The name of the event to send ('{property}-changed')\n   * @param {*} value The value of the changed property\n   * @param {string | null | undefined} path If a sub-path of this property changed, the path\n   *   that changed (optional).\n   * @private\n   */\n  function dispatchNotifyEvent(inst, eventName, value, path) {\n    let detail = {\n      value: value,\n      queueProperty: true\n    };\n    if (path) {\n      detail.path = path;\n    }\n    inst.dispatchEvent(new CustomEvent(eventName, { detail }));\n  }\n\n  /**\n   * Implements the \"notify\" effect.\n   *\n   * Dispatches a non-bubbling event named `info.eventName` on the instance\n   * with a detail object containing the new `value`.\n   *\n   * @param {Element} inst The instance the effect will be run on\n   * @param {string} property Name of property\n   * @param {*} value Current value of property\n   * @param {*} old Previous value of property\n   * @param {Object} info Effect metadata\n   * @private\n   */\n  function runNotifyEffect(inst, property, props, oldProps, info, hasPaths) {\n    let rootProperty = hasPaths ? Polymer.Path.root(property) : property;\n    let path = rootProperty != property ? property : null;\n    let value = path ? Polymer.Path.get(inst, path) : inst.__data[property];\n    if (path && value === undefined) {\n      value = props[property]; // specifically for .splices\n    }\n    dispatchNotifyEvent(inst, info.eventName, value, path);\n  }\n\n  /**\n   * Adds a 2-way binding notification event listener to the node specified\n   *\n   * @param {Object} node Child element to add listener to\n   * @param {Object} inst Host element instance to handle notification event\n   * @param {Object} info Listener metadata stored via addAnnotatedListener\n   * @private\n   */\n  function addNotifyListener(node, inst, info) {\n    node.addEventListener(info.event, function (e) {\n      handleNotification(e, inst, info.property, info.path, info.negate);\n    });\n  }\n\n  /**\n   * Handler function for 2-way notification events. Receives context\n   * information captured in the `addNotifyListener` closure from the\n   * `__notifyListeners` metadata.\n   *\n   * Sets the value of the notified property to the host property or path.  If\n   * the event contained path information, translate that path to the host\n   * scope's name for that path first.\n   *\n   * @param {Event} e Notification event (e.g. '<property>-changed')\n   * @param {Object} inst Host element instance handling the notification event\n   * @param {string} property Child element property that was bound\n   * @param {string} path Host property/path that was bound\n   * @param {boolean} negate Whether the binding was negated\n   * @private\n   */\n  function handleNotification(e, inst, property, path, negate) {\n    let value;\n    let targetPath = e.detail && e.detail.path;\n    if (targetPath) {\n      path = Polymer.Path.translate(property, path, targetPath);\n      value = e.detail && e.detail.value;\n    } else {\n      value = e.target[property];\n    }\n    value = negate ? !value : value;\n    setPropertyFromNotification(inst, path, value, e);\n  }\n\n  /**\n   * Called by 2-way binding notification event listeners to set a property\n   * or path to the host based on a notification from a bound child.\n   *\n   * @param {string} path Path on this instance to set\n   * @param {*} value Value to set to given path\n   * @protected\n   */\n  function setPropertyFromNotification(inst, path, value, event) {\n    let detail = event.detail;\n    if (detail && detail.queueProperty) {\n      if (!inst.__readOnly || !inst.__readOnly[path]) {\n        inst._setPendingPropertyOrPath(path, value, true, Boolean(detail.path));\n      }\n    } else {\n      inst.set(path, value);\n    }\n  }\n\n  /**\n   * Implements the \"reflect\" effect.\n   *\n   * Sets the attribute named `info.attrName` to the given property value.\n   *\n   * @param {Object} inst The instance the effect will be run on\n   * @param {string} property Name of property\n   * @param {*} value Current value of property\n   * @param {*} old Previous value of property\n   * @param {Object} info Effect metadata\n   * @private\n   */\n  function runReflectEffect(inst, property, props, oldProps, info) {\n    let value = inst.__data[property];\n    if (Polymer.sanitizeDOMValue) {\n      value = Polymer.sanitizeDOMValue(value, info.attrName, 'attribute', inst);\n    }\n    inst._propertyToAttribute(property, info.attrName, value);\n  }\n\n  /**\n   * Runs \"computed\" effects for a set of changed properties.\n   *\n   * This method differs from the generic `runEffects` method in that it\n   * continues to run computed effects based on the output of each pass until\n   * there are no more newly computed properties.  This ensures that all\n   * properties that will be computed by the initial set of changes are\n   * computed before other effects (binding propagation, observers, and notify)\n   * run.\n   *\n   * @param {Element} inst The instance the effect will be run on\n   * @param {Object} changedProps Bag of changed properties\n   * @param {Object} oldProps Bag of previous values for changed properties\n   * @private\n   */\n  function runComputedEffects(inst, changedProps, oldProps, hasPaths) {\n    let computeEffects = inst.__computeEffects;\n    if (computeEffects) {\n      let inputProps = changedProps;\n      while (runEffects(inst, computeEffects, inputProps, oldProps, hasPaths)) {\n        Object.assign(oldProps, inst.__dataOld);\n        Object.assign(changedProps, inst.__dataPending);\n        inputProps = inst.__dataPending;\n        inst.__dataPending = null;\n      }\n    }\n  }\n\n  /**\n   * Implements the \"computed property\" effect by running the method with the\n   * values of the arguments specified in the `info` object and setting the\n   * return value to the computed property specified.\n   *\n   * @param {Object} inst The instance the effect will be run on\n   * @param {string} property Name of property\n   * @param {*} value Current value of property\n   * @param {*} old Previous value of property\n   * @param {Object} info Effect metadata\n   * @private\n   */\n  function runComputedEffect(inst, property, props, oldProps, info) {\n    let result = runMethodEffect(inst, property, props, oldProps, info);\n    let computedProp = info.methodInfo;\n    if (inst.__propertyEffects && inst.__propertyEffects[computedProp]) {\n      inst._setPendingProperty(computedProp, result, true);\n    } else {\n      inst[computedProp] = result;\n    }\n  }\n\n  /**\n   * Computes path changes based on path links set up using the `linkPaths`\n   * API.\n   *\n   * @param {Element} inst The instance whose props are changing\n   * @param {Object} changedProps Bag of changed properties\n   * @private\n   */\n  function computeLinkedPaths(inst, changedProps, hasPaths) {\n    let links;\n    if (hasPaths && (links = inst.__dataLinkedPaths)) {\n      const cache = inst.__dataTemp;\n      let link;\n      for (let a in links) {\n        let b = links[a];\n        for (let path in changedProps) {\n          if (Polymer.Path.isDescendant(a, path)) {\n            link = Polymer.Path.translate(a, b, path);\n            cache[link] = changedProps[link] = changedProps[path];\n            let notifyProps = inst.__dataToNotify || (inst.__dataToNotify = {});\n            notifyProps[link] = true;\n          } else if (Polymer.Path.isDescendant(b, path)) {\n            link = Polymer.Path.translate(b, a, path);\n            cache[link] = changedProps[link] = changedProps[path];\n            let notifyProps = inst.__dataToNotify || (inst.__dataToNotify = {});\n            notifyProps[link] = true;\n          }\n        }\n      }\n    }\n  }\n\n  // -- bindings ----------------------------------------------\n\n  /**\n   * Adds \"binding\" property effects for the template annotation\n   * (\"note\" for short) and node index specified.  These may either be normal\n   * \"binding\" effects (property/path bindings) or \"method binding\"\n   * effects, aka inline computing functions, depending on the type of binding\n   * detailed in the note.\n   *\n   * @param {Object} model Prototype or instance\n   * @param {Object} note Annotation note returned from Annotator\n   * @param {number} index Index into `__templateNodes` list of annotated nodes that the\n   *   note applies to\n   * @param {Object=} dynamicFns Map indicating whether method names should\n   *   be included as a dependency to the effect.\n   * @private\n   */\n  function addBindingEffect(model, note, index, dynamicFns) {\n    for (let i = 0; i < note.parts.length; i++) {\n      let part = note.parts[i];\n      if (part.signature) {\n        addMethodBindingEffect(model, note, part, index, dynamicFns);\n      } else if (!part.literal) {\n        if (note.kind === 'attribute' && note.name[0] === '-') {\n          console.warn('Cannot set attribute ' + note.name + ' because \"-\" is not a valid attribute starting character');\n        } else {\n          model._addPropertyEffect(Polymer.Path.root(part.value), TYPES.PROPAGATE, {\n            fn: runBindingEffect,\n            info: {\n              kind: note.kind,\n              index: index,\n              name: note.name,\n              propertyName: note.propertyName,\n              value: part.value,\n              isCompound: note.isCompound,\n              compoundIndex: part.compoundIndex,\n              event: part.event,\n              customEvent: part.customEvent,\n              negate: part.negate\n            }\n          });\n        }\n      }\n    }\n  }\n\n  /**\n   * Implements the \"binding\" (property/path binding) effect.\n   *\n   * @param {Element} inst The instance the effect will be run on\n   * @param {string} path Name of property\n   * @param {*} value Current value of property\n   * @param {*} old Previous value of property\n   * @param {Object} info Effect metadata\n   * @private\n   */\n  function runBindingEffect(inst, path, props, oldProps, info, hasPaths) {\n    let value;\n    let node = inst.__templateNodes[info.index];\n    // Subpath notification: transform path and set to client\n    // e.g.: foo=\"{{obj.sub}}\", path: 'obj.sub.prop', set 'foo.prop'=obj.sub.prop\n    if (hasPaths && path.length > info.value.length && info.kind == 'property' && !info.isCompound && node.__propertyEffects && node.__propertyEffects[info.name]) {\n      let value = props[path];\n      path = Polymer.Path.translate(info.value, info.name, path);\n      if (node._setPendingPropertyOrPath(path, value, false, true)) {\n        inst._enqueueClient(node);\n      }\n    } else {\n      // Root or deeper path was set; extract bound path value\n      // e.g.: foo=\"{{obj.sub}}\", path: 'obj', set 'foo'=obj.sub\n      //   or: foo=\"{{obj.sub}}\", path: 'obj.sub.prop', set 'foo'=obj.sub\n      if (path != info.value) {\n        value = Polymer.Path.get(inst, info.value);\n      } else {\n        if (hasPaths && Polymer.Path.isPath(path)) {\n          value = Polymer.Path.get(inst, path);\n        } else {\n          value = inst.__data[path];\n        }\n      }\n      // Propagate value to child\n      applyBindingValue(inst, info, value);\n    }\n  }\n\n  /**\n   * Sets the value for an \"binding\" (binding) effect to a node,\n   * either as a property or attribute.\n   *\n   * @param {Object} inst The instance owning the binding effect\n   * @param {Object} info Effect metadata\n   * @param {*} value Value to set\n   * @private\n   */\n  function applyBindingValue(inst, info, value) {\n    let node = inst.__templateNodes[info.index];\n    value = computeBindingValue(node, value, info);\n    if (Polymer.sanitizeDOMValue) {\n      value = Polymer.sanitizeDOMValue(value, info.name, info.kind, node);\n    }\n    if (info.kind == 'attribute') {\n      // Attribute binding\n      inst._valueToNodeAttribute(node, value, info.name);\n    } else {\n      // Property binding\n      let prop = info.name;\n      if (node.__propertyEffects && node.__propertyEffects[prop]) {\n        if (!node.__readOnly || !node.__readOnly[prop]) {\n          if (node._setPendingProperty(prop, value)) {\n            inst._enqueueClient(node);\n          }\n        }\n      } else {\n        inst._setUnmanagedPropertyToNode(node, prop, value);\n      }\n    }\n  }\n\n  /**\n   * Transforms an \"binding\" effect value based on compound & negation\n   * effect metadata, as well as handling for special-case properties\n   *\n   * @param {Node} node Node the value will be set to\n   * @param {*} value Value to set\n   * @param {Object} info Effect metadata\n   * @return {*} Transformed value to set\n   * @private\n   */\n  function computeBindingValue(node, value, info) {\n    if (info.negate) {\n      value = !value;\n    }\n    if (info.isCompound) {\n      let storage = node.__dataCompoundStorage[info.name];\n      storage[info.compoundIndex] = value;\n      value = storage.join('');\n    }\n    if (info.kind !== 'attribute') {\n      // Some browsers serialize `undefined` to `\"undefined\"`\n      if (info.name === 'textContent' || node.localName == 'input' && info.name == 'value') {\n        value = value == undefined ? '' : value;\n      }\n    }\n    return value;\n  }\n\n  /**\n   * Adds \"binding method\" property effects for the template binding\n   * (\"note\" for short), part metadata, and node index specified.\n   *\n   * @param {Object} model Prototype or instance\n   * @param {Object} note Binding note returned from Annotator\n   * @param {Object} part The compound part metadata\n   * @param {number} index Index into `__templateNodes` list of annotated nodes that the\n   *   note applies to\n   * @param {Object=} dynamicFns Map indicating whether method names should\n   *   be included as a dependency to the effect.\n   * @private\n   */\n  function addMethodBindingEffect(model, note, part, index, dynamicFns) {\n    createMethodEffect(model, part.signature, TYPES.PROPAGATE, runMethodBindingEffect, {\n      index: index,\n      isCompound: note.isCompound,\n      compoundIndex: part.compoundIndex,\n      kind: note.kind,\n      name: note.name,\n      negate: part.negate,\n      part: part\n    }, dynamicFns);\n  }\n\n  /**\n   * Implements the \"binding method\" (inline computed function) effect.\n   *\n   * Runs the method with the values of the arguments specified in the `info`\n   * object and setting the return value to the node property/attribute.\n   *\n   * @param {Object} inst The instance the effect will be run on\n   * @param {string} property Name of property\n   * @param {*} value Current value of property\n   * @param {*} old Previous value of property\n   * @param {Object} info Effect metadata\n   * @private\n   */\n  function runMethodBindingEffect(inst, property, props, oldProps, info) {\n    let val = runMethodEffect(inst, property, props, oldProps, info);\n    applyBindingValue(inst, info.methodInfo, val);\n  }\n\n  /**\n   * Post-processes template bindings (notes for short) provided by the\n   * Bindings library for use by the effects system:\n   * - Parses bindings for methods into method `signature` objects\n   * - Memoizes the root property for path bindings\n   * - Recurses into nested templates and processes those templates and\n   *   extracts any host properties, which are set to the template's\n   *   `_content._hostProps`\n   * - Adds bindings from the host to <template> elements for any nested\n   *   template's lexically bound \"host properties\"; template handling\n   *   elements can then add accessors to the template for these properties\n   *   to forward host properties into template instances accordingly.\n   *\n   * @param {Array<Object>} notes List of notes to process; the notes are\n   *   modified in place.\n   * @private\n   */\n  function processAnnotations(notes) {\n    if (!notes._processed) {\n      for (let i = 0; i < notes.length; i++) {\n        let note = notes[i];\n        // Parse bindings for methods & path roots (models)\n        for (let j = 0; j < note.bindings.length; j++) {\n          let b = note.bindings[j];\n          for (let k = 0; k < b.parts.length; k++) {\n            let p = b.parts[k];\n            if (!p.literal) {\n              p.signature = parseMethod(p.value);\n              if (!p.signature) {\n                p.rootProperty = Polymer.Path.root(p.value);\n              }\n            }\n          }\n        }\n        // Recurse into nested templates & bind host props\n        if (note.templateContent) {\n          processAnnotations(note.templateContent._notes);\n          let hostProps = note.templateContent._hostProps = discoverTemplateHostProps(note.templateContent._notes);\n          let bindings = [];\n          for (let prop in hostProps) {\n            bindings.push({\n              index: note.index,\n              kind: 'property',\n              name: '_host_' + prop,\n              parts: [{\n                mode: '{',\n                value: prop\n              }]\n            });\n          }\n          note.bindings = note.bindings.concat(bindings);\n        }\n      }\n      notes._processed = true;\n    }\n  }\n\n  /**\n   * Finds all property usage in templates (property/path bindings and function\n   * arguments) and returns the path roots as keys in a map. Each outer template\n   * merges inner _hostProps to propagate inner host property needs to outer\n   * templates.\n   *\n   * @param {Array<Object>} notes List of notes to process for a given template\n   * @return {Object<string,boolean>} Map of host properties that the template\n   *   (or any nested templates) uses\n   * @private\n   */\n  function discoverTemplateHostProps(notes) {\n    let hostProps = {};\n    for (let i = 0, n; i < notes.length && (n = notes[i]); i++) {\n      // Find all bindings to parent.* and spread them into _parentPropChain\n      for (let j = 0, b$ = n.bindings, b; j < b$.length && (b = b$[j]); j++) {\n        for (let k = 0, p$ = b.parts, p; k < p$.length && (p = p$[k]); k++) {\n          if (p.signature) {\n            let args = p.signature.args;\n            for (let kk = 0; kk < args.length; kk++) {\n              let rootProperty = args[kk].rootProperty;\n              if (rootProperty) {\n                hostProps[rootProperty] = true;\n              }\n            }\n            hostProps[p.signature.methodName] = true;\n          } else {\n            if (p.rootProperty) {\n              hostProps[p.rootProperty] = true;\n            }\n          }\n        }\n      }\n      // Merge child _hostProps into this _hostProps\n      if (n.templateContent) {\n        let templateHostProps = n.templateContent._hostProps;\n        Object.assign(hostProps, templateHostProps);\n      }\n    }\n    return hostProps;\n  }\n\n  /**\n   * Returns true if a binding's metadata meets all the requirements to allow\n   * 2-way binding, and therefore a <property>-changed event listener should be\n   * added:\n   * - used curly braces\n   * - is a property (not attribute) binding\n   * - is not a textContent binding\n   * - is not compound\n   *\n   * @param {Object} binding Binding metadata\n   * @return {boolean} True if 2-way listener should be added\n   * @private\n   */\n  function shouldAddListener(binding) {\n    return binding.name && binding.kind != 'attribute' && binding.kind != 'text' && !binding.isCompound && binding.parts[0].mode === '{';\n  }\n\n  /**\n   * Sets up a prototypical `__notifyListeners` metadata array to be used at\n   * instance time to add event listeners for 2-way bindings.\n   *\n   * @param {Object} model Prototype (instances not currently supported)\n   * @param {number} index Index into `__templateNodes` list of annotated nodes that the\n   *   event should be added to\n   * @param {string} property Property of target node to listen for changes\n   * @param {string} path Host path that the change should be propagated to\n   * @param {string=} event A custom event name to listen for (e.g. via the\n   *   `{{prop::eventName}}` syntax)\n   * @param {boolean=} negate Whether the notified value should be negated before\n   *   setting to host path\n   * @private\n   */\n  function addAnnotatedListener(model, index, property, path, event, negate) {\n    let eventName = event || CaseMap.camelToDashCase(property) + '-changed';\n    model.__notifyListeners = model.__notifyListeners || [];\n    model.__notifyListeners.push({\n      index: index,\n      property: property,\n      path: path,\n      event: eventName,\n      negate: negate\n    });\n  }\n\n  /**\n   * Adds all 2-way binding notification listeners to a host based on\n   * `__notifyListeners` metadata recorded by prior calls to`addAnnotatedListener`\n   *\n   * @param {Object} inst Host element instance\n   * @private\n   */\n  function setupNotifyListeners(inst) {\n    let b$ = inst.__notifyListeners;\n    for (let i = 0, l = b$.length, info; i < l && (info = b$[i]); i++) {\n      let node = inst.__templateNodes[info.index];\n      addNotifyListener(node, inst, info);\n    }\n  }\n\n  /**\n   * On the `inst` element that was previously bound, uses `inst.__templateNotes`\n   * to setup compound binding storage structures onto the bound\n   * nodes (`inst.__templateNodes`).\n   * (`inst._, and 2-way binding event listeners are also added.)\n   *\n   * @param {Object} inst Instance that bas been previously bound\n   * @private\n   */\n  function setupBindings(inst) {\n    let notes = inst.__templateNotes;\n    if (notes.length) {\n      for (let i = 0; i < notes.length; i++) {\n        let note = notes[i];\n        let node = inst.__templateNodes[i];\n        node.__dataHost = inst;\n        if (note.bindings) {\n          setupCompoundBinding(note, node);\n        }\n      }\n    }\n    if (inst.__notifyListeners) {\n      setupNotifyListeners(inst);\n    }\n  }\n\n  // -- for method-based effects (complexObserver & computed) --------------\n\n  /**\n   * Adds property effects for each argument in the method signature (and\n   * optionally, for the method name if `dynamic` is true) that calls the\n   * provided effect function.\n   *\n   * @param {Element | Object} model Prototype or instance\n   * @param {Object} sig Method signature metadata\n   * @param {string} type\n   * @param {Function} effectFn Function to run when arguments change\n   * @param {*=} methodInfo\n   * @param {Object=} dynamicFns Map indicating whether method names should\n   *   be included as a dependency to the effect. Note, defaults to true\n   *   if the signature is statci (sig.static is true).\n   * @private\n   */\n  function createMethodEffect(model, sig, type, effectFn, methodInfo, dynamicFns) {\n    let dynamicFn = sig.static || dynamicFns && dynamicFns[sig.methodName];\n    let info = {\n      methodName: sig.methodName,\n      args: sig.args,\n      methodInfo,\n      dynamicFn\n    };\n    for (let i = 0, arg; i < sig.args.length && (arg = sig.args[i]); i++) {\n      if (!arg.literal) {\n        model._addPropertyEffect(arg.rootProperty, type, {\n          fn: effectFn, info: info, trigger: arg\n        });\n      }\n    }\n    if (dynamicFn) {\n      model._addPropertyEffect(sig.methodName, type, {\n        fn: effectFn, info: info\n      });\n    }\n  }\n\n  /**\n   * Calls a method with arguments marshaled from properties on the instance\n   * based on the method signature contained in the effect metadata.\n   *\n   * Multi-property observers, computed properties, and inline computing\n   * functions call this function to invoke the method, then use the return\n   * value accordingly.\n   *\n   * @param {Object} inst The instance the effect will be run on\n   * @param {string} property Name of property\n   * @param {*} value Current value of property\n   * @param {*} old Previous value of property\n   * @param {Object} info Effect metadata\n   * @private\n   */\n  function runMethodEffect(inst, property, props, oldProps, info) {\n    // Instances can optionally have a _methodHost which allows redirecting where\n    // to find methods. Currently used by `templatize`.\n    let context = inst._methodHost || inst;\n    let fn = context[info.methodName];\n    if (fn) {\n      let args = marshalArgs(inst.__data, info.args, property, props);\n      return fn.apply(context, args);\n    } else if (!info.dynamicFn) {\n      console.warn('method `' + info.methodName + '` not defined');\n    }\n  }\n\n  const emptyArray = [];\n\n  /**\n   * Parses an expression string for a method signature, and returns a metadata\n   * describing the method in terms of `methodName`, `static` (whether all the\n   * arguments are literals), and an array of `args`\n   *\n   * @param {string} expression The expression to parse\n   * @return {?Object} The method metadata object if a method expression was\n   *   found, otherwise `undefined`\n   * @private\n   */\n  function parseMethod(expression) {\n    // tries to match valid javascript property names\n    let m = expression.match(/([^\\s]+?)\\(([\\s\\S]*)\\)/);\n    if (m) {\n      let sig = { methodName: m[1], static: true };\n      if (m[2].trim()) {\n        // replace escaped commas with comma entity, split on un-escaped commas\n        let args = m[2].replace(/\\\\,/g, '&comma;').split(',');\n        return parseArgs(args, sig);\n      } else {\n        sig.args = emptyArray;\n        return sig;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Parses an array of arguments and sets the `args` property of the supplied\n   * signature metadata object. Sets the `static` property to false if any\n   * argument is a non-literal.\n   *\n   * @param {Array<string>} argList Array of argument names\n   * @param {Object} sig Method signature metadata object\n   * @return {Object} The updated signature metadata object\n   * @private\n   */\n  function parseArgs(argList, sig) {\n    sig.args = argList.map(function (rawArg) {\n      let arg = parseArg(rawArg);\n      if (!arg.literal) {\n        sig.static = false;\n      }\n      return arg;\n    }, this);\n    return sig;\n  }\n\n  /**\n   * Parses an individual argument, and returns an argument metadata object\n   * with the following fields:\n   *\n   *   {\n   *     value: 'prop',        // property/path or literal value\n   *     literal: false,       // whether argument is a literal\n   *     structured: false,    // whether the property is a path\n   *     rootProperty: 'prop', // the root property of the path\n   *     wildcard: false       // whether the argument was a wildcard '.*' path\n   *   }\n   *\n   * @param {string} rawArg The string value of the argument\n   * @return {Object} Argument metadata object\n   * @private\n   */\n  function parseArg(rawArg) {\n    // clean up whitespace\n    let arg = rawArg.trim()\n    // replace comma entity with comma\n    .replace(/&comma;/g, ',')\n    // repair extra escape sequences; note only commas strictly need\n    // escaping, but we allow any other char to be escaped since its\n    // likely users will do this\n    .replace(/\\\\(.)/g, '\\$1');\n    // basic argument descriptor\n    let a = {\n      name: arg\n    };\n    // detect literal value (must be String or Number)\n    let fc = arg[0];\n    if (fc === '-') {\n      fc = arg[1];\n    }\n    if (fc >= '0' && fc <= '9') {\n      fc = '#';\n    }\n    switch (fc) {\n      case \"'\":\n      case '\"':\n        a.value = arg.slice(1, -1);\n        a.literal = true;\n        break;\n      case '#':\n        a.value = Number(arg);\n        a.literal = true;\n        break;\n    }\n    // if not literal, look for structured path\n    if (!a.literal) {\n      a.rootProperty = Polymer.Path.root(arg);\n      // detect structured path (has dots)\n      a.structured = Polymer.Path.isDeep(arg);\n      if (a.structured) {\n        a.wildcard = arg.slice(-2) == '.*';\n        if (a.wildcard) {\n          a.name = arg.slice(0, -2);\n        }\n      }\n    }\n    return a;\n  }\n\n  /**\n   * Gather the argument values for a method specified in the provided array\n   * of argument metadata.\n   *\n   * The `path` and `value` arguments are used to fill in wildcard descriptor\n   * when the method is being called as a result of a path notification.\n   *\n   * @param {Object} data Instance data storage object to read properties from\n   * @param {Array<Object>} args Array of argument metadata\n   * @return {Array<*>} Array of argument values\n   * @private\n   */\n  function marshalArgs(data, args, path, props) {\n    let values = [];\n    for (let i = 0, l = args.length; i < l; i++) {\n      let arg = args[i];\n      let name = arg.name;\n      let v;\n      if (arg.literal) {\n        v = arg.value;\n      } else {\n        if (arg.structured) {\n          v = Polymer.Path.get(data, name);\n          // when data is not stored e.g. `splices`\n          if (v === undefined) {\n            v = props[name];\n          }\n        } else {\n          v = data[name];\n        }\n      }\n      if (arg.wildcard) {\n        // Only send the actual path changed info if the change that\n        // caused the observer to run matched the wildcard\n        let baseChanged = name.indexOf(path + '.') === 0;\n        let matches = path.indexOf(name) === 0 && !baseChanged;\n        values[i] = {\n          path: matches ? path : name,\n          value: matches ? props[path] : v,\n          base: v\n        };\n      } else {\n        values[i] = v;\n      }\n    }\n    return values;\n  }\n\n  /**\n   * Initializes `__dataCompoundStorage` local storage on a bound node with\n   * initial literal data for compound bindings, and sets the joined\n   * literal parts to the bound property.\n   *\n   * When changes to compound parts occur, they are first set into the compound\n   * storage array for that property, and then the array is joined to result in\n   * the final value set to the property/attribute.\n   *\n   * @param {Object} note Annotation metadata\n   * @param {Node} node Bound node to initialize\n   * @private\n   */\n  function setupCompoundBinding(note, node) {\n    let bindings = note.bindings;\n    for (let i = 0; i < bindings.length; i++) {\n      let binding = bindings[i];\n      if (binding.isCompound) {\n        // Create compound storage map\n        let storage = node.__dataCompoundStorage || (node.__dataCompoundStorage = {});\n        let parts = binding.parts;\n        // Copy literals from parts into storage for this binding\n        let literals = new Array(parts.length);\n        for (let j = 0; j < parts.length; j++) {\n          literals[j] = parts[j].literal;\n        }\n        let name = binding.name;\n        storage[name] = literals;\n        // Configure properties with their literal parts\n        if (binding.literal && binding.kind == 'property') {\n          node[name] = binding.literal;\n        }\n      }\n    }\n  }\n\n  // data api\n\n  /**\n   * Sends array splice notifications (`.splices` and `.length`)\n   *\n   * Note: this implementation only accepts normalized paths\n   *\n   * @param {Element} inst Instance to send notifications to\n   * @param {Array} array The array the mutations occurred on\n   * @param {string} path The path to the array that was mutated\n   * @param {Array} splices Array of splice records\n   * @private\n   */\n  function notifySplices(inst, array, path, splices) {\n    let splicesPath = path + '.splices';\n    inst.notifyPath(splicesPath, { indexSplices: splices });\n    inst.notifyPath(path + '.length', array.length);\n    // Null here to allow potentially large splice records to be GC'ed.\n    inst.__data[splicesPath] = { indexSplices: null };\n  }\n\n  /**\n   * Creates a splice record and sends an array splice notification for\n   * the described mutation\n   *\n   * Note: this implementation only accepts normalized paths\n   *\n   * @param {Element} inst Instance to send notifications to\n   * @param {Array} array The array the mutations occurred on\n   * @param {string} path The path to the array that was mutated\n   * @param {number} index Index at which the array mutation occurred\n   * @param {number} addedCount Number of added items\n   * @param {Array} removed Array of removed items\n   * @private\n   */\n  function notifySplice(inst, array, path, index, addedCount, removed) {\n    notifySplices(inst, array, path, [{\n      index: index,\n      addedCount: addedCount,\n      removed: removed,\n      object: array,\n      type: 'splice'\n    }]);\n  }\n\n  /**\n   * Returns an upper-cased version of the string.\n   *\n   * @param {string} name String to uppercase\n   * @return {string} Uppercased string\n   * @private\n   */\n  function upper(name) {\n    return name[0].toUpperCase() + name.substring(1);\n  }\n\n  /**\n   * Sets the provided properties into pending data on the instance.\n   *\n   * @param {HTMLElement} inst Instance to apply data to\n   * @param {object} props Bag of instance properties to set\n   * @private\n   */\n  function initalizeInstanceProperties(inst, props) {\n    inst.__dataOld = inst.__dataOld || {};\n    inst.__dataPending = inst.__dataPending || {};\n    let readOnly = inst.__readOnly;\n    for (let prop in props) {\n      if (!readOnly || !readOnly[prop]) {\n        inst.__data[prop] = inst.__dataPending[prop] = props[prop];\n      }\n    }\n  }\n\n  /**\n   * Element class mixin that provides meta-programming for Polymer's template\n   * binding and data observation (collectively, \"property effects\") system.\n   *\n   * This mixin uses provides the following key methods for adding property effects\n   * to this element:\n   * - `_createPropertyObserver`\n   * - `_createMethodObserver`\n   * - `_createNotifyingProperty`\n   * - `_createReadOnlyProperty`\n   * - `_createReflectedProperty`\n   * - `_createComputedProperty`\n   * - `_bindTemplate`\n   *\n   * Each method creates one or more property accessors, along with metadata\n   * used by this mixin's implementation of `_propertiesChanged` to perform\n   * the property effects.  These methods may be called on element instances,\n   * but are designed to be called on element prototypes such that the work to\n   * set up accessors and effect metadata are done once per element class.\n   *\n   * @polymerMixin\n   * @mixes Polymer.TemplateStamp\n   * @mixes Polymer.PropertyAccessors\n   * @memberof Polymer\n   * @summary Element class mixin that provides meta-programming for Polymer's\n   * template binding and data observation system.\n   */\n  Polymer.PropertyEffects = Polymer.dedupingMixin(function (superClass) {\n\n    const propertyEffectsBase = Polymer.TemplateStamp(Polymer.PropertyAccessors(superClass));\n\n    /**\n     * @polymerMixinClass\n     * @unrestricted\n     */\n    class PropertyEffects extends propertyEffectsBase {\n\n      get PROPERTY_EFFECT_TYPES() {\n        return TYPES;\n      }\n\n      /**\n       * Overrides `Polymer.PropertyAccessors` implementation to initialize\n       * additional property-effect related properties.\n       *\n       * @override\n       */\n      _initializeProperties() {\n        super._initializeProperties();\n        this.__dataInitialized = false;\n        this.__dataClientsInitialized = false;\n        this.__dataPendingClients = null;\n        this.__dataToNotify = null;\n        this.__dataLinkedPaths = null;\n        this.__dataHasPaths = false;\n        // May be set on instance prior to upgrade\n        this.__dataCompoundStorage = this.__dataCompoundStorage || null;\n        this.__dataHost = this.__dataHost || null;\n        this.__dataTemp = {};\n        // Capture instance properties; these will be set into accessors\n        // during first flush. Don't set them here, since we want\n        // these to overwrite defaults/constructor assignments\n        for (let p in this.__propertyEffects) {\n          if (this.hasOwnProperty(p)) {\n            this.__dataInstanceProps = this.__dataInstanceProps || {};\n            this.__dataInstanceProps[p] = this[p];\n            delete this[p];\n          }\n        }\n      }\n\n      /**\n       * Overrides `Polymer.PropertyAccessors` implementation to provide a\n       * more efficient implementation of initializing properties from\n       * the prototype on the instance.\n       *\n       * @override\n       */\n      _initializeProtoProperties(props) {\n        this.__data = Object.create(props);\n        this.__dataPending = Object.create(props);\n        this.__dataOld = {};\n      }\n\n      // Prototype setup ----------------------------------------\n\n      /**\n       * Ensures an accessor exists for the specified property, and adds\n       * to a list of \"property effects\" that will run when the accessor for\n       * the specified property is set.  Effects are grouped by \"type\", which\n       * roughly corresponds to a phase in effect processing.  The effect\n       * metadata should be in the following form:\n       *\n       *   {\n       *     fn: effectFunction, // Reference to function to call to perform effect\n       *     info: { ... }       // Effect metadata passed to function\n       *     // path: '...'      // Will be set by this method based on path arg\n       *   }\n       *\n       * Effect functions are called with the following signature:\n       *\n       *   effectFunction(inst, property, currentValue, oldValue, info)\n       *\n       * This method may be called either on the prototype of a class\n       * using the PropertyEffects mixin (for best performance), or on\n       * an instance to add dynamic effects.  When called on an instance or\n       * subclass of a class that has already had property effects added to\n       * its prototype, the property effect lists will be cloned and added as\n       * own properties of the caller.\n       *\n       * @param {string} path Property (or path) that should trigger the effect\n       * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES\n       * @param {Object=} effect Effect metadata object\n       * @protected\n       */\n      _addPropertyEffect(property, type, effect) {\n        let effects = ensureOwnEffectMap(this, TYPES.ANY)[property];\n        if (!effects) {\n          effects = this.__propertyEffects[property] = [];\n          this._createPropertyAccessor(property, type == TYPES.READ_ONLY);\n        }\n        // effects are accumulated into arrays per property based on type\n        if (effect) {\n          effects.push(effect);\n        }\n        effects = ensureOwnEffectMap(this, type)[property];\n        if (!effects) {\n          effects = this[type][property] = [];\n        }\n        effects.push(effect);\n      }\n\n      /**\n       * Returns whether the current prototype/instance has a property effect\n       * of a certain type.\n       *\n       * @param {string} property Property name\n       * @param {string=} type Effect type, from this.PROPERTY_EFFECT_TYPES\n       * @return {boolean} True if the prototype/instance has an effect of this type\n       * @protected\n       */\n      _hasPropertyEffect(property, type) {\n        let effects = this[type || TYPES.ANY];\n        return Boolean(effects && effects[property]);\n      }\n\n      /**\n       * Returns whether the current prototype/instance has a \"read only\"\n       * accessor for the given property.\n       *\n       * @param {string} property Property name\n       * @return {boolean} True if the prototype/instance has an effect of this type\n       * @protected\n       */\n      _hasReadOnlyEffect(property) {\n        return this._hasPropertyEffect(property, TYPES.READ_ONLY);\n      }\n\n      /**\n       * Returns whether the current prototype/instance has a \"notify\"\n       * property effect for the given property.\n       *\n       * @param {string} property Property name\n       * @return {boolean} True if the prototype/instance has an effect of this type\n       * @protected\n       */\n      _hasNotifyEffect(property) {\n        return this._hasPropertyEffect(property, TYPES.NOTIFY);\n      }\n\n      /**\n       * Returns whether the current prototype/instance has a \"reflect to attribute\"\n       * property effect for the given property.\n       *\n       * @param {string} property Property name\n       * @return {boolean} True if the prototype/instance has an effect of this type\n       * @protected\n       */\n      _hasReflectEffect(property) {\n        return this._hasPropertyEffect(property, TYPES.REFLECT);\n      }\n\n      /**\n       * Returns whether the current prototype/instance has a \"computed\"\n       * property effect for the given property.\n       *\n       * @param {string} property Property name\n       * @return {boolean} True if the prototype/instance has an effect of this type\n       * @protected\n       */\n      _hasComputedEffect(property) {\n        return this._hasPropertyEffect(property, TYPES.COMPUTE);\n      }\n\n      // Runtime ----------------------------------------\n\n      /**\n       * Sets a pending property or path.  If the root property of the path in\n       * question had no accessor, the path is set, otherwise it is enqueued\n       * via `_setPendingProperty`.\n       *\n       * This function isolates relatively expensive functionality necessary\n       * for the public API (`set`, `setProperties`, `notifyPath`, and property\n       * change listeners via {{...}} bindings), such that it is only done\n       * when paths enter the system, and not at every propagation step.  It\n       * also sets a `__dataHasPaths` flag on the instance which is used to\n       * fast-path slower path-matching code in the property effects host paths.\n       *\n       * `path` can be a path string or array of path parts as accepted by the\n       * public API.\n       *\n       * @param {string | !Array<number|string>} path Path to set\n       * @param {*} value Value to set\n       * @param {boolean=} isPathNotification If the path being set is a path\n       *   notification of an already changed value, as opposed to a request\n       *   to set and notify the change.  In the latter `false` case, a dirty\n       *   check is performed and then the value is set to the path before\n       *   enqueuing the pending property change.\n       * @return {boolean} Returns true if the property/path was enqueued in\n       *   the pending changes bag.\n       * @protected\n       */\n      _setPendingPropertyOrPath(path, value, shouldNotify, isPathNotification) {\n        let rootProperty = Polymer.Path.root(Array.isArray(path) ? path[0] : path);\n        let hasEffect = this.__propertyEffects && this.__propertyEffects[rootProperty];\n        let isPath = rootProperty !== path;\n        if (hasEffect) {\n          if (isPath) {\n            if (!isPathNotification) {\n              // Dirty check changes being set to a path against the actual object,\n              // since this is the entry point for paths into the system; from here\n              // the only dirty checks are against the `__dataTemp` cache to prevent\n              // duplicate work in the same turn only. Note, if this was a notification\n              // of a change already set to a path (isPathNotification: true),\n              // we always let the change through and skip the `set` since it was\n              // already dirty checked at the point of entry and the underlying\n              // object has already been updated\n              let old = Polymer.Path.get(this, path);\n              path = /** @type {string} */Polymer.Path.set(this, path, value);\n              // Use property-accessor's simpler dirty check\n              if (!path || !super._shouldPropertyChange(path, value, old)) {\n                return false;\n              }\n            }\n            this.__dataHasPaths = true;\n          }\n          return this._setPendingProperty(path, value, shouldNotify);\n        } else {\n          if (isPath) {\n            Polymer.Path.set(this, path, value);\n          } else {\n            this[path] = value;\n          }\n        }\n        return false;\n      }\n\n      /**\n       * Applies a value to a non-Polymer element/node's property.\n       *\n       * The implementation makes a best-effort at binding interop:\n       * Some native element properties have side-effects when\n       * re-setting the same value (e.g. setting <input>.value resets the\n       * cursor position), so we do a dirty-check before setting the value.\n       * However, for better interop with non-Polymer custom elements that\n       * accept objects, we explicitly re-set object changes coming from the\n       * Polymer world (which may include deep object changes without the\n       * top reference changing), erring on the side of providing more\n       * information.\n       *\n       * Users may override this method to provide alternate approaches.\n       *\n       * @param {Node} node The node to set a property on\n       * @param {string} prop The property to set\n       * @param {*} value The value to set\n       * @protected\n       */\n      _setUnmanagedPropertyToNode(node, prop, value) {\n        // It is a judgment call that resetting primitives is\n        // \"bad\" and resettings objects is also \"good\"; alternatively we could\n        // implement a whitelist of tag & property values that should never\n        // be reset (e.g. <input>.value && <select>.value)\n        if (value !== node[prop] || typeof value == 'object') {\n          node[prop] = value;\n        }\n      }\n\n      /**\n       * Overrides the `PropertyAccessors` implementation to introduce special\n       * dirty check logic depending on the property & value being set:\n       *\n       * 1. Any value set to a path (e.g. 'obj.prop': 42 or 'obj.prop': {...})\n       *    Stored in `__dataTemp`, dirty checked against `__dataTemp`\n       * 2. Object set to simple property (e.g. 'prop': {...})\n       *    Stored in `__dataTemp` and `__data`, dirty checked against\n       *    `__dataTemp` by default implementation of `_shouldPropertyChange`\n       * 3. Primitive value set to simple property (e.g. 'prop': 42)\n       *    Stored in `__data`, dirty checked against `__data`\n       *\n       * The dirty-check is important to prevent cycles due to two-way\n       * notification, but paths and objects are only dirty checked against any\n       * previous value set during this turn via a \"temporary cache\" that is\n       * cleared when the last `_propertiesChaged` exits. This is so:\n       * a. any cached array paths (e.g. 'array.3.prop') may be invalidated\n       *    due to array mutations like shift/unshift/splice; this is fine\n       *    since path changes are dirty-checked at user entry points like `set`\n       * b. dirty-checking for objects only lasts one turn to allow the user\n       *    to mutate the object in-place and re-set it with the same identity\n       *    and have all sub-properties re-propagated in a subsequent turn.\n       *\n       * The temp cache is not necessarily sufficient to prevent invalid array\n       * paths, since a splice can happen during the same turn (with pathological\n       * user code); we could introduce a \"fixup\" for temporarily cached array\n       * paths if needed: https://github.com/Polymer/polymer/issues/4227\n       *\n       * @override\n       */\n      _setPendingProperty(property, value, shouldNotify) {\n        let isPath = this.__dataHasPaths && Polymer.Path.isPath(property);\n        let prevProps = isPath ? this.__dataTemp : this.__data;\n        if (this._shouldPropertyChange(property, value, prevProps[property])) {\n          if (!this.__dataPending) {\n            this.__dataPending = {};\n            this.__dataOld = {};\n          }\n          // Ensure old is captured from the last turn\n          if (!(property in this.__dataOld)) {\n            this.__dataOld[property] = this.__data[property];\n          }\n          // Paths are stored in temporary cache (cleared at end of turn),\n          // which is used for dirty-checking, all others stored in __data\n          if (isPath) {\n            this.__dataTemp[property] = value;\n          } else {\n            this.__data[property] = value;\n          }\n          // All changes go into pending property bag, passed to _propertiesChanged\n          this.__dataPending[property] = value;\n          // Track properties that should notify separately\n          if (isPath || this.__notifyEffects && this.__notifyEffects[property]) {\n            this.__dataToNotify = this.__dataToNotify || {};\n            this.__dataToNotify[property] = shouldNotify;\n          }\n          return true;\n        }\n      }\n\n      /**\n       * Overrides base implementation to ensure all accessors set `shouldNotify`\n       * to true, for per-property notification tracking.\n       *\n       * @override\n       */\n      _setProperty(property, value) {\n        if (this._setPendingProperty(property, value, true)) {\n          this._invalidateProperties();\n        }\n      }\n\n      /**\n       * Overrides `PropertyAccessor`'s default async queuing of\n       * `_propertiesChanged`: if `__dataInitialized` is false (has not yet been\n       * manually flushed), the function no-ops; otherwise flushes\n       * `_propertiesChanged` synchronously.\n       *\n       * @override\n       */\n      _invalidateProperties() {\n        if (this.__dataInitialized) {\n          this._flushProperties();\n        }\n      }\n\n      /**\n       * Enqueues the given client on a list of pending clients, whose\n       * pending property changes can later be flushed via a call to\n       * `_flushClients`.\n       *\n       * @param {Object} client PropertyEffects client to enqueue\n       * @protected\n       */\n      _enqueueClient(client) {\n        this.__dataPendingClients = this.__dataPendingClients || [];\n        if (client !== this) {\n          this.__dataPendingClients.push(client);\n        }\n      }\n\n      /**\n       * Flushes any clients previously enqueued via `_enqueueClient`, causing\n       * their `_flushProperties` method to run.\n       *\n       * @protected\n       */\n      _flushClients() {\n        if (!this.__dataClientsInitialized) {\n          this._readyClients();\n        }\n        // Flush all clients\n        let clients = this.__dataPendingClients;\n        if (clients) {\n          this.__dataPendingClients = null;\n          for (let i = 0; i < clients.length; i++) {\n            let client = clients[i];\n            if (!client.__dataInitialized || client.__dataPending) {\n              client._flushProperties();\n            }\n          }\n        }\n      }\n\n      /**\n       * Sets a bag of property changes to this instance, and\n       * synchronously processes all effects of the properties as a batch.\n       *\n       * Property names must be simple properties, not paths.  Batched\n       * path propagation is not supported.\n       *\n       * @param {Object} props Bag of one or more key-value pairs whose key is\n       *   a property and value is the new value to set for that property.\n       * @public\n       */\n      setProperties(props) {\n        for (let path in props) {\n          if (!this.__readOnly || !this.__readOnly[path]) {\n            //TODO(kschaaf): explicitly disallow paths in setProperty?\n            // wildcard observers currently only pass the first changed path\n            // in the `info` object, and you could do some odd things batching\n            // paths, e.g. {'foo.bar': {...}, 'foo': null}\n            this._setPendingPropertyOrPath(path, props[path], true);\n          }\n        }\n        this._invalidateProperties();\n      }\n\n      /**\n       * Overrides PropertyAccessor's default async queuing of\n       * `_propertiesChanged`, to instead synchronously flush\n       * `_propertiesChanged` unless the `this._asyncEffects` property is true.\n       *\n       * If this is the first time properties are being flushed, the `ready`\n       * callback will be called.\n       *\n       * @override\n       */\n      _flushProperties() {\n        if (!this.__dataInitialized) {\n          this.ready();\n        } else if (this.__dataPending) {\n          super._flushProperties();\n          if (!this.__dataCounter) {\n            // Clear temporary cache at end of turn\n            this.__dataTemp = {};\n          }\n        }\n      }\n\n      /**\n       * Polymer-specific lifecycle callback called the first time properties\n       * are being flushed.  Prior to `ready`, all property sets through\n       * accessors are queued and their effects are flushed after this method\n       * returns.\n       *\n       * Users may override this function to implement behavior that is\n       * dependent on the element having its properties initialized, e.g.\n       * from defaults (initialized from `constructor`, `_initializeProperties`),\n       * `attributeChangedCallback`, or binding values propagated from host\n       * \"binding effects\".  `super.ready()` must be called to ensure the\n       * data system becomes enabled.\n       *\n       * @public\n       */\n      ready() {\n        // Update instance properties that shadowed proto accessors; these take\n        // priority over any defaults set in `properties` or constructor\n        let instanceProps = this.__dataInstanceProps;\n        if (instanceProps) {\n          initalizeInstanceProperties(this, instanceProps);\n        }\n        // Enable acceessors\n        this.__dataInitialized = true;\n        if (this.__dataPending) {\n          // Run normal flush\n          this._flushProperties();\n        } else {\n          this._readyClients();\n        }\n      }\n\n      /**\n       * Perform any initial setup on client dom. Called before the first\n       * `_flushProperties` call on client dom and before any element\n       * observers are called.\n       *\n       * @protected\n       */\n      _readyClients() {\n        this.__dataClientsInitialized = true;\n      }\n\n      /**\n       * Stamps the provided template and performs instance-time setup for\n       * Polymer template features, including data bindings, declarative event\n       * listeners, and the `this.$` map of `id`'s to nodes.  A document fragment\n       * is returned containing the stamped DOM, ready for insertion into the\n       * DOM.\n       *\n       * Note that for host data to be bound into the stamped DOM, the template\n       * must have been previously bound to the prototype via a call to\n       * `_bindTemplate`, which performs one-time template binding work.\n       *\n       * Note that this method currently only supports being called once per\n       * instance.\n       *\n       * @param {HTMLTemplateElement} template Template to stamp\n       * @return {DocumentFragment} Cloned template content\n       * @protected\n       */\n      _stampTemplate(template) {\n        let dom = super._stampTemplate(template);\n        setupBindings(this);\n        return dom;\n      }\n\n      /**\n       * Implements `PropertyAccessors`'s properties changed callback.\n       *\n       * Runs each class of effects for the batch of changed properties in\n       * a specific order (compute, propagate, reflect, observe, notify).\n       *\n       * @override\n       */\n      _propertiesChanged(currentProps, changedProps, oldProps) {\n        // ----------------------------\n        // let c = Object.getOwnPropertyNames(changedProps || {});\n        // window.debug && console.group(this.localName + '#' + this.id + ': ' + c);\n        // if (window.debug) { debugger; }\n        // ----------------------------\n        let hasPaths = this.__dataHasPaths;\n        this.__dataHasPaths = false;\n        // Compute properties\n        runComputedEffects(this, changedProps, oldProps, hasPaths);\n        // Compute linked paths\n        computeLinkedPaths(this, changedProps, hasPaths);\n        // Clear notify properties prior to possible reentry (propagate, observe),\n        // but after computing effects have a chance to add to them\n        let notifyProps = this.__dataToNotify;\n        this.__dataToNotify = null;\n        // Propagate properties to clients\n        runEffects(this, this.__propagateEffects, changedProps, oldProps, hasPaths);\n        // Flush clients\n        this._flushClients();\n        // Reflect properties\n        runEffects(this, this.__reflectEffects, changedProps, oldProps, hasPaths);\n        // Observe properties\n        runEffects(this, this.__observeEffects, changedProps, oldProps, hasPaths);\n        // Notify properties to host\n        if (notifyProps) {\n          runNotifyEffects(this, notifyProps, changedProps, oldProps, hasPaths);\n        }\n        // ----------------------------\n        // window.debug && console.groupEnd(this.localName + '#' + this.id + ': ' + c);\n        // ----------------------------\n      }\n\n      /**\n       * Aliases one data path as another, such that path notifications from one\n       * are routed to the other.\n       *\n       * @method linkPaths\n       * @param {string | !Array<string|number>} to Target path to link.\n       * @param {string | !Array<string|number>} from Source path to link.\n       * @public\n       */\n      linkPaths(to, from) {\n        to = Polymer.Path.normalize(to);\n        from = Polymer.Path.normalize(from);\n        this.__dataLinkedPaths = this.__dataLinkedPaths || {};\n        this.__dataLinkedPaths[to] = from;\n      }\n\n      /**\n       * Removes a data path alias previously established with `_linkPaths`.\n       *\n       * Note, the path to unlink should be the target (`to`) used when\n       * linking the paths.\n       *\n       * @method unlinkPaths\n       * @param {string | !Array<string|number>} path Target path to unlink.\n       * @public\n       */\n      unlinkPaths(path) {\n        path = Polymer.Path.normalize(path);\n        if (this.__dataLinkedPaths) {\n          delete this.__dataLinkedPaths[path];\n        }\n      }\n\n      /**\n       * Notify that an array has changed.\n       *\n       * Example:\n       *\n       *     this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n       *     ...\n       *     this.items.splice(1, 1, {name: 'Sam'});\n       *     this.items.push({name: 'Bob'});\n       *     this.notifySplices('items', [\n       *       { index: 1, removed: [{name: 'Todd'}], addedCount: 1, obect: this.items, type: 'splice' },\n       *       { index: 3, removed: [], addedCount: 1, object: this.items, type: 'splice'}\n       *     ]);\n       *\n       * @param {string} path Path that should be notified.\n       * @param {Array} splices Array of splice records indicating ordered\n       *   changes that occurred to the array. Each record should have the\n       *   following fields:\n       *    * index: index at which the change occurred\n       *    * removed: array of items that were removed from this index\n       *    * addedCount: number of new items added at this index\n       *    * object: a reference to the array in question\n       *    * type: the string literal 'splice'\n       *\n       *   Note that splice records _must_ be normalized such that they are\n       *   reported in index order (raw results from `Object.observe` are not\n       *   ordered and must be normalized/merged before notifying).\n       * @public\n      */\n      notifySplices(path, splices) {\n        let info = {};\n        let array = /** @type {Array} */Polymer.Path.get(this, path, info);\n        notifySplices(this, array, info.path, splices);\n      }\n\n      /**\n       * Convenience method for reading a value from a path.\n       *\n       * Note, if any part in the path is undefined, this method returns\n       * `undefined` (this method does not throw when dereferencing undefined\n       * paths).\n       *\n       * @method get\n       * @param {(string|!Array<(string|number)>)} path Path to the value\n       *   to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n       *   or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n       *   bracketed expressions are not supported; string-based path parts\n       *   *must* be separated by dots.  Note that when dereferencing array\n       *   indices, the index may be used as a dotted part directly\n       *   (e.g. `users.12.name` or `['users', 12, 'name']`).\n       * @param {Object=} root Root object from which the path is evaluated.\n       * @return {*} Value at the path, or `undefined` if any part of the path\n       *   is undefined.\n       * @public\n       */\n      get(path, root) {\n        return Polymer.Path.get(root || this, path);\n      }\n\n      /**\n       * Convenience method for setting a value to a path and notifying any\n       * elements bound to the same path.\n       *\n       * Note, if any part in the path except for the last is undefined,\n       * this method does nothing (this method does not throw when\n       * dereferencing undefined paths).\n       *\n       * @method set\n       * @param {(string|!Array<(string|number)>)} path Path to the value\n       *   to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n       *   or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n       *   bracketed expressions are not supported; string-based path parts\n       *   *must* be separated by dots.  Note that when dereferencing array\n       *   indices, the index may be used as a dotted part directly\n       *   (e.g. `'users.12.name'` or `['users', 12, 'name']`).\n       * @param {*} value Value to set at the specified path.\n       * @param {Object=} root Root object from which the path is evaluated.\n       *   When specified, no notification will occur.\n       * @public\n      */\n      set(path, value, root) {\n        if (root) {\n          Polymer.Path.set(root, path, value);\n        } else {\n          if (!this.__readOnly || !this.__readOnly[/** @type {string} */path]) {\n            if (this._setPendingPropertyOrPath(path, value, true)) {\n              this._invalidateProperties();\n            }\n          }\n        }\n      }\n\n      /**\n       * Adds items onto the end of the array at the path specified.\n       *\n       * The arguments after `path` and return value match that of\n       * `Array.prototype.push`.\n       *\n       * This method notifies other paths to the same array that a\n       * splice occurred to the array.\n       *\n       * @method push\n       * @param {string} path Path to array.\n       * @param {...*} items Items to push onto array\n       * @return {number} New length of the array.\n       * @public\n       */\n      push(path, ...items) {\n        let info = {};\n        let array = /** @type {Array}*/Polymer.Path.get(this, path, info);\n        let len = array.length;\n        let ret = array.push(...items);\n        if (items.length) {\n          notifySplice(this, array, info.path, len, items.length, []);\n        }\n        return ret;\n      }\n\n      /**\n       * Removes an item from the end of array at the path specified.\n       *\n       * The arguments after `path` and return value match that of\n       * `Array.prototype.pop`.\n       *\n       * This method notifies other paths to the same array that a\n       * splice occurred to the array.\n       *\n       * @method pop\n       * @param {string} path Path to array.\n       * @return {*} Item that was removed.\n       * @public\n       */\n      pop(path) {\n        let info = {};\n        let array = /** @type {Array} */Polymer.Path.get(this, path, info);\n        let hadLength = Boolean(array.length);\n        let ret = array.pop();\n        if (hadLength) {\n          notifySplice(this, array, info.path, array.length, 0, [ret]);\n        }\n        return ret;\n      }\n\n      /**\n       * Starting from the start index specified, removes 0 or more items\n       * from the array and inserts 0 or more new items in their place.\n       *\n       * The arguments after `path` and return value match that of\n       * `Array.prototype.splice`.\n       *\n       * This method notifies other paths to the same array that a\n       * splice occurred to the array.\n       *\n       * @method splice\n       * @param {string} path Path to array.\n       * @param {number} start Index from which to start removing/inserting.\n       * @param {number} deleteCount Number of items to remove.\n       * @param {...*} items Items to insert into array.\n       * @return {Array} Array of removed items.\n       * @public\n       */\n      splice(path, start, deleteCount, ...items) {\n        let info = {};\n        let array = /** @type {Array} */Polymer.Path.get(this, path, info);\n        // Normalize fancy native splice handling of crazy start values\n        if (start < 0) {\n          start = array.length - Math.floor(-start);\n        } else {\n          start = Math.floor(start);\n        }\n        if (!start) {\n          start = 0;\n        }\n        let ret = array.splice(start, deleteCount, ...items);\n        if (items.length || ret.length) {\n          notifySplice(this, array, info.path, start, items.length, ret);\n        }\n        return ret;\n      }\n\n      /**\n       * Removes an item from the beginning of array at the path specified.\n       *\n       * The arguments after `path` and return value match that of\n       * `Array.prototype.pop`.\n       *\n       * This method notifies other paths to the same array that a\n       * splice occurred to the array.\n       *\n       * @method shift\n       * @param {string} path Path to array.\n       * @return {*} Item that was removed.\n       * @public\n       */\n      shift(path) {\n        let info = {};\n        let array = /** @type {Array} */Polymer.Path.get(this, path, info);\n        let hadLength = Boolean(array.length);\n        let ret = array.shift();\n        if (hadLength) {\n          notifySplice(this, array, info.path, 0, 0, [ret]);\n        }\n        return ret;\n      }\n\n      /**\n       * Adds items onto the beginning of the array at the path specified.\n       *\n       * The arguments after `path` and return value match that of\n       * `Array.prototype.push`.\n       *\n       * This method notifies other paths to the same array that a\n       * splice occurred to the array.\n       *\n       * @method unshift\n       * @param {string} path Path to array.\n       * @param {...*} items Items to insert info array\n       * @return {number} New length of the array.\n       * @public\n       */\n      unshift(path, ...items) {\n        let info = {};\n        let array = /** @type {Array} */Polymer.Path.get(this, path, info);\n        let ret = array.unshift(...items);\n        if (items.length) {\n          notifySplice(this, array, info.path, 0, items.length, []);\n        }\n        return ret;\n      }\n\n      /**\n       * Notify that a path has changed.\n       *\n       * Example:\n       *\n       *     this.item.user.name = 'Bob';\n       *     this.notifyPath('item.user.name');\n       *\n       * @param {string} path Path that should be notified.\n       * @param {*=} value Value at the path (optional).\n       * @public\n      */\n      notifyPath(path, value) {\n        /** @type {string} */\n        let propPath;\n        if (arguments.length == 1) {\n          // Get value if not supplied\n          let info = {};\n          value = Polymer.Path.get(this, path, info);\n          propPath = info.path;\n        } else if (Array.isArray(path)) {\n          // Normalize path if needed\n          propPath = Polymer.Path.normalize(path);\n        } else {\n          propPath = /** @type{string} */path;\n        }\n        if (this._setPendingPropertyOrPath(propPath, value, true, true)) {\n          this._invalidateProperties();\n        }\n      }\n\n      /**\n       * Creates a read-only accessor for the given property.\n       *\n       * To set the property, use the protected `_setProperty` API.\n       * To create a custom protected setter (e.g. `_setMyProp()` for\n       * property `myProp`), pass `true` for `protectedSetter`.\n       *\n       * Note, if the property will have other property effects, this method\n       * should be called first, before adding other effects.\n       *\n       * @param {string} property Property name\n       * @param {boolean=} protectedSetter Creates a custom protected setter\n       *   when `true`.\n       * @protected\n       */\n      _createReadOnlyProperty(property, protectedSetter) {\n        this._addPropertyEffect(property, TYPES.READ_ONLY);\n        if (protectedSetter) {\n          this['_set' + upper(property)] = function (value) {\n            this._setProperty(property, value);\n          };\n        }\n      }\n\n      /**\n       * Creates a single-property observer for the given property.\n       *\n       * @param {string} property Property name\n       * @param {string} methodName Name of observer method to call\n       * @param {boolean=} dynamicFn Whether the method name should be included as\n       *   a dependency to the effect.\n       * @protected\n       */\n      _createPropertyObserver(property, methodName, dynamicFn) {\n        let info = { property, methodName };\n        this._addPropertyEffect(property, TYPES.OBSERVE, {\n          fn: runObserverEffect, info, trigger: { name: property }\n        });\n        if (dynamicFn) {\n          this._addPropertyEffect(methodName, TYPES.OBSERVE, {\n            fn: runObserverEffect, info, trigger: { name: methodName }\n          });\n        }\n      }\n\n      /**\n       * Creates a multi-property \"method observer\" based on the provided\n       * expression, which should be a string in the form of a normal Javascript\n       * function signature: `'methodName(arg1, [..., argn])'`.  Each argument\n       * should correspond to a property or path in the context of this\n       * prototype (or instance), or may be a literal string or number.\n       *\n       * @param {string} expression Method expression\n       * @param {Object=} dynamicFns Map indicating whether method names should\n       *   be included as a dependency to the effect.\n       * @protected\n       */\n      _createMethodObserver(expression, dynamicFns) {\n        let sig = parseMethod(expression);\n        if (!sig) {\n          throw new Error(\"Malformed observer expression '\" + expression + \"'\");\n        }\n        createMethodEffect(this, sig, TYPES.OBSERVE, runMethodEffect, null, dynamicFns);\n      }\n\n      /**\n       * Causes the setter for the given property to dispatch `<property>-changed`\n       * events to notify of changes to the property.\n       *\n       * @param {string} property Property name\n       * @protected\n       */\n      _createNotifyingProperty(property) {\n        this._addPropertyEffect(property, TYPES.NOTIFY, {\n          fn: runNotifyEffect,\n          info: {\n            eventName: CaseMap.camelToDashCase(property) + '-changed',\n            property: property\n          }\n        });\n      }\n\n      /**\n       * Causes the setter for the given property to reflect the property value\n       * to a (dash-cased) attribute of the same name.\n       *\n       * @param {string} property Property name\n       * @protected\n       */\n      _createReflectedProperty(property) {\n        let attr = CaseMap.camelToDashCase(property);\n        if (attr[0] === '-') {\n          console.warn('Property ' + property + ' cannot be reflected to attribute ' + attr + ' because \"-\" is not a valid starting attribute name. Use a lowercase first letter for the property thisead.');\n        } else {\n          this._addPropertyEffect(property, TYPES.REFLECT, {\n            fn: runReflectEffect,\n            info: {\n              attrName: attr\n            }\n          });\n        }\n      }\n\n      /**\n       * Creates a computed property whose value is set to the result of the\n       * method described by the given `expression` each time one or more\n       * arguments to the method changes.  The expression should be a string\n       * in the form of a normal Javascript function signature:\n       * `'methodName(arg1, [..., argn])'`\n       *\n       * @param {string} property Name of computed property to set\n       * @param {string} expression Method expression\n       * @param {Object=} dynamicFns Map indicating whether method names should\n       *   be included as a dependency to the effect.\n       * @protected\n       */\n      _createComputedProperty(property, expression, dynamicFns) {\n        let sig = parseMethod(expression);\n        if (!sig) {\n          throw new Error(\"Malformed computed expression '\" + expression + \"'\");\n        }\n        createMethodEffect(this, sig, TYPES.COMPUTE, runComputedEffect, property, dynamicFns);\n      }\n\n      // -- binding ----------------------------------------------\n\n      /**\n       * Creates \"binding\" property effects for all binding bindings\n       * in the provided template that forward host properties into DOM stamped\n       * from the template via `_stampTemplate`.\n       *\n       * @param {HTMLTemplateElement} template Template containing binding\n       *   bindings\n       * @param {Object=} dynamicFns Map indicating whether method names should\n       *   be included as a dependency to the effect.\n       * @protected\n       */\n      _bindTemplate(template, dynamicFns) {\n        // Clear any existing propagation effects inherited from superClass\n        this.__propagateEffects = {};\n        this.__notifyListeners = [];\n        let notes = this._parseTemplateAnnotations(template);\n        processAnnotations(notes);\n        for (let i = 0, note; i < notes.length && (note = notes[i]); i++) {\n          // where to find the node in the concretized list\n          let b$ = note.bindings;\n          for (let j = 0, binding; j < b$.length && (binding = b$[j]); j++) {\n            if (shouldAddListener(binding)) {\n              addAnnotatedListener(this, i, binding.name, binding.parts[0].value, binding.parts[0].event, binding.parts[0].negate);\n            }\n            addBindingEffect(this, binding, i, dynamicFns);\n          }\n        }\n      }\n\n    }\n\n    return PropertyEffects;\n  });\n})();\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/*__wc__loader*/\n\n(function (document) {\n  var _htmlStr = \"\\n\\n\\n\\n\";\n  if (document.head) {\n    var el = document.head;\n    var div = document.createElement('div');\n    div.innerHTML = _htmlStr;\n    while (div.children.length > 0) {\n      el.appendChild(div.children[0]);\n    }\n  } else {\n    document.write(_htmlStr);\n  }\n})(document);\n\n(function (document) {\n  var _htmlStr = \"\";\n  if (document.body) {\n    var el = document.body;\n    var div = document.createElement('div');\n    div.innerHTML = _htmlStr;\n    while (div.children.length > 0) {\n      el.appendChild(div.children[0]);\n    }\n  } else {\n    document.write(_htmlStr);\n  }\n})(document);\n\n__webpack_require__(0);\n\n__webpack_require__(1);\n\n(function () {\n\n  'use strict';\n\n  // null-array (shared empty array to avoid null-checks)\n\n  const emptyArray = [];\n\n  let bindingRegex = function () {\n    let IDENT = '(?:' + '[a-zA-Z_$][\\\\w.:$\\\\-*]*' + ')';\n    let NUMBER = '(?:' + '[-+]?[0-9]*\\\\.?[0-9]+(?:[eE][-+]?[0-9]+)?' + ')';\n    let SQUOTE_STRING = '(?:' + '\\'(?:[^\\'\\\\\\\\]|\\\\\\\\.)*\\'' + ')';\n    let DQUOTE_STRING = '(?:' + '\"(?:[^\"\\\\\\\\]|\\\\\\\\.)*\"' + ')';\n    let STRING = '(?:' + SQUOTE_STRING + '|' + DQUOTE_STRING + ')';\n    let ARGUMENT = '(?:' + IDENT + '|' + NUMBER + '|' + STRING + '\\\\s*' + ')';\n    let ARGUMENTS = '(?:' + ARGUMENT + '(?:,\\\\s*' + ARGUMENT + ')*' + ')';\n    let ARGUMENT_LIST = '(?:' + '\\\\(\\\\s*' + '(?:' + ARGUMENTS + '?' + ')' + '\\\\)\\\\s*' + ')';\n    let BINDING = '(' + IDENT + '\\\\s*' + ARGUMENT_LIST + '?' + ')'; // Group 3\n    let OPEN_BRACKET = '(\\\\[\\\\[|{{)' + '\\\\s*';\n    let CLOSE_BRACKET = '(?:]]|}})';\n    let NEGATE = '(?:(!)\\\\s*)?'; // Group 2\n    let EXPRESSION = OPEN_BRACKET + NEGATE + BINDING + CLOSE_BRACKET;\n    return new RegExp(EXPRESSION, \"g\");\n  }();\n\n  let insertionPointTag = 'slot';\n\n  /**\n   * Scans a template to produce an annotation map that stores expression metadata\n   * and information that associates the metadata to nodes in a template instance.\n   *\n   * Supported annotations are:\n   *   * id attributes\n   *   * binding annotations in text nodes\n   *     * double-mustache expressions: {{expression}}\n   *     * double-bracket expressions: [[expression]]\n   *   * binding annotations in attributes\n   *     * attribute-bind expressions: name=\"{{expression}} || [[expression]]\"\n   *     * property-bind expressions: name*=\"{{expression}} || [[expression]]\"\n   *     * property-bind expressions: name:=\"expression\"\n   *   * event annotations\n   *     * event delegation directives: on-<eventName>=\"expression\"\n   *\n   * Generated data-structure:\n   *   [\n   *     {\n   *       id: '<id>',\n   *       events: [\n   *         {\n   *           mode: ['auto'|''],\n   *           name: '<name>'\n   *           value: '<expression>'\n   *         }, ...\n   *       ],\n   *       bindings: [\n   *         {\n   *           kind: ['text'|'attribute'|'property'],\n   *           mode: ['auto'|''],\n   *           name: '<name>'\n   *           value: '<expression>'\n   *         }, ...\n   *       ],\n   *       parent: <reference to parent annotation>,\n   *       index: <integer index in parent's childNodes collection>\n   *     },\n   *     ...\n   *   ]\n   *\n   * @param {HTMLTemplateElement} template\n   * @param {boolean=} stripWhiteSpace\n   * @return {Array<Object>}\n   */\n  function parseTemplateAnnotations(template, stripWhiteSpace, ownerDocument) {\n    // TODO(kschaaf): File issue and/or remove when fixed\n    // hold a reference to content as _content to prevent odd Chrome gc issue\n    // nested templates also may receive their content as _content\n    let content = template._content = template._content || template.content;\n    // since a template may be re-used, memo-ize notes.\n    if (!content._notes) {\n      content._notes = [];\n      // TODO(sorvell): whitespace and processAnnotations need to be factored\n      // into plugins\n      ownerDocument = ownerDocument || template.ownerDocument;\n      parseNodeAnnotations(content, content._notes, stripWhiteSpace || template.hasAttribute('strip-whitespace'), ownerDocument);\n    }\n    return content._notes;\n  }\n\n  // add annotations gleaned from subtree at `node` to `list`\n  function parseNodeAnnotations(node, list, stripWhiteSpace, ownerDocument) {\n    return node.nodeType === Node.TEXT_NODE ? parseTextNodeAnnotation(node, list) : parseElementAnnotations(node, list, stripWhiteSpace, ownerDocument);\n  }\n\n  function parseBindings(text) {\n    let parts = [];\n    let lastIndex = 0;\n    let m;\n    // Example: \"literal1{{prop}}literal2[[!compute(foo,bar)]]final\"\n    // Regex matches:\n    //        Iteration 1:  Iteration 2:\n    // m[1]: '{{'          '[['\n    // m[2]: ''            '!'\n    // m[3]: 'prop'        'compute(foo,bar)'\n    while ((m = bindingRegex.exec(text)) !== null) {\n      // Add literal part\n      if (m.index > lastIndex) {\n        parts.push({ literal: text.slice(lastIndex, m.index) });\n      }\n      // Add binding part\n      // Mode (one-way or two)\n      let mode = m[1][0];\n      let negate = Boolean(m[2]);\n      let value = m[3].trim();\n      let customEvent, notifyEvent, colon;\n      if (mode == '{' && (colon = value.indexOf('::')) > 0) {\n        notifyEvent = value.substring(colon + 2);\n        value = value.substring(0, colon);\n        customEvent = true;\n      }\n      parts.push({\n        compoundIndex: parts.length,\n        value: value,\n        mode: mode,\n        negate: negate,\n        event: notifyEvent,\n        customEvent: customEvent\n      });\n      lastIndex = bindingRegex.lastIndex;\n    }\n    // Add a final literal part\n    if (lastIndex && lastIndex < text.length) {\n      let literal = text.substring(lastIndex);\n      if (literal) {\n        parts.push({\n          literal: literal\n        });\n      }\n    }\n    if (parts.length) {\n      return parts;\n    }\n  }\n\n  function literalFromParts(parts) {\n    let s = '';\n    for (let i = 0; i < parts.length; i++) {\n      let literal = parts[i].literal;\n      s += literal || '';\n    }\n    return s;\n  }\n\n  // add annotations gleaned from TextNode `node` to `list`\n  function parseTextNodeAnnotation(node, list) {\n    let parts = parseBindings(node.textContent);\n    if (parts) {\n      // Initialize the textContent with any literal parts\n      // NOTE: default to a space here so the textNode remains; some browsers\n      // (IE) evacipate an empty textNode following cloneNode/importNode.\n      node.textContent = literalFromParts(parts) || ' ';\n      let note = {\n        bindings: [{\n          kind: 'text',\n          name: 'textContent',\n          parts: parts,\n          isCompound: parts.length !== 1\n        }]\n      };\n      list.push(note);\n      return note;\n    }\n  }\n\n  // add annotations gleaned from Element `node` to `list`\n  function parseElementAnnotations(element, list, stripWhiteSpace, ownerDocument) {\n    let note = {\n      bindings: [],\n      events: []\n    };\n    if (element.localName === insertionPointTag) {\n      list._hasInsertionPoint = true;\n    }\n    parseChildNodesAnnotations(element, note, list, stripWhiteSpace, ownerDocument);\n    if (element.attributes) {\n      parseNodeAttributeAnnotations(element, note);\n    }\n    if (note.bindings.length || note.events.length || note.id) {\n      list.push(note);\n    }\n    return note;\n  }\n\n  // 1.x backwards-compatible auto-wrapper for template type extensions\n  // This is a clear layering violation and gives favored-nation status to\n  // dom-if and dom-repeat templates.  This is a conceit we're choosing to keep\n  // a.) to ease 1.x backwards-compatibility due to loss of `is`, and\n  // b.) to maintain if/repeat capability in parser-constrained elements\n  //     (e.g. table, select) in lieu of native CE type extensions without\n  //     massive new invention in this space (e.g. directive system)\n  const templateExtensions = {\n    'dom-if': true,\n    'dom-repeat': true\n  };\n  function wrapTemplateExtension(node) {\n    let is = node.getAttribute('is');\n    if (is && templateExtensions[is]) {\n      let t = node;\n      t.removeAttribute('is');\n      node = t.ownerDocument.createElement(is);\n      t.parentNode.replaceChild(node, t);\n      node.appendChild(t);\n      while (t.attributes.length) {\n        node.setAttribute(t.attributes[0].name, t.attributes[0].value);\n        t.removeAttribute(t.attributes[0].name);\n      }\n    }\n    return node;\n  }\n\n  // add annotations gleaned from children of `root` to `list`, `root`'s\n  // `note` is supplied as it is the note.parent of added annotations\n  function parseChildNodesAnnotations(root, note, list, stripWhiteSpace, ownerDocument) {\n    if (root.firstChild) {\n      let node = root.firstChild;\n      let i = 0;\n      while (node) {\n        // Wrap templates\n        if (node.localName == 'template') {\n          node = wrapTemplateExtension(node);\n        }\n        // Recurse\n        if (node.localName == 'template' && !node.hasAttribute('preserve-content')) {\n          parseTemplate(node, i, list, note, stripWhiteSpace, ownerDocument);\n        }\n        // collapse adjacent textNodes: fixes an IE issue that can cause\n        // text nodes to be inexplicably split =(\n        // note that root.normalize() should work but does not so we do this\n        // manually.\n        let next = node.nextSibling;\n        if (node.nodeType === Node.TEXT_NODE) {\n          let n = next;\n          while (n && n.nodeType === Node.TEXT_NODE) {\n            node.textContent += n.textContent;\n            next = n.nextSibling;\n            root.removeChild(n);\n            n = next;\n          }\n          // optionally strip whitespace\n          if (stripWhiteSpace && !node.textContent.trim()) {\n            root.removeChild(node);\n            // decrement index since node is removed\n            i--;\n          }\n        }\n        // if this node didn't get evacipated, parse it.\n        if (node.parentNode) {\n          let childAnnotation = parseNodeAnnotations(node, list, stripWhiteSpace, ownerDocument);\n          if (childAnnotation) {\n            childAnnotation.parent = note;\n            childAnnotation.index = i;\n          }\n        }\n        node = next;\n        i++;\n      }\n    }\n  }\n\n  // 1. Parse annotations from the template and memoize them on\n  //    content._notes (recurses into nested templates)\n  // 2. Remove template.content and store it in annotation list, where it\n  //    will be the responsibility of the host to set it back to the template\n  //    (this is both an optimization to avoid re-stamping nested template\n  //    children and avoids a bug in Chrome where nested template children\n  //    upgrade)\n  function parseTemplate(node, index, list, parent, stripWhiteSpace, ownerDocument) {\n    let content = node.content.ownerDocument.createDocumentFragment();\n    content._notes = parseTemplateAnnotations(node, stripWhiteSpace, ownerDocument);\n    content.appendChild(node.content);\n    list.push({\n      bindings: emptyArray,\n      events: emptyArray,\n      templateContent: content,\n      parent: parent,\n      index: index\n    });\n  }\n\n  // add annotation data from attributes to the `annotation` for node `node`\n  function parseNodeAttributeAnnotations(node, annotation) {\n    // Make copy of original attribute list, since the order may change\n    // as attributes are added and removed\n    let attrs = Array.prototype.slice.call(node.attributes);\n    for (let i = attrs.length - 1, a; a = attrs[i]; i--) {\n      let n = a.name;\n      let v = a.value;\n      let b;\n      // events (on-*)\n      if (n.slice(0, 3) === 'on-') {\n        node.removeAttribute(n);\n        annotation.events.push({\n          name: n.slice(3),\n          value: v\n        });\n      }\n      // bindings (other attributes)\n      else if (b = parseNodeAttributeAnnotation(node, n, v)) {\n          annotation.bindings.push(b);\n        }\n        // static id\n        else if (n === 'id') {\n            annotation.id = v;\n          }\n    }\n  }\n\n  // construct annotation data from a generic attribute, or undefined\n  function parseNodeAttributeAnnotation(node, name, value) {\n    let parts = parseBindings(value);\n    if (parts) {\n      // Attribute or property\n      let origName = name;\n      let kind = 'property';\n      if (name[name.length - 1] == '$') {\n        name = name.slice(0, -1);\n        kind = 'attribute';\n      }\n      // Initialize attribute bindings with any literal parts\n      let literal = literalFromParts(parts);\n      if (literal && kind == 'attribute') {\n        node.setAttribute(name, literal);\n      }\n      // Clear attribute before removing, since IE won't allow removing\n      // `value` attribute if it previously had a value (can't\n      // unconditionally set '' before removing since attributes with `$`\n      // can't be set using setAttribute)\n      if (node.localName === 'input' && origName === 'value') {\n        node.setAttribute(origName, '');\n      }\n      // Remove annotation\n      node.removeAttribute(origName);\n      // Case hackery: attributes are lower-case, but bind targets\n      // (properties) are case sensitive. Gambit is to map dash-case to\n      // camel-case: `foo-bar` becomes `fooBar`.\n      // Attribute bindings are excepted.\n      let propertyName = Polymer.CaseMap.dashToCamelCase(name);\n      if (kind === 'property') {\n        name = propertyName;\n      }\n      return {\n        kind: kind,\n        name: name,\n        propertyName: propertyName,\n        parts: parts,\n        literal: literal,\n        isCompound: parts.length !== 1\n      };\n    }\n  }\n\n  function findTemplateAnnotatedNode(root, note) {\n    // recursively ascend tree until we hit root\n    let parent = note.parent && findTemplateAnnotatedNode(root, note.parent);\n    // unwind the stack, returning the indexed node at each level\n    if (parent) {\n      // note: marginally faster than indexing via childNodes\n      // (http://jsperf.com/childnodes-lookup)\n      for (let n = parent.firstChild, i = 0; n; n = n.nextSibling) {\n        if (note.index === i++) {\n          return n;\n        }\n      }\n    } else {\n      return root;\n    }\n  }\n\n  // construct `$` map (from id annotations)\n  function applyIdToMap(inst, map, node, note) {\n    if (note.id) {\n      map[note.id] = node;\n    }\n  }\n\n  // install event listeners (from event annotations)\n  function applyEventListener(inst, node, note, host) {\n    if (note.events && note.events.length) {\n      for (let j = 0, e$ = note.events, e; j < e$.length && (e = e$[j]); j++) {\n        inst._addMethodEventListenerToNode(node, e.name, e.value, host);\n      }\n    }\n  }\n\n  // push configuration references at configure time\n  function applyTemplateContent(inst, node, note) {\n    if (note.templateContent) {\n      node._content = note.templateContent;\n    }\n  }\n\n  function createNodeEventHandler(context, eventName, methodName) {\n    // Instances can optionally have a _methodHost which allows redirecting where\n    // to find methods. Currently used by `templatize`.\n    context = context._methodHost || context;\n    let handler = function (e) {\n      if (context[methodName]) {\n        context[methodName](e, e.detail);\n      } else {\n        console.warn('listener method `' + methodName + '` not defined');\n      }\n    };\n    return handler;\n  }\n\n  /**\n   * Element mixin that provides basic template parsing and stamping, including\n   * the following template-related features for stamped templates:\n   *\n   * - Declarative event listeners (`on-eventname=\"listener\"`)\n   * - Map of node id's to stamped node instances (`this.$.id`)\n   * - Nested template content caching/removal and re-installation (performance\n   *   optimization)\n   * - Relative URL's relative to original template location\n   * - Template binding annotation parsing (note that this library only parses\n   *   template bindings and provides annotation metadata; see\n   *   `Polymer.PropertyEffects` for a full implementation of data-binding)\n   *\n   * @polymerMixin\n   * @memberof Polymer\n   * @summary Element class mixin that provides basic template parsing and stamping\n   */\n  Polymer.TemplateStamp = Polymer.dedupingMixin(function (superClass) {\n\n    return class TemplateStamp extends superClass {\n\n      constructor() {\n        super();\n        this.$ = null;\n        this.__templateNodes = null;\n        this.__templateNotes = null;\n      }\n\n      /**\n       * Clones the provided template content and returns a document fragment\n       * containing the cloned dom.\n       *\n       * The template is parsed (once and memoized) using this library's\n       * template parsing features, which identify nodes with declarative\n       * event listeners (`on-...``), `id`'s, `<template>`s, and bindings\n       * (`{{...}}` and `[[...]]`).  This template metadata (\"notes\")\n       * are stored as `this.__templateNotes`, and any nodes identified in\n       * notes are collected for this instance into `__templateNodes` in\n       * the same order as the notes array.\n       *\n       * Finally, this method generates an \"id map\" for all nodes with id's\n       * under `this.$`, passes template content back to templates as `_content`\n       * (a performance optimization to avoid deep template cloning), and\n       * installs declarative event listeners.\n       *\n       * Note that the memoized template parsing process is destructive to the\n       * template: attributes for bindings and declarative event listeners are\n       * removed after being noted in notes, and any nested <template>.content\n       * is removed and stored in notes as well.\n       *\n       * Note that this method may only be called once per instance (it does\n       * not support stamping multiple templates per element instance).\n       *\n       * @param {HTMLTemplateElement} template Template to stamp\n       */\n      _stampTemplate(template) {\n        // Polyfill support: bootstrap the template if it has not already been\n        if (template && !template.content && window.HTMLTemplateElement && HTMLTemplateElement.decorate) {\n          HTMLTemplateElement.decorate(template);\n        }\n        let notes = this.__templateNotes = this._parseTemplateAnnotations(template);\n        let dom = document.importNode(template._content || template.content, true);\n        // NOTE: ShadyDom optimization indicating there is an insertion point\n        dom.__noInsertionPoint = !notes._hasInsertionPoint;\n        this.$ = {};\n        this.__templateNodes = new Array(notes.length);\n        for (let i = 0, l = notes.length, note, node; i < l && (note = notes[i]); i++) {\n          node = this.__templateNodes[i] = findTemplateAnnotatedNode(dom, note);\n          applyIdToMap(this, this.$, node, note);\n          applyTemplateContent(this, node, note);\n          applyEventListener(this, node, note, this);\n        }\n        return dom;\n      }\n\n      // preprocess-time\n\n      // construct and return a list of annotation records\n      // by scanning `template`'s content\n      //\n      // TODO(sorvell): This should just crawl over a template and call\n      // a supplied list of callbacks.\n      _parseTemplateAnnotations(template) {\n        return parseTemplateAnnotations(template);\n      }\n\n      _addMethodEventListenerToNode(node, eventName, methodName, context) {\n        context = context || node;\n        let handler = createNodeEventHandler(context, eventName, methodName);\n        this._addEventListenerToNode(node, eventName, handler);\n        return handler;\n      }\n\n      _addEventListenerToNode(node, eventName, handler) {\n        node.addEventListener(eventName, handler);\n      }\n\n      _removeEventListenerFromNode(node, eventName, handler) {\n        node.removeEventListener(eventName, handler);\n      }\n\n    };\n  });\n})();\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/*__wc__loader*/\n\n(function (document) {\n  var _htmlStr = \"\\n\\n\\n\";\n  if (document.head) {\n    var el = document.head;\n    var div = document.createElement('div');\n    div.innerHTML = _htmlStr;\n    while (div.children.length > 0) {\n      el.appendChild(div.children[0]);\n    }\n  } else {\n    document.write(_htmlStr);\n  }\n})(document);\n\n(function (document) {\n  var _htmlStr = \"\";\n  if (document.body) {\n    var el = document.body;\n    var div = document.createElement('div');\n    div.innerHTML = _htmlStr;\n    while (div.children.length > 0) {\n      el.appendChild(div.children[0]);\n    }\n  } else {\n    document.write(_htmlStr);\n  }\n})(document);\n\n__webpack_require__(0);\n\n(function () {\n\n  'use strict';\n\n  /** @typedef {{run: function(function(), number=):number, cancel: function(number)}} */\n\n  let AsyncInterface; // eslint-disable-line no-unused-vars\n\n  // Microtask implemented using Mutation Observer\n  let microtaskCurrHandle = 0;\n  let microtaskLastHandle = 0;\n  let microtaskCallbacks = [];\n  let microtaskNodeContent = 0;\n  let microtaskNode = document.createTextNode('');\n  new window.MutationObserver(microtaskFlush).observe(microtaskNode, { characterData: true });\n\n  function microtaskFlush() {\n    const len = microtaskCallbacks.length;\n    for (let i = 0; i < len; i++) {\n      let cb = microtaskCallbacks[i];\n      if (cb) {\n        try {\n          cb();\n        } catch (e) {\n          setTimeout(() => {\n            throw e;\n          });\n        }\n      }\n    }\n    microtaskCallbacks.splice(0, len);\n    microtaskLastHandle += len;\n  }\n\n  /**\n   * Module that provides a number of strategies for enqueuing asynchronous\n   * tasks.  Each sub-module provides a standard `run(fn)` interface that returns a\n   * handle, and a `cancel(handle)` interface for canceling async tasks before\n   * they run.\n   *\n   * @namespace\n   * @memberof Polymer\n   * @summary Module that provides a number of strategies for enqueuing asynchronous\n   * tasks.\n   */\n  Polymer.Async = {\n\n    /**\n     * Async interface wrapper around `setTimeout`.\n     *\n     * @namespace\n     * @memberof Polymer.Async\n     * @summary Async interface wrapper around `setTimeout`.\n     */\n    timeOut: {\n      /**\n       * Returns a sub-module with the async interface providing the provided\n       * delay.\n       *\n       * @memberof Polymer.Async.timeOut\n       * @param {number} delay Time to wait before calling callbacks in ms\n       * @return {AsyncInterface} An async timeout interface\n       */\n      after(delay) {\n        return {\n          run(fn) {\n            return setTimeout(fn, delay);\n          },\n          cancel: window.clearTimeout.bind(window)\n        };\n      },\n      /**\n       * Enqueues a function called in the next task.\n       *\n       * @memberof Polymer.Async.timeOut\n       * @param {Function} fn Callback to run\n       * @return {*} Handle used for canceling task\n       */\n      run: window.setTimeout.bind(window),\n      /**\n       * Cancels a previously enqueued `timeOut` callback.\n       *\n       * @memberof Polymer.Async.timeOut\n       * @param {*} handle Handle returned from `run` of callback to cancel\n       */\n      cancel: window.clearTimeout.bind(window)\n    },\n\n    /**\n     * Async interface wrapper around `requestAnimationFrame`.\n     *\n     * @namespace\n     * @memberof Polymer.Async\n     * @summary Async interface wrapper around `requestAnimationFrame`.\n     */\n    animationFrame: {\n      /**\n       * Enqueues a function called at `requestAnimationFrame` timing.\n       *\n       * @memberof Polymer.Async.timeOut\n       * @param {Function} fn Callback to run\n       * @return {*} Handle used for canceling task\n       */\n      run: window.requestAnimationFrame.bind(window),\n      /**\n       * Cancels a previously enqueued `animationFrame` callback.\n       *\n       * @memberof Polymer.Async.timeOut\n       * @param {*} handle Handle returned from `run` of callback to cancel\n       */\n      cancel: window.cancelAnimationFrame.bind(window)\n    },\n\n    /**\n     * Async interface wrapper around `requestIdleCallback`.  Falls back to\n     * `setTimeout` on browsers that do not support `requestIdleCallback`.\n     *\n     * @namespace\n     * @memberof Polymer.Async\n     * @summary Async interface wrapper around `requestIdleCallback`.\n     */\n    idlePeriod: {\n      /**\n       * Enqueues a function called at `requestIdleCallback` timing.\n       *\n       * @memberof Polymer.Async.timeOut\n       * @param {Function} fn Callback to run\n       * @return {*} Handle used for canceling task\n       */\n      run(fn) {\n        return window.requestIdleCallback ? window.requestIdleCallback(fn) : window.setTimeout(fn, 16);\n      },\n      /**\n       * Cancels a previously enqueued `idlePeriod` callback.\n       *\n       * @memberof Polymer.Async.timeOut\n       * @param {*} handle Handle returned from `run` of callback to cancel\n       */\n      cancel(timer) {\n        return window.cancelIdleCallback ? window.cancelIdleCallback(timer) : window.clearTimeout(timer);\n      }\n    },\n\n    /**\n     * Async interface for enqueueing callbacks that run at microtask timing.\n     *\n     * Note that microtask timing is achieved via a single `MutationObserver`,\n     * and thus callbacks enqueued with this API will all run in a single\n     * batch, and not interleaved with other microtasks such as promises.\n     * Promises are avoided as an implementation choice for the time being\n     * due to Safari bugs that cause Promises to lack microtask guarantees.\n     *\n     * @namespace\n     * @memberof Polymer.Async\n     * @summary Async interface for enqueueing callbacks that run at microtask\n     *   timing.\n     */\n    microTask: {\n\n      /**\n       * Enqueues a function called at microtask timing.\n       *\n       * @memberof Polymer.Async.timeOut\n       * @param {Function} fn Callback to run\n       */\n      run(callback) {\n        microtaskNode.textContent = microtaskNodeContent++;\n        microtaskCallbacks.push(callback);\n        return microtaskCurrHandle++;\n      },\n\n      /**\n       * Cancels a previously enqueued `microTask` callback.\n       *\n       * @param {*} handle Handle returned from `run` of callback to cancel\n       */\n      cancel(handle) {\n        const idx = handle - microtaskLastHandle;\n        if (idx >= 0) {\n          if (!microtaskCallbacks[idx]) {\n            throw new Error('invalid async handle: ' + handle);\n          }\n          microtaskCallbacks[idx] = null;\n        }\n      }\n\n    }\n  };\n})();\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/*__wc__loader*/\n\n(function (document) {\n  var _htmlStr = \"\\n\\n\\n\";\n  if (document.head) {\n    var el = document.head;\n    var div = document.createElement('div');\n    div.innerHTML = _htmlStr;\n    while (div.children.length > 0) {\n      el.appendChild(div.children[0]);\n    }\n  } else {\n    document.write(_htmlStr);\n  }\n})(document);\n\n(function (document) {\n  var _htmlStr = \"\";\n  if (document.body) {\n    var el = document.body;\n    var div = document.createElement('div');\n    div.innerHTML = _htmlStr;\n    while (div.children.length > 0) {\n      el.appendChild(div.children[0]);\n    }\n  } else {\n    document.write(_htmlStr);\n  }\n})(document);\n\n__webpack_require__(0);\n\n(function () {\n  'use strict';\n\n  /**\n   * Module with utilities for manipulating structured data path strings.\n   *\n   * @namespace\n   * @memberof Polymer\n   * @summary Module with utilities for manipulating structured data path strings.\n   */\n\n  const Path = {\n\n    /**\n     * Returns true if the given string is a structured data path (has dots).\n     *\n     * Example:\n     *\n     * ```\n     * Polymer.Path.isPath('foo.bar.baz') // true\n     * Polymer.Path.isPath('foo')         // false\n     * ```\n     *\n     * @memberof Polymer.Path\n     * @param {string} path Path string\n     * @return {boolean} True if the string contained one or more dots\n     */\n    isPath: function (path) {\n      return path.indexOf('.') >= 0;\n    },\n\n    /**\n     * Returns the root property name for the given path.\n     *\n     * Example:\n     *\n     * ```\n     * Polymer.Path.root('foo.bar.baz') // 'foo'\n     * Polymer.Path.root('foo')         // 'foo'\n     * ```\n     *\n     * @memberof Polymer.Path\n     * @param {string} path Path string\n     * @return {string} Root property name\n     */\n    root: function (path) {\n      let dotIndex = path.indexOf('.');\n      if (dotIndex === -1) {\n        return path;\n      }\n      return path.slice(0, dotIndex);\n    },\n\n    /**\n     * Given `base` is `foo.bar`, `foo` is an ancestor, `foo.bar` is not\n     * Returns true if the given path is an ancestor of the base path.\n     *\n     * Example:\n     *\n     * ```\n     * Polymer.Path.isAncestor('foo.bar', 'foo')         // true\n     * Polymer.Path.isAncestor('foo.bar', 'foo.bar')     // false\n     * Polymer.Path.isAncestor('foo.bar', 'foo.bar.baz') // false\n     * ```\n     *\n     * @memberof Polymer.Path\n     * @param {string} path Path string\n     * @return {boolean} True if `path` is an ancestor of `base`\n     */\n    isAncestor: function (base, path) {\n      //     base.startsWith(path + '.');\n      return base.indexOf(path + '.') === 0;\n    },\n\n    /**\n     * Given `base` is `foo.bar`, `foo.bar.baz` is an descendant\n     *\n     * Example:\n     *\n     * ```\n     * Polymer.Path.isDescendant('foo.bar', 'foo.bar.baz') // true\n     * Polymer.Path.isDescendant('foo.bar', 'foo.bar')     // false\n     * Polymer.Path.isDescendant('foo.bar', 'foo')         // false\n     * ```\n     *\n     * @memberof Polymer.Path\n     */\n    isDescendant: function (base, path) {\n      //     path.startsWith(base + '.');\n      return path.indexOf(base + '.') === 0;\n    },\n\n    /**\n     * Replaces a previous base path with a new base path, preserving the\n     * remainder of the path.\n     *\n     * User must ensure `path` has a prefix of `base`.\n     *\n     * Example:\n     *\n     * ```\n     * Polymer.Path.translate('foo.bar', 'zot' 'foo.bar.baz') // 'zot.baz'\n     * ```\n     *\n     * @memberof Polymer.Path\n     * @param {string} base Current base string to remove\n     * @param {string} newBase New base string to replace with\n     * @param {string} path Path to translate\n     * @return {string} Translated string\n     */\n    translate: function (base, newBase, path) {\n      return newBase + path.slice(base.length);\n    },\n\n    matches: function (base, path) {\n      return base === path || this.isAncestor(base, path) || this.isDescendant(base, path);\n    },\n\n    /**\n     * Converts array-based paths to flattened path.  String-based paths\n     * are returned as-is.\n     *\n     * Example:\n     *\n     * ```\n     * Polymer.Path.normalize(['foo.bar', 0, 'baz'])  // 'foo.bar.0.baz'\n     * Polymer.Path.normalize('foo.bar.0.baz')        // 'foo.bar.0.baz'\n     * ```\n     *\n     * @memberof Polymer.Path\n     * @param {string | !Array<string|number>} path Input path\n     * @return {string} Flattened path\n     */\n    normalize: function (path) {\n      if (Array.isArray(path)) {\n        let parts = [];\n        for (let i = 0; i < path.length; i++) {\n          let args = path[i].toString().split('.');\n          for (let j = 0; j < args.length; j++) {\n            parts.push(args[j]);\n          }\n        }\n        return parts.join('.');\n      } else {\n        return path;\n      }\n    },\n\n    /**\n     * Splits a path into an array of property names. Accepts either arrays\n     * of path parts or strings.\n     *\n     * Example:\n     *\n     * ```\n     * Polymer.Path.split(['foo.bar', 0, 'baz'])  // ['foo', 'bar', '0', 'baz']\n     * Polymer.Path.split('foo.bar.0.baz')        // ['foo', 'bar', '0', 'baz']\n     * ```\n     *\n     * @memberof Polymer.Path\n     * @param {string | !Array<string|number>} path Input path\n     * @return {!Array<string>} Array of path parts\n     */\n    split: function (path) {\n      if (Array.isArray(path)) {\n        return this.normalize(path).split('.');\n      }\n      return path.toString().split('.');\n    },\n\n    /**\n     * Reads a value from a path.  If any sub-property in the path is `undefined`,\n     * this method returns `undefined` (will never throw.\n     *\n     * @memberof Polymer.Path\n     * @param {Object} root Object from which to dereference path from\n     * @param {string | !Array<string|number>} path Path to read\n     * @param {Object=} info If an object is provided to `info`, the normalized\n     *  (flattened) path will be set to `info.path`.\n     * @return {*} Value at path, or `undefined` if the path could not be\n     *  fully dereferenced.\n     */\n    get: function (root, path, info) {\n      let prop = root;\n      let parts = this.split(path);\n      // Loop over path parts[0..n-1] and dereference\n      for (let i = 0; i < parts.length; i++) {\n        if (!prop) {\n          return;\n        }\n        let part = parts[i];\n        prop = prop[part];\n      }\n      if (info) {\n        info.path = parts.join('.');\n      }\n      return prop;\n    },\n\n    /**\n     * Sets a value to a path.  If any sub-property in the path is `undefined`,\n     * this method will no-op.\n     *\n     * @memberof Polymer.Path\n     * @param {Object} root Object from which to dereference path from\n     * @param {string | !Array<string|number>} path Path to set\n     * @param {*} value Value to set to path\n     * @return {string | undefined} The normalized version of the input path\n     */\n    set: function (root, path, value) {\n      let prop = root;\n      let parts = this.split(path);\n      let last = parts[parts.length - 1];\n      if (parts.length > 1) {\n        // Loop over path parts[0..n-2] and dereference\n        for (let i = 0; i < parts.length - 1; i++) {\n          let part = parts[i];\n          prop = prop[part];\n          if (!prop) {\n            return;\n          }\n        }\n        // Set value to object at end of path\n        prop[last] = value;\n      } else {\n        // Simple property set\n        prop[path] = value;\n      }\n      return parts.join('.');\n    }\n\n  };\n\n  /**\n   * Returns true if the given string is a structured data path (has dots).\n   *\n   * This function is deprecated.  Use `Polymer.Path.isPath` instead.\n   *\n   * Example:\n   *\n   * ```\n   * Polymer.Path.isDeep('foo.bar.baz') // true\n   * Polymer.Path.isDeep('foo')         // false\n   * ```\n   *\n   * @deprecated\n   * @memberof Polymer.Path\n   * @param {string} path Path string\n   * @return {boolean} True if the string contained one or more dots\n   */\n  Path.isDeep = Path.isPath;\n\n  Polymer.Path = Path;\n})();\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/*__wc__loader*/\n\n(function (document) {\n  var _htmlStr = \"\\n\\n\";\n  if (document.head) {\n    var el = document.head;\n    var div = document.createElement('div');\n    div.innerHTML = _htmlStr;\n    while (div.children.length > 0) {\n      el.appendChild(div.children[0]);\n    }\n  } else {\n    document.write(_htmlStr);\n  }\n})(document);\n\n(function (document) {\n  var _htmlStr = \"\";\n  if (document.body) {\n    var el = document.body;\n    var div = document.createElement('div');\n    div.innerHTML = _htmlStr;\n    while (div.children.length > 0) {\n      el.appendChild(div.children[0]);\n    }\n  } else {\n    document.write(_htmlStr);\n  }\n})(document);\n\n__webpack_require__(3);\n\n(function () {\n  'use strict';\n\n  const MODULE_STYLE_LINK_SELECTOR = 'link[rel=import][type~=css]';\n  const INCLUDE_ATTR = 'include';\n\n  function importModule(moduleId) {\n    if (!Polymer.DomModule) {\n      return null;\n    }\n    return Polymer.DomModule.import(moduleId);\n  }\n\n  /**\n   * Module with utilities for collection CSS text from `<templates>`, external\n   * stylesheets, and `dom-module`s.\n   *\n   * @namespace\n   * @memberof Polymer\n   * @summary Module with utilities for collection CSS text from various sources.\n   */\n  const StyleGather = {\n\n    /**\n     * Returns CSS text of styles in a space-separated list of `dom-module`s.\n     *\n     * @memberof Polymer.StyleGather\n     * @param {string} moduleIds\n     * @return {string} Concatenated CSS content from specified `dom-module`s\n     */\n    cssFromModules(moduleIds) {\n      let modules = moduleIds.trim().split(' ');\n      let cssText = '';\n      for (let i = 0; i < modules.length; i++) {\n        cssText += this.cssFromModule(modules[i]);\n      }\n      return cssText;\n    },\n\n    /**\n     * Returns CSS text of styles in a given `dom-module`.  CSS in a `dom-module`\n     * can come either from `<style>`s within the first `<template>`, or else\n     * from one or more `<link rel=\"import\" type=\"css\">` links outside the\n     * template.\n     *\n     * Any `<styles>` processed are removed from their original location.\n     *\n     * @memberof Polymer.StyleGather\n     * @param {string} moduleId dom-module id to gather styles from\n     * @return {string} Concatenated CSS content from specified `dom-module`\n     */\n    cssFromModule(moduleId) {\n      let m = importModule(moduleId);\n      if (m && m._cssText === undefined) {\n        let cssText = '';\n        // include css from the first template in the module\n        let t = m.querySelector('template');\n        if (t) {\n          cssText += this.cssFromTemplate(t, m.assetpath);\n        }\n        // module imports: <link rel=\"import\" type=\"css\">\n        cssText += this.cssFromModuleImports(moduleId);\n        m._cssText = cssText || null;\n      }\n      if (!m) {\n        console.warn('Could not find style data in module named', moduleId);\n      }\n      return m && m._cssText || '';\n    },\n\n    /**\n     * Returns CSS text of `<styles>` within a given template.\n     *\n     * Any `<styles>` processed are removed from their original location.\n     *\n     * @memberof Polymer.StyleGather\n     * @param {HTMLTemplateElement} template Template to gather styles from\n     * @param {string} baseURI Base URI to resolve the URL against\n     * @return {string} Concatenated CSS content from specified template\n     */\n    cssFromTemplate(template, baseURI) {\n      let cssText = '';\n      // if element is a template, get content from its .content\n      let e$ = template.content.querySelectorAll('style');\n      for (let i = 0; i < e$.length; i++) {\n        let e = e$[i];\n        // support style sharing by allowing styles to \"include\"\n        // other dom-modules that contain styling\n        let include = e.getAttribute(INCLUDE_ATTR);\n        if (include) {\n          cssText += this.cssFromModules(include);\n        }\n        e.parentNode.removeChild(e);\n        cssText += baseURI ? Polymer.ResolveUrl.resolveCss(e.textContent, baseURI) : e.textContent;\n      }\n      return cssText;\n    },\n\n    /**\n     * Returns CSS text from stylsheets loaded via `<link rel=\"import\" type=\"css\">`\n     * links within the specified `dom-module`.\n     *\n     * @memberof Polymer.StyleGather\n     * @param {string} moduleId Id of `dom-module` to gather CSS from\n     * @return {string} Concatenated CSS content from links in specified `dom-module`\n     */\n    cssFromModuleImports(moduleId) {\n      let cssText = '';\n      let m = importModule(moduleId);\n      if (!m) {\n        return cssText;\n      }\n      let p$ = m.querySelectorAll(MODULE_STYLE_LINK_SELECTOR);\n      for (let i = 0; i < p$.length; i++) {\n        let p = p$[i];\n        if (p.import) {\n          let importDoc = p.import;\n          // NOTE: polyfill affordance.\n          // under the HTMLImports polyfill, there will be no 'body',\n          // but the import pseudo-doc can be used directly.\n          let container = importDoc.body ? importDoc.body : importDoc;\n          cssText += Polymer.ResolveUrl.resolveCss(container.textContent, importDoc.baseURI);\n        }\n      }\n      return cssText;\n    }\n  };\n\n  Polymer.StyleGather = StyleGather;\n})();\n\n/***/ }),\n/* 13 */,\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/*__wc__loader*/\n\n(function (document) {\n  var _htmlStr = \"\\n\";\n  if (document.head) {\n    var el = document.head;\n    var div = document.createElement('div');\n    div.innerHTML = _htmlStr;\n    while (div.children.length > 0) {\n      el.appendChild(div.children[0]);\n    }\n  } else {\n    document.write(_htmlStr);\n  }\n})(document);\n\n(function (document) {\n  var _htmlStr = \"\";\n  if (document.body) {\n    var el = document.body;\n    var div = document.createElement('div');\n    div.innerHTML = _htmlStr;\n    while (div.children.length > 0) {\n      el.appendChild(div.children[0]);\n    }\n  } else {\n    document.write(_htmlStr);\n  }\n})(document);\n\n__webpack_require__(4);\n\n(function () {\n  'use strict';\n\n  /**\n   * Base class that provides the core API for Polymer's meta-programming\n   * features including template stamping, data-binding, attribute deserialization,\n   * and property change observation.\n   *\n   * @polymerElement\n   * @memberof Polymer\n   * @extends HTMLElement\n   * @mixes Polymer.ElementMixin\n   * @summary Custom element base class that provides the core API for Polymer's\n   *   key meta-programming features including template stamping, data-binding,\n   *   attribute deserialization, and property change observation\n   */\n\n  const Element = Polymer.ElementMixin(HTMLElement);\n  Polymer.Element = Element;\n})();\n\n/***/ })\n/******/ ]);\n//# sourceMappingURL=polymer.bundle.js.map\n\n\n// WEBPACK FOOTER //\n// ./polymer.bundle.js"],"sourceRoot":""}