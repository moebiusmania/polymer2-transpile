{"version":3,"sources":["webpack:///webpack/bootstrap 7beaefa000453f8cca09","webpack:///./bower_components/polymer/lib/utils/boot.html","webpack:///./bower_components/polymer/lib/utils/mixin.html","webpack:///./bower_components/polymer/lib/utils/case-map.html","webpack:///./bower_components/polymer/lib/utils/resolve-url.html","webpack:///./bower_components/polymer/lib/mixins/element-mixin.html","webpack:///./bower_components/polymer/lib/elements/dom-module.html","webpack:///./bower_components/polymer/lib/mixins/property-accessors.html","webpack:///./bower_components/polymer/lib/mixins/property-effects.html","webpack:///./bower_components/polymer/lib/mixins/template-stamp.html","webpack:///./bower_components/polymer/lib/utils/async.html","webpack:///./bower_components/polymer/lib/utils/path.html","webpack:///./bower_components/polymer/lib/utils/style-gather.html","webpack:///./bower_components/polymer/polymer-element.html"],"names":["document","_htmlStr","head","el","div","createElement","innerHTML","children","length","appendChild","write","body","userPolymer","window","Polymer","info","_polymerFn","Object","assign","Error","version","goog","reflect","objectProperty","s","o","require","dedupeId","cachingMixin","mixin","base","__mixinApplications","WeakMap","map","application","get","set","dedupingMixin","__id","__dedupeId","baseSet","__mixinSet","extended","create","caseMap","DASH_TO_CAMEL","CAMEL_TO_DASH","CaseMap","dashToCamelCase","dash","indexOf","replace","m","toUpperCase","camelToDashCase","camel","toLowerCase","CSS_URL_RX","ABS_URL","workingURL","resolveDoc","resolveUrl","url","baseURI","test","undefined","u","URL","pathname","href","e","location","implementation","createHTMLDocument","anchor","resolveCss","cssText","pre","post","pathFromUrl","substring","lastIndexOf","ResolveUrl","PolymerElementProperties","PolymerElementConstructor","is","extends","properties","observers","template","ElementMixin","polymerElementBase","PropertyEffects","ownPropertiesForClass","klass","hasOwnProperty","__ownProperties","ownObserversForClass","__ownObservers","flattenProperties","flattenedProps","props","p","type","propertiesForClass","__classProperties","superCtor","getPrototypeOf","prototype","constructor","PolymerElement","propertyDefaultsForClass","__classPropertyDefaults","hasClassFinalized","finalizeClassAndSuper","proto","finalize","finalizeClass","__finalized","telemetry","register","finalizeProperties","finalizeObservers","t","cloneNode","_template","createPropertyFromConfig","dynamicProperties","i","_createMethodObserver","name","allProps","computed","readOnly","_hasReadOnlyEffect","_createComputedProperty","_createReadOnlyProperty","reflectToAttribute","_hasReflectEffect","_createReflectedProperty","notify","_hasNotifyEffect","_createNotifyingProperty","observer","_createPropertyObserver","finalizeTemplate","ext","StyleGather","cssFromTemplate","cssFromModuleImports","style","textContent","content","insertBefore","firstChild","ShadyCSS","prepareTemplate","_bindTemplate","observedAttributes","list","prop","push","__observedAttributes","DomModule","import","importPath","module","_importPath","assetpath","instanceCount","root","_stampTemplate","_initializeProperties","__polymerFinalized","__proto__","localName","rootPath","p$","_isPropertyPending","value","call","_hasPropertyEffect","_setProperty","connectedCallback","styleElement","_flushProperties","disconnectedCallback","_readyClients","_attachDom","dom","attachShadow","shadowRoot","mode","attributeChangedCallback","old","property","_attributeToProperty","updateStyles","styleSubtree","registrations","_regLog","console","log","dumpRegistrations","forEach","styleDocument","modules","lcModules","findModule","id","styleOutsideTemplateCheck","inst","querySelector","warn","HTMLElement","selector","__assetpath","owner","HTMLImports","importForElement","ownerDocument","getAttribute","customElements","define","microtask","Async","microTask","nativeProperties","getOwnPropertyNames","saveAccessorValue","model","__data","_setPendingProperty","__dataProto","PropertyAccessors","superClass","createPropertiesForAttributes","a$","_createPropertyAccessor","__serializing","__dataCounter","__dataInvalid","__dataPending","__dataOld","_initializeProtoProperties","_ensureAttribute","attribute","hasAttribute","_valueToNodeAttribute","_deserializeValue","_propertyToAttribute","arguments","node","str","_serializeValue","removeAttribute","setAttribute","Date","toString","JSON","stringify","x","outValue","Number","Boolean","parse","Array","String","defineProperty","_invalidateProperties","_shouldPropertyChange","run","oldProps","changedProps","_propertiesChanged","currentProps","TYPES","ANY","COMPUTE","REFLECT","NOTIFY","PROPAGATE","OBSERVE","READ_ONLY","ensureOwnEffectMap","effects","protoFx","instFx","runEffects","hasPaths","ran","runEffectsForProperty","rootProperty","Path","fxs","l","fx","lastRun","pathMatchesTrigger","trigger","fn","path","triggerPath","structured","isAncestor","wildcard","isDescendant","runObserverEffect","methodName","changedProp","runNotifyEffects","notifyProps","__notifyEffects","notified","notifyPath","host","__dataHost","eventName","dispatchNotifyEvent","detail","queueProperty","dispatchEvent","CustomEvent","runNotifyEffect","addNotifyListener","addEventListener","event","handleNotification","negate","targetPath","translate","target","setPropertyFromNotification","__readOnly","_setPendingPropertyOrPath","runReflectEffect","sanitizeDOMValue","attrName","runComputedEffects","computeEffects","__computeEffects","inputProps","runComputedEffect","result","runMethodEffect","computedProp","methodInfo","__propertyEffects","computeLinkedPaths","links","__dataLinkedPaths","cache","__dataTemp","link","a","b","__dataToNotify","addBindingEffect","note","index","dynamicFns","parts","part","signature","addMethodBindingEffect","literal","kind","_addPropertyEffect","runBindingEffect","propertyName","isCompound","compoundIndex","customEvent","__templateNodes","_enqueueClient","isPath","applyBindingValue","computeBindingValue","_setUnmanagedPropertyToNode","storage","__dataCompoundStorage","join","createMethodEffect","runMethodBindingEffect","val","processAnnotations","notes","_processed","j","bindings","k","parseMethod","templateContent","_notes","hostProps","_hostProps","discoverTemplateHostProps","concat","n","b$","args","kk","templateHostProps","shouldAddListener","binding","addAnnotatedListener","__notifyListeners","setupNotifyListeners","setupBindings","__templateNotes","setupCompoundBinding","sig","effectFn","dynamicFn","static","arg","context","_methodHost","marshalArgs","apply","emptyArray","expression","match","trim","split","parseArgs","argList","rawArg","parseArg","fc","slice","isDeep","data","values","v","baseChanged","matches","literals","notifySplices","array","splices","splicesPath","indexSplices","notifySplice","addedCount","removed","object","upper","initalizeInstanceProperties","propertyEffectsBase","TemplateStamp","PROPERTY_EFFECT_TYPES","__dataInitialized","__dataClientsInitialized","__dataPendingClients","__dataHasPaths","__dataInstanceProps","effect","_hasComputedEffect","shouldNotify","isPathNotification","isArray","hasEffect","prevProps","client","_flushClients","clients","setProperties","ready","instanceProps","__propagateEffects","__reflectEffects","__observeEffects","linkPaths","to","from","normalize","unlinkPaths","items","len","ret","pop","hadLength","splice","start","deleteCount","Math","floor","shift","unshift","propPath","protectedSetter","attr","_parseTemplateAnnotations","bindingRegex","IDENT","NUMBER","SQUOTE_STRING","DQUOTE_STRING","STRING","ARGUMENT","ARGUMENTS","ARGUMENT_LIST","BINDING","OPEN_BRACKET","CLOSE_BRACKET","NEGATE","EXPRESSION","RegExp","insertionPointTag","parseTemplateAnnotations","stripWhiteSpace","_content","parseNodeAnnotations","nodeType","Node","TEXT_NODE","parseTextNodeAnnotation","parseElementAnnotations","parseBindings","text","lastIndex","exec","notifyEvent","colon","literalFromParts","element","events","_hasInsertionPoint","parseChildNodesAnnotations","attributes","parseNodeAttributeAnnotations","templateExtensions","wrapTemplateExtension","parentNode","replaceChild","parseTemplate","next","nextSibling","removeChild","childAnnotation","parent","createDocumentFragment","annotation","attrs","parseNodeAttributeAnnotation","origName","findTemplateAnnotatedNode","applyIdToMap","applyEventListener","e$","_addMethodEventListenerToNode","applyTemplateContent","createNodeEventHandler","handler","$","HTMLTemplateElement","decorate","importNode","__noInsertionPoint","_addEventListenerToNode","_removeEventListenerFromNode","removeEventListener","AsyncInterface","microtaskCurrHandle","microtaskLastHandle","microtaskCallbacks","microtaskNodeContent","microtaskNode","createTextNode","MutationObserver","microtaskFlush","observe","characterData","cb","setTimeout","timeOut","after","delay","cancel","clearTimeout","bind","animationFrame","requestAnimationFrame","cancelAnimationFrame","idlePeriod","requestIdleCallback","timer","cancelIdleCallback","callback","handle","idx","dotIndex","newBase","last","MODULE_STYLE_LINK_SELECTOR","INCLUDE_ATTR","importModule","moduleId","cssFromModules","moduleIds","cssFromModule","_cssText","querySelectorAll","include","importDoc","container","Element"],"mappings":"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","file":"polymer.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 14);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 7beaefa000453f8cca09","/*__wc__loader*/\n\n\n    (function(document) {\n      var _htmlStr = \"\\n\";\n      if (document.head) {\n        var el = document.head;\n        var div = document.createElement('div');\n        div.innerHTML = _htmlStr;\n        while (div.children.length > 0) {\n          el.appendChild(div.children[0]);\n        }\n      } else {\n        document.write(_htmlStr);\n      }\n    })(document);\n    \n\n\n    (function(document) {\n      var _htmlStr = \"\";\n      if (document.body) {\n        var el = document.body;\n        var div = document.createElement('div');\n        div.innerHTML = _htmlStr;\n        while (div.children.length > 0) {\n          el.appendChild(div.children[0]);\n        }\n      } else {\n        document.write(_htmlStr);\n      }\n    })(document);\n    \n\n\n(function() {\n  'use strict';\n\n  const userPolymer = window.Polymer;\n\n  /**\n   * @namespace Polymer\n   * @summary Polymer is a lightweight library built on top of the web\n   * standards-based Web Components API's, and makes it easy to build your\n   * own custom HTML elements.\n   */\n  window.Polymer = function(info) {\n    return window.Polymer._polymerFn(info);\n  }\n\n  // support user settings on the Polymer object\n  if (userPolymer) {\n    Object.assign(Polymer, userPolymer);\n  }\n\n  // To be plugged by legacy implementation if loaded\n  window.Polymer._polymerFn = function() {\n    throw new Error('Load polymer.html to use the Polymer() function.');\n  }\n  window.Polymer.version = '2.0-preview';\n\n  /* eslint-disable no-unused-vars */\n  /*\n  When using Closure Compiler, goog.reflect.objectProperty(property, object) is replaced by the munged name for object[property]\n  We cannot alias this function, so we have to use a small shim that has the same behavior when not compiling.\n  */\n  window.goog = window.goog || {};\n  window.goog.reflect = window.goog.reflect || {\n    objectProperty(s, o) {\n      return s;\n    }\n  };\n  /* eslint-enable */\n\n})();\n\n\n\n\n// WEBPACK FOOTER //\n// ./bower_components/polymer/lib/utils/boot.html","/*__wc__loader*/\n\n\n    (function(document) {\n      var _htmlStr = \"\\n\\n\\n\";\n      if (document.head) {\n        var el = document.head;\n        var div = document.createElement('div');\n        div.innerHTML = _htmlStr;\n        while (div.children.length > 0) {\n          el.appendChild(div.children[0]);\n        }\n      } else {\n        document.write(_htmlStr);\n      }\n    })(document);\n    \n\n\n    (function(document) {\n      var _htmlStr = \"\";\n      if (document.body) {\n        var el = document.body;\n        var div = document.createElement('div');\n        div.innerHTML = _htmlStr;\n        while (div.children.length > 0) {\n          el.appendChild(div.children[0]);\n        }\n      } else {\n        document.write(_htmlStr);\n      }\n    })(document);\n    \n\nrequire('./boot.html');\n\n\n\n(function() {\n\n  'use strict';\n\n  // unique global id for deduping mixins.\n  let dedupeId = 0;\n\n  /**\n   * Given a mixin producing function, memoize applications of mixin to base\n   * @private\n   */\n  function cachingMixin(mixin) {\n    return function(base) {\n      if (!mixin.__mixinApplications) {\n        mixin.__mixinApplications = new WeakMap();\n      }\n      let map = mixin.__mixinApplications;\n      let application = map.get(base);\n      if (!application) {\n        application = mixin(base);\n        map.set(base, application);\n      }\n      return application;\n    };\n  }\n\n  /**\n   * Wraps an ES6 class expression mixin such that the mixin is only applied\n   * if it has not already been applied its base argument.  Also memoizes mixin\n   * applications.\n   *\n   * @memberof Polymer\n   * @param {function} mixin ES6 class expression mixin to wrap\n   * @return {function} Wrapped mixin that deduplicates and memoizes\n   *   mixin applications to base\n   */\n  Polymer.dedupingMixin = function(mixin) {\n    mixin = cachingMixin(mixin);\n    // maintain a unique id for each mixin\n    if (!mixin.__id) {\n      mixin.__dedupeId = ++dedupeId;\n    }\n    return function(base) {\n      let baseSet = base.__mixinSet;\n      if (baseSet && baseSet[mixin.__dedupeId]) {\n        return base;\n      }\n      let extended = mixin(base);\n      // copy inherited mixin set from the extended class, or the base class\n      // NOTE: we avoid use of Set here because some browser (IE11)\n      // cannot extend a base Set via the constructor.\n      extended.__mixinSet =\n        Object.create(extended.__mixinSet || baseSet || null);\n      extended.__mixinSet[mixin.__dedupeId] = true;\n      return extended;\n    }\n  };\n\n})();\n\n\n\n\n\n// WEBPACK FOOTER //\n// ./bower_components/polymer/lib/utils/mixin.html","/*__wc__loader*/\n\n\n    (function(document) {\n      var _htmlStr = \"\\n\\n\";\n      if (document.head) {\n        var el = document.head;\n        var div = document.createElement('div');\n        div.innerHTML = _htmlStr;\n        while (div.children.length > 0) {\n          el.appendChild(div.children[0]);\n        }\n      } else {\n        document.write(_htmlStr);\n      }\n    })(document);\n    \n\n\n    (function(document) {\n      var _htmlStr = \"\";\n      if (document.body) {\n        var el = document.body;\n        var div = document.createElement('div');\n        div.innerHTML = _htmlStr;\n        while (div.children.length > 0) {\n          el.appendChild(div.children[0]);\n        }\n      } else {\n        document.write(_htmlStr);\n      }\n    })(document);\n    \n\nrequire('./boot.html');\n\n\n(function() {\n  'use strict';\n\n  const caseMap = {};\n  const DASH_TO_CAMEL = /-[a-z]/g;\n  const CAMEL_TO_DASH = /([A-Z])/g;\n\n  /**\n   * Module with utilities for converting between \"dash-case\" and \"camelCase\"\n   * identifiers.\n   *\n   * @namespace\n   * @memberof Polymer\n   * @summary Module that provides utilities for converting between \"dash-case\"\n   *   and \"camelCase\".\n   */\n  const CaseMap = {\n\n    /**\n     * Converts \"dash-case\" identifier (e.g. `foo-bar-baz`) to \"camelCase\"\n     * (e.g. `fooBarBaz`).\n     *\n     * @memberof Polymer.CaseMap\n     * @param {string} dash Dash-case identifier\n     * @return {string} Camel-case representation of the identifier\n     */\n    dashToCamelCase(dash) {\n      return caseMap[dash] || (\n        caseMap[dash] = dash.indexOf('-') < 0 ? dash : dash.replace(DASH_TO_CAMEL,\n          (m) => m[1].toUpperCase()\n        )\n      );\n    },\n\n    /**\n     * Converts \"camelCase\" identifier (e.g. `fooBarBaz`) to \"dash-case\"\n     * (e.g. `foo-bar-baz`).\n     *\n     * @memberof Polymer.CaseMap\n     * @param {string} camel Camel-case identifier\n     * @return {string} Dash-case representation of the identifier\n     */\n    camelToDashCase(camel) {\n      return caseMap[camel] || (\n        caseMap[camel] = camel.replace(CAMEL_TO_DASH, '-$1').toLowerCase()\n      );\n    }\n\n  };\n\n  Polymer.CaseMap = CaseMap;\n})();\n\n\n\n\n// WEBPACK FOOTER //\n// ./bower_components/polymer/lib/utils/case-map.html","/*__wc__loader*/\n\n\n    (function(document) {\n      var _htmlStr = \"\\n\\n\\n\";\n      if (document.head) {\n        var el = document.head;\n        var div = document.createElement('div');\n        div.innerHTML = _htmlStr;\n        while (div.children.length > 0) {\n          el.appendChild(div.children[0]);\n        }\n      } else {\n        document.write(_htmlStr);\n      }\n    })(document);\n    \n\n\n    (function(document) {\n      var _htmlStr = \"\";\n      if (document.body) {\n        var el = document.body;\n        var div = document.createElement('div');\n        div.innerHTML = _htmlStr;\n        while (div.children.length > 0) {\n          el.appendChild(div.children[0]);\n        }\n      } else {\n        document.write(_htmlStr);\n      }\n    })(document);\n    \n\nrequire('./boot.html');\n\n\n\n  (function() {\n    'use strict';\n\n    let CSS_URL_RX = /(url\\()([^)]*)(\\))/g;\n    let ABS_URL = /(^\\/)|(^#)|(^[\\w-\\d]*:)/;\n    let workingURL;\n    let resolveDoc;\n    /**\n     * Resolves the given URL against the provided `baseUri'.\n     *\n     * @memberof Polymer.ResolveUrl\n     * @param {string} url Input URL to resolve\n     * @param {string} baseURI Base URI to resolve the URL against\n     * @return {string} resolved URL\n     */\n    function resolveUrl(url, baseURI) {\n      if (url && ABS_URL.test(url)) {\n        return url;\n      }\n      // Lazy feature detection.\n      if (workingURL === undefined) {\n        workingURL = false;\n        try {\n          const u = new URL('b', 'http://a');\n          u.pathname = 'c%20d';\n          workingURL = (u.href === 'http://a/c%20d');\n        } catch (e) {\n          // silently fail\n        }\n      }\n      if (!baseURI) {\n        baseURI = document.baseURI || window.location.href;\n      }\n      if (workingURL) {\n        return (new URL(url, baseURI)).href;\n      }\n      // Fallback to creating an anchor into a disconnected document.\n      if (!resolveDoc) {\n        resolveDoc = document.implementation.createHTMLDocument('temp');\n        resolveDoc.base = resolveDoc.createElement('base');\n        resolveDoc.head.appendChild(resolveDoc.base);\n        resolveDoc.anchor = resolveDoc.createElement('a');\n        resolveDoc.body.appendChild(resolveDoc.anchor);\n      }\n      resolveDoc.base.href = baseURI;\n      resolveDoc.anchor.href = url;\n      return resolveDoc.anchor.href || url;\n\n    }\n\n    /**\n     * Resolves any relative URL's in the given CSS text against the provided\n     * `ownerDocument`'s `baseURI`.\n     *\n     * @memberof Polymer.ResolveUrl\n     * @param {string} cssText CSS text to process\n     * @param {string} baseURI Base URI to resolve the URL against\n     * @return {string} Processed CSS text with resolved URL's\n     */\n    function resolveCss(cssText, baseURI) {\n      return cssText.replace(CSS_URL_RX, function(m, pre, url, post) {\n        return pre + '\\'' +\n          resolveUrl(url.replace(/[\"']/g, ''), baseURI) +\n          '\\'' + post;\n      });\n    }\n\n    /**\n     * Returns a path from a given `url`. The path includes the trailing\n     * `/` from the url.\n     *\n     * @memberof Polymer.ResolveUrl\n     * @param {string} url Input URL to transform\n     * @return {string} resolved path\n     */\n    function pathFromUrl(url) {\n      return url.substring(0, url.lastIndexOf('/') + 1);\n    }\n\n    /**\n     * Module with utilities for resolving relative URL's.\n     *\n     * @namespace\n     * @memberof Polymer\n     * @summary Module with utilities for resolving relative URL's.\n     */\n    Polymer.ResolveUrl = {\n      resolveCss: resolveCss,\n      resolveUrl: resolveUrl,\n      pathFromUrl: pathFromUrl\n    };\n\n  })();\n\n\n\n\n\n// WEBPACK FOOTER //\n// ./bower_components/polymer/lib/utils/resolve-url.html","/*__wc__loader*/\n\n\n    (function(document) {\n      var _htmlStr = \"\\n\\n\\n\\n\\n\\n\\n\\n\\n\";\n      if (document.head) {\n        var el = document.head;\n        var div = document.createElement('div');\n        div.innerHTML = _htmlStr;\n        while (div.children.length > 0) {\n          el.appendChild(div.children[0]);\n        }\n      } else {\n        document.write(_htmlStr);\n      }\n    })(document);\n    \n\n\n    (function(document) {\n      var _htmlStr = \"\";\n      if (document.body) {\n        var el = document.body;\n        var div = document.createElement('div');\n        div.innerHTML = _htmlStr;\n        while (div.children.length > 0) {\n          el.appendChild(div.children[0]);\n        }\n      } else {\n        document.write(_htmlStr);\n      }\n    })(document);\n    \n\nrequire('../utils/boot.html');\n\nrequire('../utils/mixin.html');\n\nrequire('../utils/case-map.html');\n\nrequire('../utils/style-gather.html');\n\nrequire('../utils/resolve-url.html');\n\nrequire('../elements/dom-module.html');\n\nrequire('./property-effects.html');\n\n\n(function() {\n  'use strict';\n  /**\n   * @typedef Object<string, {\n   *   value: *,\n   *   type: (Function | undefined),\n   *   readOnly: (boolean | undefined),\n   *   computed: (string | undefined),\n   *   reflectToAttribute: (boolean | undefined),\n   *   notify: (boolean | undefined),\n   *   observer: (string | undefined)\n   * }>)\n   */\n  let PolymerElementProperties; // eslint-disable-line no-unused-vars\n\n  /** @record */\n  let PolymerElementConstructor = function(){}; // eslint-disable-line no-unused-vars\n  /** @type {(string | undefined)} */\n  PolymerElementConstructor.is;\n  /** @type {(string | undefined)} */\n  PolymerElementConstructor.extends;\n  /** @type {(!PolymerElementProperties | undefined)} */\n  PolymerElementConstructor.properties;\n  /** @type {(!Array<string> | undefined)} */\n  PolymerElementConstructor.observers;\n  /** @type {(!HTMLTemplateElement | string | undefined)} */\n  PolymerElementConstructor.template;\n\n  /**\n   * Element class mixin that provides the core API for Polymer's meta-programming\n   * features including template stamping, data-binding, attribute deserialization,\n   * and property change observation.\n   *\n   * Subclassers may provide the following static getters to return metadata\n   * used to configure Polymer's features for the class:\n   *\n   * - `static get is()`: When the template is provided via a `dom-module`,\n   *   users should return the `dom-module` id from a static `is` getter.  If\n   *   no template is needed or the template is provided directly via the\n   *   `template` getter, there is no need to define `is` for the element.\n   *\n   * - `static get template()`: Users may provide the template directly (as\n   *   opposed to via `dom-module`) by implementing a static `template` getter.\n   *   The getter may return an `HTMLTemplateElement` or a string, which will\n   *   automatically be parsed into a template.\n   *\n   * - `static get properties()`: Should return an object describing\n   *   property-related metadata used by Polymer features (key: property name\n   *   value: object containing property metadata). Valid keys in per-property\n   *   metadata include:\n   *   - `type` (String|Number|Object|Array|...): Used by\n   *     `attributeChangedCallback` to determine how string-based attributes\n   *     are deserialized to JavaScript property values.\n   *   - `notify` (boolean): Causes a change in the property to fire a\n   *     non-bubbling event called `<property>-changed`. Elements that have\n   *     enabled two-way binding to the property use this event to observe changes.\n   *   - `readOnly` (boolean): Creates a getter for the property, but no setter.\n   *     To set a read-only property, use the private setter method\n   *     `_setProperty(property, value)`.\n   *   - `observer` (string): Observer method name that will be called when\n   *     the property changes. The arguments of the method are\n   *     `(value, previousValue)`.\n   *   - `computed` (string): String describing method and dependent properties\n   *     for computing the value of this property (e.g. `'computeFoo(bar, zot)'`).\n   *     Computed properties are read-only by default and can only be changed\n   *     via the return value of the computing method.\n   *\n   * - `static get observers()`: Array of strings describing multi-property\n   *   observer methods and their dependent properties (e.g.\n   *   `'observeABC(a, b, c)'`).\n   *\n   * The base class provides default implementations for the following standard\n   * custom element lifecycle callbacks; users may override these, but should\n   * call the super method to ensure\n   * - `constructor`: Run when the element is created or upgraded\n   * - `connectedCallback`: Run each time the element is connected to the\n   *   document\n   * - `disconnectedCallback`: Run each time the element is disconnected from\n   *   the document\n   * - `attributeChangedCallback`: Run each time an attribute in\n   *   `observedAttributes` is set or removed (note: this element's default\n   *   `observedAttributes` implementation will automatically return an array\n   *   of dash-cased attributes based on `properties`)\n   *\n   * @polymerMixin\n   * @mixes Polymer.PropertyEffects\n   * @memberof Polymer\n   * @property rootPath {string} Set to the value of `Polymer.rootPath`,\n   *   which defaults to the main document path\n   * @property importPath {string} Set to the value of the class's static\n   *   `importPath` property, which defaults to the path of this element's\n   *   `dom-module` (when `is` is used), but can be overridden for other\n   *   import strategies.\n   * @summary Element class mixin that provides the core API for Polymer's\n   * meta-programming features.\n   */\n  Polymer.ElementMixin = Polymer.dedupingMixin(function(base) {\n\n    const polymerElementBase = Polymer.PropertyEffects(base);\n\n    let caseMap = Polymer.CaseMap;\n\n    /**\n     * Returns the `properties` object specifically on `klass`. Use for:\n     * (1) super chain mixes togther to make `propertiesForClass` which is\n     * then used to make `observedAttributes`.\n     * (2) properties effects and observers are created from it at `finalize` time.\n     * @param {HTMLElement} klass\n     * @private\n     */\n    function ownPropertiesForClass(klass) {\n      if (!klass.hasOwnProperty(\n        goog.reflect.objectProperty('__ownProperties', klass))) {\n        klass.__ownProperties =\n          klass.hasOwnProperty(goog.reflect.objectProperty('properties', klass)) ?\n          klass.properties : {};\n      }\n      return klass.__ownProperties;\n    }\n\n    /**\n     * Returns the `observers` array specifically on `klass`. Use for\n     * setting up observers.\n     * @param {HTMLElement} klass\n     * @private\n     */\n    function ownObserversForClass(klass) {\n      if (!klass.hasOwnProperty(\n        goog.reflect.objectProperty('__ownObservers', klass))) {\n        klass.__ownObservers =\n          klass.hasOwnProperty(goog.reflect.objectProperty('observers', klass)) ?\n          klass.observers : [];\n      }\n      return klass.__ownObservers;\n    }\n\n    /**\n     * Mixes `props` into `flattenedProps` but upgrades shorthand type\n     * syntax to { type: Type}.\n     * @param {Object} flattenedProps\n     * @param {Object} props\n     * @private\n     */\n    function flattenProperties(flattenedProps, props) {\n      for (let p in props) {\n        let o = props[p];\n        if (typeof o == 'function') {\n          o = { type: o };\n        }\n        flattenedProps[p] = o;\n      }\n      return flattenedProps;\n    }\n\n    /**\n     * Returns a flattened list of properties mixed together from the chain of all\n     * constructor's `config.properties`. This list is used to create\n     * (1) observedAttributes,\n     * (2) class property default values\n     * @param {HTMLElement} klass\n     * @return {PolymerElementProperties}\n     * @private\n     */\n    function propertiesForClass(klass) {\n      if (!klass.hasOwnProperty(\n        goog.reflect.objectProperty('__classProperties', klass))) {\n        klass.__classProperties =\n        flattenProperties({}, ownPropertiesForClass(klass));\n        let superCtor = Object.getPrototypeOf(klass.prototype).constructor;\n        if (superCtor.prototype instanceof PolymerElement) {\n          klass.__classProperties = Object.assign(\n            Object.create(propertiesForClass(superCtor)),\n            klass.__classProperties);\n        }\n      }\n      return klass.__classProperties;\n    }\n\n    /**\n     * Returns a list of properties with default values.\n     * This list is created as an optimization since it is a subset of\n     * the list returned from `propertiesForClass`.\n     * This list is used in `_initializeProperties` to set property defaults.\n     * @param {HTMLElement} klass\n     * @return {PolymerElementProperties}\n     * @private\n     */\n    function propertyDefaultsForClass(klass) {\n      if (!klass.hasOwnProperty(\n        goog.reflect.objectProperty('__classPropertyDefaults', klass))) {\n        klass.__classPropertyDefaults = null;\n        let props = propertiesForClass(klass);\n        for (let p in props) {\n          let info = props[p];\n          if ('value' in info) {\n            klass.__classPropertyDefaults = klass.__classPropertyDefaults || {};\n            klass.__classPropertyDefaults[p] = info;\n          }\n        }\n      }\n      return klass.__classPropertyDefaults;\n    }\n\n    /**\n     * Returns true if a `klass` has finalized. Called in `ElementClass.finalize()`\n     * @param {HTMLElement} klass\n     * @private\n     */\n    function hasClassFinalized(klass) {\n      return klass.hasOwnProperty(goog.reflect.objectProperty('__finalized', klass));\n    }\n\n    /**\n     * Called by `ElementClass.finalize()`. Ensures this `klass` and\n     * *all superclasses* are finalized by traversing the prototype chain\n     * and calling `klass.finalize()`.\n     * @param {HTMLElement} klass\n     * @private\n     */\n    function finalizeClassAndSuper(klass) {\n      let proto = klass.prototype;\n      let superCtor = Object.getPrototypeOf(proto).constructor;\n      if (superCtor.prototype instanceof PolymerElement) {\n        superCtor.finalize();\n      }\n      finalizeClass(klass);\n    }\n\n    /**\n     * Configures a `klass` based on a staic `klass.config` object and\n     * a `template`. This includes creating accessors and effects\n     * for properties in `config` and the `template` as well as preparing the\n     * `template` for stamping.\n     */\n    function finalizeClass(klass) {\n      klass.__finalized = true;\n      let proto = klass.prototype;\n      if (klass.hasOwnProperty(\n        goog.reflect.objectProperty('is', klass)) && klass.is) {\n        Polymer.telemetry.register(proto);\n      }\n      let props = ownPropertiesForClass(klass);\n      if (props) {\n        finalizeProperties(proto, props);\n      }\n      let observers = ownObserversForClass(klass);\n      if (observers) {\n        finalizeObservers(proto, observers, props);\n      }\n      // note: create \"working\" template that is finalized at instance time\n      let template = klass.template;\n      if (template) {\n        if (typeof template === 'string') {\n          let t = document.createElement('template');\n          t.innerHTML = template;\n          template = t;\n        } else {\n          template = template.cloneNode(true);\n        }\n        proto._template = template;\n      }\n    }\n\n    /**\n     * Configures a `proto` based on a `properties` object.\n     * Leverages `PropertyEffects` to create property accessors and effects\n     * supporting, observers, reflecting to attributes, change notification,\n     * computed properties, and read only properties.\n     * @param {HTMLElement} proto\n     * @param {Object} properties\n     * @private\n     */\n    function finalizeProperties(proto, properties) {\n      for (let p in properties) {\n        createPropertyFromConfig(proto, p, properties[p], properties);\n      }\n    }\n\n    /**\n     * Configures a `proto` based on a `observers` array.\n     * Leverages `PropertyEffects` to create observers.\n     * @param {HTMLElement} proto\n     * @param {Array} observers\n     * @private\n     */\n    function finalizeObservers(proto, observers, dynamicProperties) {\n      for (let i=0; i < observers.length; i++) {\n        proto._createMethodObserver(observers[i], dynamicProperties);\n      }\n    }\n\n    /**\n     * Creates effects for a property.\n     *\n     * Note, once a property has been set to\n     * `readOnly`, `computed`, `reflectToAttribute`, or `notify`\n     * these values may not be changed. For example, a subclass cannot\n     * alter these settings. However, additional `observers` may be added\n     * by subclasses.\n     *\n     * The info object should may contain property metadata as follows:\n     *\n     * * `type`: {function} type to which an attribute matching the property\n     * is deserialized. Note the property is camel-cased from a dash-cased\n     * attribute. For example, 'foo-bar' attribute is dersialized to a\n     * property named 'fooBar'.\n     *\n     * * `readOnly`: {boolean} creates a readOnly property and\n     * makes a private setter for the private of the form '_setFoo' for a\n     * property 'foo',\n     *\n     * * `computed`: {string} creates a computed property. A computed property\n     * also automatically is set to `readOnly: true`. The value is calculated\n     * by running a method and arguments parsed from the given string. For\n     * example 'compute(foo)' will compute a given property when the\n     * 'foo' property changes by executing the 'compute' method. This method\n     * must return the computed value.\n     *\n     * * `reflectToAttriute`: {boolean} If true, the property value is reflected\n     * to an attribute of the same name. Note, the attribute is dash-cased\n     * so a property named 'fooBar' is reflected as 'foo-bar'.\n     *\n     * * `notify`: {boolean} sends a non-bubbling notification event when\n     * the property changes. For example, a property named 'foo' sends an\n     * event named 'foo-changed' with `event.detail` set to the value of\n     * the property.\n     *\n     * * observer: {string} name of a method that runs when the property\n     * changes. The arguments of the method are (value, previousValue).\n     *\n     * Note: Users may want control over modifying property\n     * effects via subclassing. For example, a user might want to make a\n     * reflectToAttribute property not do so in a subclass. We've chosen to\n     * disable this because it leads to additional complication.\n     * For example, a readOnly effect generates a special setter. If a subclass\n     * disables the effect, the setter would fail unexpectedly.\n     * Based on feedback, we may want to try to make effects more malleable\n     * and/or provide an advanced api for manipulating them.\n     * Also consider adding warnings when an effect cannot be changed.\n     *\n     * @param {HTMLElement} proto\n     * @param {string} name Name of the property.\n     * @param {object} info Info object from which to create property effects.\n     * Supported keys:\n     * @param {object} allProps Flattened map of all properties defined in this\n     *   element (including inherited properties)\n     * @private\n     */\n    function createPropertyFromConfig(proto, name, info, allProps) {\n      // computed forces readOnly...\n      if (info.computed) {\n        info.readOnly = true;\n      }\n      // Note, since all computed properties are readOnly, this prevents\n      // adding additional computed property effects (which leads to a confusing\n      // setup where multiple triggers for setting a property)\n      // While we do have `hasComputedEffect` this is set on the property's\n      // dependencies rather than itself.\n      if (info.computed  && !proto._hasReadOnlyEffect(name)) {\n        proto._createComputedProperty(name, info.computed, allProps);\n      }\n      if (info.readOnly && !proto._hasReadOnlyEffect(name)) {\n        proto._createReadOnlyProperty(name, !info.computed);\n      }\n      if (info.reflectToAttribute && !proto._hasReflectEffect(name)) {\n        proto._createReflectedProperty(name);\n      }\n      if (info.notify && !proto._hasNotifyEffect(name)) {\n        proto._createNotifyingProperty(name);\n      }\n      // always add observer\n      if (info.observer) {\n        proto._createPropertyObserver(name, info.observer, allProps[info.observer]);\n      }\n    }\n\n    /**\n     * Configures an element `proto` to function with a given `template`.\n     * The element name `is` and extends `ext` must be specified for ShadyCSS\n     * style scoping.\n     * @param {HTMLElement} proto\n     * @param {HTMLTemplateElement} template\n     * @param {string} baseURI URL against which to resolve urls in\n     * style element cssText.\n     * @param {string} is\n     * @param {string} ext\n     * @private\n     */\n    function finalizeTemplate(proto, template, baseURI, is, ext) {\n      // support `include=\"module-name\"`\n      let cssText =\n        Polymer.StyleGather.cssFromTemplate(template, baseURI) +\n        Polymer.StyleGather.cssFromModuleImports(is);\n      if (cssText) {\n        let style = document.createElement('style');\n        style.textContent = cssText;\n        template.content.insertBefore(style, template.content.firstChild);\n      }\n      if (window.ShadyCSS) {\n        window.ShadyCSS.prepareTemplate(template, is, ext);\n      }\n      proto._bindTemplate(template, propertiesForClass(proto.constructor));\n    }\n\n    /**\n     * @polymerMixinClass\n     * @unrestricted\n     */\n    class PolymerElement extends polymerElementBase {\n\n      /**\n       * Standard Custom Elements V1 API.  The default implementation returns\n       * a list of dash-cased attributes based on a flattening of all properties\n       * declared in `static get properties()` for this element and any\n       * superclasses.\n       *\n       * @return {Array} Observed attribute list\n       */\n      static get observedAttributes() {\n        if (!this.hasOwnProperty(goog.reflect.objectProperty('__observedAttributes', this))) {\n          let list = [];\n          let properties = propertiesForClass(this);\n          for (let prop in properties) {\n            list.push(Polymer.CaseMap.camelToDashCase(prop));\n          }\n          this.__observedAttributes = list;\n        }\n        return this.__observedAttributes;\n      }\n\n      /**\n       * Called automatically when the first element instance is created to\n       * ensure that class finalization work has been completed.\n       * May be called by users to eagerly perform class finalization work\n       * prior to the creation of the first element instance.\n       *\n       * Class finalization work generally includes meta-programming such as\n       * creating property accessors and any property effect metadata needed for\n       * the features used.\n       *\n       * @public\n       */\n      static finalize() {\n        if (!hasClassFinalized(this)) {\n          finalizeClassAndSuper(this);\n        }\n      }\n\n      /**\n       * Returns the template stamped into this element's shadow root.\n       *\n       * If a `static get is()` getter is defined, the default implementation\n       * will return the first `<template>` in a `dom-module` whose `id`\n       * matches this element's `is`.\n       *\n       * Users may override this getter to return an arbitrary template\n       * (in which case the `is` getter is unnecessary). The template returned\n       * may be either an `HTMLTemplateElement` or a string that will be\n       * automatically parsed into a template.\n       *\n       * Note that when subclassing, if the super class overrode the default\n       * implementation and the subclass would like to provide an alternate\n       * template via a `dom-module`, it should override this getter and\n       * return `Polymer.DomModule.import(this.is, 'template')`.\n       *\n       * If a subclass would like to modify the super class template, it should\n       * clone it rather than modify it in place.  If the getter does expensive\n       * work such as cloning/modifying a template, it should memoize the\n       * template for maximum performance:\n       *\n       *   let memoizedTemplate;\n       *   class MySubClass extends MySuperClass {\n       *     static get template() {\n       *       if (!memoizedTemplate) {\n       *         memoizedTemplate = super.template.cloneNode(true);\n       *         let subContent = document.createElement('div');\n       *         subContent.textContent = 'This came from MySubClass';\n       *         memoizedTemplate.content.appendChild(subContent);\n       *       }\n       *       return memoizedTemplate;\n       *     }\n       *   }\n       *\n       * @returns {HTMLTemplateElement|string}\n       */\n      static get template() {\n        if (!this.hasOwnProperty(goog.reflect.objectProperty('_template', this))) {\n          this._template = Polymer.DomModule.import(this.is, 'template') ||\n            // note: implemented so a subclass can retrieve the super\n            // template; call the super impl this way so that `this` points\n            // to the superclass.\n            Object.getPrototypeOf(this.prototype).constructor.template;\n        }\n        return this._template;\n      }\n\n      /**\n       * Path matching the url from which the element was imported.\n       * This path is used to resolve url's in template style cssText.\n       * The `importPath` property is also set on element instances and can be\n       * used to create bindings relative to the import path.\n       * Defaults to the path matching the url containing a `dom-module` element\n       * matching this element's static `is` property.\n       * Note, this path should contain a trailing `/`.\n       *\n       * @returns {string}\n       */\n      static get importPath() {\n        if (!this.hasOwnProperty(goog.reflect.objectProperty('_importPath', this))) {\n            const module = Polymer.DomModule.import(this.is);\n            this._importPath = module ? module.assetpath : '' ||\n            Object.getPrototypeOf(this.prototype).constructor.importPath;\n        }\n        return this._importPath;\n      }\n\n      constructor() {\n        super();\n        Polymer.telemetry.instanceCount++;\n        // Stamp template\n        if (this._template) {\n          this.root = this._stampTemplate(this._template);\n        } else {\n          this.root = this;\n        }\n      }\n\n      /**\n       * Overrides the default `Polymer.PropertyAccessors` to ensure class\n       * metaprogramming related to property accessors and effects has\n       * completed (calls `finalize`).\n       *\n       * It also initializes any property defaults provided via `value` in\n       * `properties` metadata.\n       *\n       * @override\n       */\n      _initializeProperties() {\n        this.constructor.finalize();\n        const importPath = this.constructor.importPath;\n        // note: finalize template when we have access to `localName` to\n        // avoid dependence on `is` for polyfilling styling.\n        if (this._template && !this._template.__polymerFinalized) {\n          this._template.__polymerFinalized = true;\n          const baseURI =\n            importPath ? Polymer.ResolveUrl.resolveUrl(importPath) : '';\n          finalizeTemplate(this.__proto__, this._template, baseURI,\n            this.localName);\n        }\n        super._initializeProperties();\n        // set path defaults\n        this.rootPath = Polymer.rootPath;\n        this.importPath = importPath;\n        // apply property defaults...\n        let p$ = propertyDefaultsForClass(this.constructor);\n        if (!p$) {\n          return;\n        }\n        for (let p in p$) {\n          let info = p$[p];\n          if (!this._isPropertyPending(p)) {\n            let value = typeof info.value == 'function' ?\n              info.value.call(this) :\n              info.value;\n            if (this._hasPropertyEffect(p)) {\n              this._setProperty(p, value)\n            } else {\n              this[p] = value;\n            }\n          }\n        }\n      }\n\n      /**\n       * Provides a default implementation of the standard Custom Elements\n       * `connectedCallback`.\n       *\n       * The default implementation enables the property effects system and\n       * flushes any pending properties, and updates shimmed CSS properties\n       * when using the ShadyCSS scoping/custom properties polyfill.\n       *\n       * @override\n       */\n      connectedCallback() {\n        if (window.ShadyCSS) {\n          window.ShadyCSS.styleElement(this);\n        }\n        this._flushProperties();\n      }\n\n      /**\n       * Provides a default implementation of the standard Custom Elements\n       * `disconnectedCallback`.\n       *\n       * @override\n       */\n      disconnectedCallback() {}\n\n      /**\n       * Implements `PropertyEffects`'s `_readyClients` call. Attaches\n       * element dom by calling `_attachDom` with the dom stamped from the\n       * element's template via `_stampTemplate`. Note that this allows\n       * client dom to be attached to the element prior to any observers\n       * running.\n       *\n       * @override\n       */\n      _readyClients() {\n        super._readyClients();\n        if (this._template) {\n          this.root = this._attachDom(this.root);\n        }\n      }\n\n\n      /**\n       * Attaches an element's stamped dom to itself. By default,\n       * this method creates a `shadowRoot` and adds the dom to it.\n       * However, this method may be overridden to allow an element\n       * to put its dom in another location.\n       *\n       * @method _attachDom\n       * @throws {Error}\n       * @suppress {missingReturn}\n       * @param {NodeList} dom to attach to the element.\n       * @return {Node} node to which the dom has been attached.\n       */\n      _attachDom(dom) {\n        if (this.attachShadow) {\n          if (dom) {\n            if (!this.shadowRoot) {\n              this.attachShadow({mode: 'open'});\n            }\n            this.shadowRoot.appendChild(dom);\n            return this.shadowRoot;\n          }\n        } else {\n          throw new Error('ShadowDOM not available. ' +\n            // TODO(sorvell): move to compile-time conditional when supported\n          'Polymer.Element can create dom as children instead of in ' +\n          'ShadowDOM by setting `this.root = this;\\` before \\`ready\\`.');\n        }\n      }\n\n      /**\n       * Provides a default implementation of the standard Custom Elements\n       * `attributeChangedCallback`.\n       *\n       * By default, attributes declared in `properties` metadata are\n       * deserialized using their `type` information to properties of the\n       * same name.  \"Dash-cased\" attributes are deserialzed to \"camelCase\"\n       * properties.\n       *\n       * @override\n       */\n      attributeChangedCallback(name, old, value) {\n        if (old !== value) {\n          let property = caseMap.dashToCamelCase(name);\n          let type = propertiesForClass(this.constructor)[property].type;\n          if (!this._hasReadOnlyEffect(property)) {\n            this._attributeToProperty(name, value, type);\n          }\n        }\n      }\n\n      /**\n       * When using the ShadyCSS scoping and custom property shim, causes all\n       * shimmed styles in this element (and its subtree) to be updated\n       * based on current custom property values.\n       *\n       * The optional parameter overrides inline custom property styles with an\n       * object of properties where the keys are CSS properties, and the values\n       * are strings.\n       *\n       * Example: `this.updateStyles({'--color': 'blue'})`\n       *\n       * These properties are retained unless a value of `null` is set.\n       *\n       * @param {Object=} properties Bag of custom property key/values to\n       *   apply to this element.\n       */\n      updateStyles(properties) {\n        if (window.ShadyCSS) {\n          window.ShadyCSS.styleSubtree(this, properties);\n        }\n      }\n\n      /**\n       * Rewrites a given URL relative to a base URL. The base URL defaults to\n       * the original location of the document containing the `dom-module` for\n       * this element. This method will return the same URL before and after\n       * bundling.\n       *\n       * @param {string} url URL to resolve.\n       * @param {string=} base Optional base URL to resolve against, defaults\n       * to the element's `importPath`\n       * @return {string} Rewritten URL relative to base\n       */\n      resolveUrl(url, base) {\n        if (!base && this.importPath) {\n          base = Polymer.ResolveUrl.resolveUrl(this.importPath);\n        }\n        return Polymer.ResolveUrl.resolveUrl(url, base);\n      }\n\n    }\n\n    return PolymerElement;\n  });\n\n  /**\n   * Provides basic tracking of element definitions (registrations) and\n   * instance counts.\n   *\n   * @namespace\n   */\n  Polymer.telemetry = {\n    /**\n     * Total number of Polymer element instances created.\n     * @type {number}\n     */\n    instanceCount: 0,\n    /**\n     * Array of Polymer element classes that have been finalized.\n     * @type {Array<Polymer.Element>}\n     */\n    registrations: [],\n    /**\n     * @private\n     */\n    _regLog: function(prototype) {\n      console.log('[' + prototype.is + ']: registered')\n    },\n    /**\n     * Registers a class prototype for telemetry purposes.\n     * @protected\n     */\n    register: function(prototype) {\n      this.registrations.push(prototype);\n      Polymer.log && this._regLog(prototype);\n    },\n    /**\n     * Logs all elements registered with an `is` to the console.\n     * @public\n     */\n    dumpRegistrations: function() {\n      this.registrations.forEach(this._regLog);\n    }\n  };\n\n  /**\n   * When using the ShadyCSS scoping and custom property shim, causes all\n   * shimmed `styles` (via `custom-style`) in the document (and its subtree)\n   * to be updated based on current custom property values.\n   *\n   * The optional parameter overrides inline custom property styles with an\n   * object of properties where the keys are CSS properties, and the values\n   * are strings.\n   *\n   * Example: `Polymer.updateStyles({'--color': 'blue'})`\n   *\n   * These properties are retained unless a value of `null` is set.\n   *\n   * @param {Object=} properties Bag of custom property key/values to\n   *   apply to the document.\n   */\n  Polymer.updateStyles = function(props) {\n    if (window.ShadyCSS) {\n      window.ShadyCSS.styleDocument(props);\n    }\n  };\n\n  /**\n   * Globally settable property that is automatically assigned to\n   * `Polymer.ElementMixin` instances, useful for binding in templates to\n   * make URL's relative to an application's root.  Defaults to the main\n   * document URL, but can be overridden by users.  It may be useful to set\n   * `Polymer.rootPath` to provide a stable application mount path when\n   * using client side routing.\n   *\n   * @memberof Polymer\n   */\n  Polymer.rootPath = Polymer.rootPath ||\n    Polymer.ResolveUrl.pathFromUrl(document.baseURI || window.location.href);\n\n})();\n\n\n\n\n// WEBPACK FOOTER //\n// ./bower_components/polymer/lib/mixins/element-mixin.html","/*__wc__loader*/\n\n\n    (function(document) {\n      var _htmlStr = \"\\n\\n\\n\";\n      if (document.head) {\n        var el = document.head;\n        var div = document.createElement('div');\n        div.innerHTML = _htmlStr;\n        while (div.children.length > 0) {\n          el.appendChild(div.children[0]);\n        }\n      } else {\n        document.write(_htmlStr);\n      }\n    })(document);\n    \n\n\n    (function(document) {\n      var _htmlStr = \"\";\n      if (document.body) {\n        var el = document.body;\n        var div = document.createElement('div');\n        div.innerHTML = _htmlStr;\n        while (div.children.length > 0) {\n          el.appendChild(div.children[0]);\n        }\n      } else {\n        document.write(_htmlStr);\n      }\n    })(document);\n    \n\nrequire('../utils/boot.html');\n\nrequire('../utils/resolve-url.html');\n\n\n(function() {\n  'use strict';\n\n  let modules = {};\n  let lcModules = {};\n  function findModule(id) {\n    return modules[id] || lcModules[id.toLowerCase()];\n  }\n\n  function styleOutsideTemplateCheck(inst) {\n    if (inst.querySelector('style')) {\n      console.warn('dom-module %s has style outside template', inst.id);\n    }\n  }\n\n  /**\n   * The `dom-module` element registers the dom it contains to the name given\n   * by the module's id attribute. It provides a unified database of dom\n   * accessible via its static `import` API.\n   *\n   * A key use case of `dom-module` is for providing custom element `<template>`s\n   * via HTML imports that are parsed by the native HTML parser, that can be\n   * relocated during a bundling pass and still looked up by `id`.\n   *\n   * Example:\n   *\n   *     <dom-module id=\"foo\">\n   *       <img src=\"stuff.png\">\n   *     </dom-module>\n   *\n   * Then in code in some other location that cannot access the dom-module above\n   *\n   *     let img = document.createElement('dom-module').import('foo', 'img');\n   *\n   * @extends HTMLElement\n   * @memberof Polymer\n   * @summary Custom element that provides a registry of relocatable DOM content\n   *   by `id` that is agnostic to bundling.\n   */\n  class DomModule extends HTMLElement {\n\n    static get observedAttributes() { return ['id'] }\n\n    /**\n     * Retrieves the dom specified by `selector` in the module specified by\n     * `id`. For example, this.import('foo', 'img');\n     * @method register\n     * @param {string} id\n     * @param {string=} selector\n     * @return {Element} Returns the dom which matches `selector` in the module\n     * at the specified `id`.\n     */\n    static import(id, selector) {\n      if (id) {\n        let m = findModule(id);\n        if (m && selector) {\n          return m.querySelector(selector);\n        }\n        return m;\n      }\n      return null;\n    }\n\n    attributeChangedCallback(name, old, value) {\n      if (old !== value) {\n        this.register();\n      }\n    }\n\n    /**\n     * The absolute URL of the original location of this `dom-module`.\n     *\n     * This value will differ from this element's `ownerDocument` in the\n     * following ways:\n     * - Takes into account any `assetpath` attribute added during bundling\n     *   to indicate the original location relative to the bundled location\n     * - Uses the HTMLImports polyfill's `importForElement` API to ensure\n     *   the path is relative to the import document's location since\n     *   `ownerDocument` is not currently polyfilled\n     */\n    get assetpath() {\n      // Don't override existing assetpath.\n      if (!this.__assetpath) {\n        // note: assetpath set via an attribute must be relative to this\n        // element's location; accomodate polyfilled HTMLImports\n        const owner = window.HTMLImports && HTMLImports.importForElement ?\n          HTMLImports.importForElement(this) || document : this.ownerDocument;\n        const url = Polymer.ResolveUrl.resolveUrl(\n          this.getAttribute('assetpath') || '', owner.baseURI);\n        this.__assetpath = Polymer.ResolveUrl.pathFromUrl(url);\n      }\n      return this.__assetpath;\n    }\n\n    /**\n     * Registers the dom-module at a given id. This method should only be called\n     * when a dom-module is imperatively created. For\n     * example, `document.createElement('dom-module').register('foo')`.\n     * @method register\n     * @param {string=} id The id at which to register the dom-module.\n     */\n    register(id) {\n      id = id || this.id;\n      if (id) {\n        this.id = id;\n        // store id separate from lowercased id so that\n        // in all cases mixedCase id will stored distinctly\n        // and lowercase version is a fallback\n        modules[id] = this;\n        lcModules[id.toLowerCase()] = this;\n        styleOutsideTemplateCheck(this);\n      }\n    }\n  }\n\n  DomModule.prototype['modules'] = modules;\n\n  customElements.define('dom-module', DomModule);\n\n  // export\n  Polymer.DomModule = DomModule;\n\n})();\n\n\n\n\n// WEBPACK FOOTER //\n// ./bower_components/polymer/lib/elements/dom-module.html","/*__wc__loader*/\n\n\n    (function(document) {\n      var _htmlStr = \"\\n\\n\\n\\n\\n\\n\";\n      if (document.head) {\n        var el = document.head;\n        var div = document.createElement('div');\n        div.innerHTML = _htmlStr;\n        while (div.children.length > 0) {\n          el.appendChild(div.children[0]);\n        }\n      } else {\n        document.write(_htmlStr);\n      }\n    })(document);\n    \n\n\n    (function(document) {\n      var _htmlStr = \"\";\n      if (document.body) {\n        var el = document.body;\n        var div = document.createElement('div');\n        div.innerHTML = _htmlStr;\n        while (div.children.length > 0) {\n          el.appendChild(div.children[0]);\n        }\n      } else {\n        document.write(_htmlStr);\n      }\n    })(document);\n    \n\nrequire('../utils/boot.html');\n\nrequire('../utils/mixin.html');\n\nrequire('../utils/case-map.html');\n\nrequire('../utils/async.html');\n\n\n(function() {\n\n  'use strict';\n\n  let caseMap = Polymer.CaseMap;\n\n  let microtask = Polymer.Async.microTask;\n\n  // Save map of native properties; this forms a blacklist or properties\n  // that won't have their values \"saved\" by `saveAccessorValue`, since\n  // reading from an HTMLElement accessor from the context of a prototype throws\n  const nativeProperties = {};\n  let proto = HTMLElement.prototype;\n  while (proto) {\n    let props = Object.getOwnPropertyNames(proto);\n    for (let i=0; i<props.length; i++) {\n      nativeProperties[props[i]] = true;\n    }\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  /**\n   * Used to save the value of a property that will be overridden with\n   * an accessor. If the `model` is a prototype, the values will be saved\n   * in `__dataProto`, and it's up to the user (or downstream mixin) to\n   * decide how/when to set these values back into the accessors.\n   * If `model` is already an instance (it has a `__data` property), then\n   * the value will be set as a pending property, meaning the user should\n   * call `_invalidateProperties` or `_flushProperties` to take effect\n   *\n   * @param {Object} model Prototype or instance\n   * @param {string} property Name of property\n   * @private\n   */\n  function saveAccessorValue(model, property) {\n    // Don't read/store value for any native properties since they could throw\n    if (!nativeProperties[property]) {\n      let value = model[property];\n      if (value !== undefined) {\n        if (model.__data) {\n          // Adding accessor to instance; update the property\n          // It is the user's responsibility to call _flushProperties\n          model._setPendingProperty(property, value);\n        } else {\n          // Adding accessor to proto; save proto's value for instance-time use\n          if (!model.__dataProto) {\n            model.__dataProto = {};\n          } else if (!model.hasOwnProperty(goog.reflect.objectProperty('__dataProto', model))) {\n            model.__dataProto = Object.create(model.__dataProto);\n          }\n          model.__dataProto[property] = value;\n        }\n      }\n    }\n  }\n\n  /**\n   * Element class mixin that provides basic meta-programming for creating one\n   * or more property accessors (getter/setter pair) that enqueue an async\n   * (batched) `_propertiesChanged` callback.\n   *\n   * For basic usage of this mixin, simply declare attributes to observe via\n   * the standard `static get observedAttributes()`, implement `_propertiesChanged`\n   * on the class, and then call `MyClass.createPropertiesForAttributes()` once\n   * on the class to generate property accessors for each observed attribute\n   * prior to instancing.  Any `observedAttributes` will automatically be\n   * deserialized via `attributeChangedCallback` and set to the associated\n   * property using `dash-case`-to-`camelCase` convention.\n   *\n   * @polymerMixin\n   * @memberof Polymer\n   * @summary Element class mixin for reacting to property changes from\n   *   generated property accessors.\n   */\n  Polymer.PropertyAccessors = Polymer.dedupingMixin(function(superClass) {\n\n    return class PropertyAccessors extends superClass {\n\n      /**\n       * Generates property accessors for all attributes in the standard\n       * static `observedAttributes` array.\n       *\n       * Attribute names are mapped to property names using the `dash-case` to\n       * `camelCase` convention\n       *\n       */\n      static createPropertiesForAttributes() {\n        let a$ = this.observedAttributes;\n        for (let i=0; i < a$.length; i++) {\n          this.prototype._createPropertyAccessor(caseMap.dashToCamelCase(a$[i]));\n        }\n      }\n\n      constructor() {\n        super();\n        this._initializeProperties();\n      }\n\n      attributeChangedCallback(name, old, value) {\n        if (old !== value) {\n          this._attributeToProperty(name, value);\n        }\n      }\n\n      /**\n       * Initializes the local storage for property accessors.\n       *\n       * Provided as an override point for performing any setup work prior\n       * to initializing the property accessor system.\n       *\n       * @protected\n       */\n      _initializeProperties() {\n        this.__serializing = false;\n        this.__dataCounter = 0;\n        this.__dataInvalid = false;\n        // initialize data with prototype values saved when creating accessors\n        this.__data = {};\n        this.__dataPending = null;\n        this.__dataOld = null;\n        if (this.__dataProto) {\n          this._initializeProtoProperties(this.__dataProto);\n        }\n      }\n\n      /**\n       * Called at instance time with bag of properties that were overwritten\n       * by accessors on the prototype when accessors were created.\n       *\n       * The default implementation sets these properties back into the\n       * setter at instance time.  This method is provided as an override\n       * point for customizing or providing more efficient initialization.\n       *\n       * @param {Object} props Bag of property values that were overwritten\n       *   when creating property accessors.\n       * @protected\n       */\n      _initializeProtoProperties(props) {\n        for (let p in props) {\n          this._setProperty(p, props[p]);\n        }\n      }\n\n      /**\n       * Ensures the element has the given attribute. If it does not,\n       * assigns the given value to the attribute.\n       *\n       *\n       * @method _ensureAttribute\n       * @param {string} attribute Name of attribute to ensure is set.\n       * @param {string} value of the attribute.\n       */\n      _ensureAttribute(attribute, value) {\n        if (!this.hasAttribute(attribute)) {\n          this._valueToNodeAttribute(this, value, attribute);\n        }\n      }\n\n      /**\n       * Deserializes an attribute to its associated property.\n       *\n       * This method calls the `_deserializeValue` method to convert the string to\n       * a typed value.\n       *\n       * @method _attributeToProperty\n       * @param {string} attribute Name of attribute to deserialize.\n       * @param {string} value of the attribute.\n       * @param {*} type type to deserialize to.\n       */\n      _attributeToProperty(attribute, value, type) {\n        // Don't deserialize back to property if currently reflecting\n        if (!this.__serializing) {\n          let property = caseMap.dashToCamelCase(attribute);\n          this[property] = this._deserializeValue(value, type);\n        }\n      }\n\n      /**\n       * Serializes a property to its associated attribute.\n       *\n       * @method _propertyToAttribute\n       * @param {string} property Property name to reflect.\n       * @param {string=} attribute Attribute name to reflect.\n       * @param {*=} value Property value to refect.\n       */\n      _propertyToAttribute(property, attribute, value) {\n        this.__serializing = true;\n        value = (arguments.length < 3) ? this[property] : value;\n        this._valueToNodeAttribute(this, value,\n          attribute || caseMap.camelToDashCase(property));\n        this.__serializing = false;\n      }\n\n      /**\n       * Sets a typed value to an HTML attribute on a node.\n       *\n       * This method calls the `_serializeValue` method to convert the typed\n       * value to a string.  If the `_serializeValue` method returns `undefined`,\n       * the attribute will be removed (this is the default for boolean\n       * type `false`).\n       *\n       * @method _valueToNodeAttribute\n       * @param {Element} node Element to set attribute to.\n       * @param {*} value Value to serialize.\n       * @param {string} attribute Attribute name to serialize to.\n       */\n      _valueToNodeAttribute(node, value, attribute) {\n        let str = this._serializeValue(value);\n        if (str === undefined) {\n          node.removeAttribute(attribute);\n        } else {\n          node.setAttribute(attribute, str);\n        }\n      }\n\n      /**\n       * Converts a typed JavaScript value to a string.\n       *\n       * This method is called by Polymer when setting JS property values to\n       * HTML attributes.  Users may override this method on Polymer element\n       * prototypes to provide serialization for custom types.\n       *\n       * @method _serializeValue\n       * @param {*} value Property value to serialize.\n       * @return {string | undefined} String serialized from the provided property value.\n       */\n      _serializeValue(value) {\n        /* eslint-disable no-fallthrough */\n        switch (typeof value) {\n          case 'boolean':\n            return value ? '' : undefined;\n\n          case 'object':\n            if (value instanceof Date) {\n              return value.toString();\n            } else if (value) {\n              try {\n                return JSON.stringify(value);\n              } catch(x) {\n                return '';\n              }\n            }\n\n          default:\n            return value != null ? value.toString() : undefined;\n        }\n      }\n\n      /**\n       * Converts a string to a typed JavaScript value.\n       *\n       * This method is called by Polymer when reading HTML attribute values to\n       * JS properties.  Users may override this method on Polymer element\n       * prototypes to provide deserialization for custom `type`s.  Note,\n       * the `type` argument is the value of the `type` field provided in the\n       * `properties` configuration object for a given property, and is\n       * by convention the constructor for the type to deserialize.\n       *\n       * Note: The return value of `undefined` is used as a sentinel value to\n       * indicate the attribute should be removed.\n       *\n       * @method _deserializeValue\n       * @param {string} value Attribute value to deserialize.\n       * @param {*} type Type to deserialize the string to.\n       * @return {*} Typed value deserialized from the provided string.\n       */\n      _deserializeValue(value, type) {\n        /**\n         * @type {*}\n         */\n        let outValue;\n        switch (type) {\n          case Number:\n            outValue = Number(value);\n            break;\n\n          case Boolean:\n            outValue = (value !== null);\n            break;\n\n          case Object:\n            try {\n              outValue = JSON.parse(value);\n            } catch(x) {\n              // allow non-JSON literals like Strings and Numbers\n            }\n            break;\n\n          case Array:\n            try {\n              outValue = JSON.parse(value);\n            } catch(x) {\n              outValue = null;\n              console.warn('Polymer::Attributes: couldn`t decode Array as JSON');\n            }\n            break;\n\n          case Date:\n            outValue = new Date(value);\n            break;\n\n          case String:\n          default:\n            outValue = value;\n            break;\n        }\n\n        return outValue;\n      }\n      /* eslint-enable no-fallthrough */\n\n      /**\n       * Creates a setter/getter pair for the named property with its own\n       * local storage.  The getter returns the value in the local storage,\n       * and the setter calls `_setProperty`, which updates the local storage\n       * for the property and enqueues a `_propertiesChanged` callback.\n       *\n       * This method may be called on a prototype or an instance.  Calling\n       * this method may overwrite a property value that already exists on\n       * the prototype/instance by creating the accessor.  When calling on\n       * a prototype, any overwritten values are saved in `__dataProto`,\n       * and it is up to the subclasser to decide how/when to set those\n       * properties back into the accessor.  When calling on an instance,\n       * the overwritten value is set via `_setPendingProperty`, and the\n       * user should call `_invalidateProperties` or `_flushProperties`\n       * for the values to take effect.\n       *\n       * @param {string} property Name of the property\n       * @param {boolean=} readOnly When true, no setter is created; the\n       *   protected `_setProperty` function must be used to set the property\n       * @protected\n       */\n      _createPropertyAccessor(property, readOnly) {\n        saveAccessorValue(this, property);\n        Object.defineProperty(this, property, {\n          get: function() {\n            return this.__data[property];\n          },\n          set: readOnly ? function() { } : function(value) {\n            this._setProperty(property, value);\n          }\n        });\n      }\n\n      /**\n       * Updates the local storage for a property (via `_setPendingProperty`)\n       * and enqueues a `_proeprtiesChanged` callback.\n       *\n       * @param {string} property Name of the property\n       * @param {*} value Value to set\n       * @protected\n       */\n      _setProperty(property, value) {\n        if (this._setPendingProperty(property, value)) {\n          this._invalidateProperties();\n        }\n      }\n\n      /**\n       * Updates the local storage for a property, records the previous value,\n       * and adds it to the set of \"pending changes\" that will be passed to the\n       * `_propertiesChanged` callback.  This method does not enqueue the\n       * `_propertiesChanged` callback.\n       *\n       * @param {string} property Name of the property\n       * @param {*} value Value to set\n       * @protected\n       */\n      _setPendingProperty(property, value) {\n        let old = this.__data[property];\n        if (this._shouldPropertyChange(property, value, old)) {\n          if (!this.__dataPending) {\n            this.__dataPending = {};\n            this.__dataOld = {};\n          }\n          // Ensure old is captured from the last turn\n          if (!(property in this.__dataOld)) {\n            this.__dataOld[property] = old;\n          }\n          this.__data[property] = value;\n          this.__dataPending[property] = value;\n          return true;\n        }\n      }\n\n      /**\n       * Returns true if the specified property has a pending change.\n       *\n       * @param {string} prop Property name\n       * @return {boolean} True if property has a pending change\n       * @protected\n       */\n      _isPropertyPending(prop) {\n        return this.__dataPending && (prop in this.__dataPending);\n      }\n\n      /**\n       * Marks the properties as invalid, and enqueues an async\n       * `_propertiesChanged` callback.\n       *\n       * @protected\n       */\n      _invalidateProperties() {\n        if (!this.__dataInvalid) {\n          this.__dataInvalid = true;\n          microtask.run(() => {\n            if (this.__dataInvalid) {\n              this.__dataInvalid = false;\n              this._flushProperties();\n            }\n          });\n        }\n      }\n\n      /**\n       * Calls the `_propertiesChanged` callback with the current set of\n       * pending changes (and old values recorded when pending changes were\n       * set), and resets the pending set of changes.\n       *\n       * @protected\n       */\n      _flushProperties() {\n        let oldProps = this.__dataOld;\n        let changedProps = this.__dataPending;\n        this.__dataPending = null;\n        this.__dataCounter++;\n        this._propertiesChanged(this.__data, changedProps, oldProps);\n        this.__dataCounter--;\n      }\n\n      /**\n       * Callback called when any properties with accessors created via\n       * `_createPropertyAccessor` have been set.\n       *\n       * @param {Object} currentProps Bag of all current accessor values\n       * @param {Object} changedProps Bag of properties changed since the last\n       *   call to `_propertiesChanged`\n       * @param {Object} oldProps Bag of previous values for each property\n       *   in `changedProps`\n       * @protected\n       */\n      _propertiesChanged(currentProps, changedProps, oldProps) { // eslint-disable-line no-unused-vars\n      }\n\n      /**\n       * Method called to determine whether a property value should be\n       * considered as a change and cause the `_propertiesChanged` callback\n       * to be enqueued.\n       *\n       * The default implementation returns `true` for primitive types if a\n       * strict equality check fails, and returns `true` for all Object/Arrays.\n       * The method always returns false for `NaN`.\n       *\n       * Override this method to e.g. provide stricter checking for\n       * Objects/Arrays when using immutable patterns.\n       *\n       * @param {string} property Property name\n       * @param {*} value New property value\n       * @param {*} old Previous property value\n       * @return {boolean} Whether the property should be considered a change\n       *   and enqueue a `_proeprtiesChanged` callback\n       * @protected\n       */\n      _shouldPropertyChange(property, value, old) {\n        return (\n          // Strict equality check\n          (old !== value &&\n           // This ensures (old==NaN, value==NaN) always returns false\n           (old === old || value === value))\n        );\n      }\n\n    }\n\n  });\n\n})();\n\n\n\n\n// WEBPACK FOOTER //\n// ./bower_components/polymer/lib/mixins/property-accessors.html","/*__wc__loader*/\n\n\n    (function(document) {\n      var _htmlStr = \"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\";\n      if (document.head) {\n        var el = document.head;\n        var div = document.createElement('div');\n        div.innerHTML = _htmlStr;\n        while (div.children.length > 0) {\n          el.appendChild(div.children[0]);\n        }\n      } else {\n        document.write(_htmlStr);\n      }\n    })(document);\n    \n\n\n    (function(document) {\n      var _htmlStr = \"\";\n      if (document.body) {\n        var el = document.body;\n        var div = document.createElement('div');\n        div.innerHTML = _htmlStr;\n        while (div.children.length > 0) {\n          el.appendChild(div.children[0]);\n        }\n      } else {\n        document.write(_htmlStr);\n      }\n    })(document);\n    \n\nrequire('../utils/boot.html');\n\nrequire('../utils/mixin.html');\n\nrequire('../utils/path.html');\n\nrequire('../utils/case-map.html');\n\nrequire('./property-accessors.html');\n\nrequire('./template-stamp.html');\n\n\n(function() {\n\n  'use strict';\n\n  const CaseMap = Polymer.CaseMap;\n\n  // Monotonically increasing unique ID used for de-duping effects triggered\n  // from multiple properties in the same turn\n  let dedupeId = 0;\n\n  // Property effect types; effects are stored on the prototype using these keys\n  const TYPES = {\n    ANY: '__propertyEffects',\n    COMPUTE: '__computeEffects',\n    REFLECT: '__reflectEffects',\n    NOTIFY: '__notifyEffects',\n    PROPAGATE: '__propagateEffects',\n    OBSERVE: '__observeEffects',\n    READ_ONLY: '__readOnly'\n  }\n\n  /**\n   * Ensures that the model has an own-property map of effects for the given type.\n   * The model may be a prototype or an instance.\n   *\n   * Property effects are stored as arrays of effects by property in a map,\n   * by named type on the model. e.g.\n   *\n   *   __computeEffects: {\n   *     foo: [ ... ],\n   *     bar: [ ... ]\n   *   }\n   *\n   * If the model does not yet have an effect map for the type, one is created\n   * and returned.  If it does, but it is not an own property (i.e. the\n   * prototype had effects), the the map is deeply cloned and the copy is\n   * set on the model and returned, ready for new effects to be added.\n   *\n   * @param {Object} model Prototype or instance\n   * @param {string} type Property effect type\n   * @return {Object} The own-property map of effects for the given type\n   * @private\n   */\n  function ensureOwnEffectMap(model, type) {\n    let effects = model[type];\n    if (!effects) {\n      effects = model[type] = {};\n    } else if (!model.hasOwnProperty(type)) {\n      effects = model[type] = Object.create(model[type]);\n      for (let p in effects) {\n        let protoFx = effects[p];\n        let instFx = effects[p] = Array(protoFx.length);\n        for (let i=0; i<protoFx.length; i++) {\n          instFx[i] = protoFx[i];\n        }\n      }\n    }\n    return effects;\n  }\n\n  // -- effects ----------------------------------------------\n\n  /**\n   * Runs all effects of a given type for the given set of property changes\n   * on an instance.\n   *\n   * @param {Object} inst The instance with effects to run\n   * @param {string} type Type of effect to run\n   * @param {Object} props Bag of current property changes\n   * @param {Object=} oldProps Bag of previous values for changed properties\n   * @private\n   */\n  function runEffects(inst, effects, props, oldProps, hasPaths) {\n    if (effects) {\n      let ran;\n      let id = dedupeId++;\n      for (let prop in props) {\n        if (runEffectsForProperty(inst, effects, id, prop, props, oldProps, hasPaths)) {\n          ran = true;\n        }\n      }\n      return ran;\n    }\n  }\n\n  /**\n   * Runs a list of effects for a given property.\n   *\n   * @param {Object} inst The instance with effects to run\n   * @param {Array} effects Array of effects\n   * @param {number} id Effect run id used for de-duping effects\n   * @param {string} prop Name of changed property\n   * @param {*} value Value of changed property\n   * @param {*} old Previous value of changed property\n   * @private\n   */\n  function runEffectsForProperty(inst, effects, dedupeId, prop, props, oldProps, hasPaths) {\n    let ran;\n    let rootProperty = hasPaths ? Polymer.Path.root(prop) : prop;\n    let fxs = effects[rootProperty];\n    if (fxs) {\n      for (let i=0, l=fxs.length, fx; (i<l) && (fx=fxs[i]); i++) {\n        if ((!fx.info || fx.info.lastRun !== dedupeId) &&\n            (!hasPaths || pathMatchesTrigger(prop, fx.trigger))) {\n          fx.fn(inst, prop, props, oldProps, fx.info, hasPaths);\n          if (fx.info) {\n            fx.info.lastRun = dedupeId;\n          }\n          ran = true;\n        }\n      }\n    }\n    return ran;\n  }\n\n  /**\n   * Determines whether a property/path that has changed matches the trigger\n   * criteria for an effect.  A trigger is a descriptor with the following\n   * structure, which matches the descriptors returned from `parseArg`.\n   * e.g. for `foo.bar.*`:\n   * ```\n   * trigger: {\n   *   name: 'a.b',\n   *   structured: true,\n   *   wildcard: true\n   * }\n   * ```\n   * If no trigger is given, the path is deemed to match.\n   *\n   * @param {string} path Path or property that changed\n   * @param {Object} trigger Descriptor\n   * @return {boolean} Whether the path matched the trigger\n   */\n  function pathMatchesTrigger(path, trigger) {\n    if (trigger) {\n      let triggerPath = trigger.name;\n      return (triggerPath == path) ||\n        (trigger.structured && Polymer.Path.isAncestor(triggerPath, path)) ||\n        (trigger.wildcard && Polymer.Path.isDescendant(triggerPath, path));\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   * Implements the \"observer\" effect.\n   *\n   * Calls the method with `info.methodName` on the instance, passing the\n   * new and old values.\n   *\n   * @param {Object} inst The instance the effect will be run on\n   * @param {string} property Name of property\n   * @param {*} value Current value of property\n   * @param {*} old Previous value of property\n   * @param {Object} info Effect metadata\n   * @private\n   */\n  function runObserverEffect(inst, property, props, oldProps, info) {\n    let fn = inst[info.methodName];\n    let changedProp = info.property;\n    if (fn) {\n      fn.call(inst, inst.__data[changedProp], oldProps[changedProp]);\n    } else {\n      console.warn('observer method `' + info.methodName + '` not defined');\n    }\n  }\n\n  /**\n   * Runs \"notify\" effects for a set of changed properties.\n   *\n   * This method differs from the generic `runEffects` method in that it\n   * will dispatch path notification events in the case that the property\n   * changed was a path and the root property for that path didn't have a\n   * \"notify\" effect.  This is to maintain 1.0 behavior that did not require\n   * `notify: true` to ensure object sub-property notifications were\n   * sent.\n   *\n   * @param {Element} inst The instance with effects to run\n   * @param {Object} props Bag of current property changes\n   * @param {Object} oldProps Bag of previous values for changed properties\n   * @private\n   */\n  function runNotifyEffects(inst, notifyProps, props, oldProps, hasPaths) {\n    // Notify\n    let fxs = inst.__notifyEffects;\n    let notified;\n    let id = dedupeId++;\n    // Try normal notify effects; if none, fall back to try path notification\n    for (let prop in notifyProps) {\n      if (notifyProps[prop]) {\n        if (fxs && runEffectsForProperty(inst, fxs, id, prop, props, oldProps, hasPaths)) {\n          notified = true;\n        } else if (hasPaths && notifyPath(inst, prop, props)) {\n          notified = true;\n        }\n      }\n    }\n    // Flush host if we actually notified and host was batching\n    let host;\n    if (notified && (host = inst.__dataHost) && host._flushProperties) {\n      host._flushProperties();\n    }\n  }\n\n  /**\n   * Dispatches {property}-changed events with path information in the detail\n   * object to indicate a sub-path of the property was changed.\n   *\n   * @param {Element} inst The element from which to fire the event\n   * @param {string} path The path that was changed\n   * @param {*} value\n   * @private\n   */\n  function notifyPath(inst, path, props) {\n    let rootProperty = Polymer.Path.root(path);\n    if (rootProperty !== path) {\n      let eventName = Polymer.CaseMap.camelToDashCase(rootProperty) + '-changed';\n      dispatchNotifyEvent(inst, eventName, props[path], path);\n      return true;\n    }\n  }\n\n  /**\n   * Dispatches {property}-changed events to indicate a property (or path)\n   * changed.\n   *\n   * @param {Element} inst The element from which to fire the event\n   * @param {string} eventName The name of the event to send ('{property}-changed')\n   * @param {*} value The value of the changed property\n   * @param {string | null | undefined} path If a sub-path of this property changed, the path\n   *   that changed (optional).\n   * @private\n   */\n  function dispatchNotifyEvent(inst, eventName, value, path) {\n    let detail = {\n      value: value,\n      queueProperty: true\n    };\n    if (path) {\n      detail.path = path;\n    }\n    inst.dispatchEvent(new CustomEvent(eventName, { detail }));\n  }\n\n  /**\n   * Implements the \"notify\" effect.\n   *\n   * Dispatches a non-bubbling event named `info.eventName` on the instance\n   * with a detail object containing the new `value`.\n   *\n   * @param {Element} inst The instance the effect will be run on\n   * @param {string} property Name of property\n   * @param {*} value Current value of property\n   * @param {*} old Previous value of property\n   * @param {Object} info Effect metadata\n   * @private\n   */\n  function runNotifyEffect(inst, property, props, oldProps, info, hasPaths) {\n    let rootProperty = hasPaths ? Polymer.Path.root(property) : property;\n    let path = rootProperty != property ? property : null;\n    let value = path ? Polymer.Path.get(inst, path) : inst.__data[property];\n    if (path && value === undefined) {\n      value = props[property];  // specifically for .splices\n    }\n    dispatchNotifyEvent(inst, info.eventName, value, path);\n  }\n\n  /**\n   * Adds a 2-way binding notification event listener to the node specified\n   *\n   * @param {Object} node Child element to add listener to\n   * @param {Object} inst Host element instance to handle notification event\n   * @param {Object} info Listener metadata stored via addAnnotatedListener\n   * @private\n   */\n  function addNotifyListener(node, inst, info) {\n    node.addEventListener(info.event, function(e) {\n      handleNotification(e, inst, info.property, info.path, info.negate);\n    });\n  }\n\n  /**\n   * Handler function for 2-way notification events. Receives context\n   * information captured in the `addNotifyListener` closure from the\n   * `__notifyListeners` metadata.\n   *\n   * Sets the value of the notified property to the host property or path.  If\n   * the event contained path information, translate that path to the host\n   * scope's name for that path first.\n   *\n   * @param {Event} e Notification event (e.g. '<property>-changed')\n   * @param {Object} inst Host element instance handling the notification event\n   * @param {string} property Child element property that was bound\n   * @param {string} path Host property/path that was bound\n   * @param {boolean} negate Whether the binding was negated\n   * @private\n   */\n  function handleNotification(e, inst, property, path, negate) {\n    let value;\n    let targetPath = e.detail && e.detail.path;\n    if (targetPath) {\n      path = Polymer.Path.translate(property, path, targetPath);\n      value = e.detail && e.detail.value;\n    } else {\n      value = e.target[property];\n    }\n    value = negate ? !value : value;\n    setPropertyFromNotification(inst, path, value, e);\n  }\n\n  /**\n   * Called by 2-way binding notification event listeners to set a property\n   * or path to the host based on a notification from a bound child.\n   *\n   * @param {string} path Path on this instance to set\n   * @param {*} value Value to set to given path\n   * @protected\n   */\n  function setPropertyFromNotification(inst, path, value, event) {\n    let detail = event.detail;\n    if (detail && detail.queueProperty) {\n      if (!inst.__readOnly || !inst.__readOnly[path]) {\n        inst._setPendingPropertyOrPath(path, value, true, Boolean(detail.path));\n      }\n    } else {\n      inst.set(path, value);\n    }\n  }\n\n  /**\n   * Implements the \"reflect\" effect.\n   *\n   * Sets the attribute named `info.attrName` to the given property value.\n   *\n   * @param {Object} inst The instance the effect will be run on\n   * @param {string} property Name of property\n   * @param {*} value Current value of property\n   * @param {*} old Previous value of property\n   * @param {Object} info Effect metadata\n   * @private\n   */\n  function runReflectEffect(inst, property, props, oldProps, info) {\n    let value = inst.__data[property];\n    if (Polymer.sanitizeDOMValue) {\n      value = Polymer.sanitizeDOMValue(value, info.attrName, 'attribute', inst);\n    }\n    inst._propertyToAttribute(property, info.attrName, value);\n  }\n\n  /**\n   * Runs \"computed\" effects for a set of changed properties.\n   *\n   * This method differs from the generic `runEffects` method in that it\n   * continues to run computed effects based on the output of each pass until\n   * there are no more newly computed properties.  This ensures that all\n   * properties that will be computed by the initial set of changes are\n   * computed before other effects (binding propagation, observers, and notify)\n   * run.\n   *\n   * @param {Element} inst The instance the effect will be run on\n   * @param {Object} changedProps Bag of changed properties\n   * @param {Object} oldProps Bag of previous values for changed properties\n   * @private\n   */\n  function runComputedEffects(inst, changedProps, oldProps, hasPaths) {\n    let computeEffects = inst.__computeEffects;\n    if (computeEffects) {\n      let inputProps = changedProps;\n      while (runEffects(inst, computeEffects, inputProps, oldProps, hasPaths)) {\n        Object.assign(oldProps, inst.__dataOld);\n        Object.assign(changedProps, inst.__dataPending);\n        inputProps = inst.__dataPending;\n        inst.__dataPending = null;\n      }\n    }\n  }\n\n  /**\n   * Implements the \"computed property\" effect by running the method with the\n   * values of the arguments specified in the `info` object and setting the\n   * return value to the computed property specified.\n   *\n   * @param {Object} inst The instance the effect will be run on\n   * @param {string} property Name of property\n   * @param {*} value Current value of property\n   * @param {*} old Previous value of property\n   * @param {Object} info Effect metadata\n   * @private\n   */\n  function runComputedEffect(inst, property, props, oldProps, info) {\n    let result = runMethodEffect(inst, property, props, oldProps, info);\n    let computedProp = info.methodInfo;\n    if (inst.__propertyEffects && inst.__propertyEffects[computedProp]) {\n      inst._setPendingProperty(computedProp, result, true);\n    } else {\n      inst[computedProp] = result;\n    }\n  }\n\n  /**\n   * Computes path changes based on path links set up using the `linkPaths`\n   * API.\n   *\n   * @param {Element} inst The instance whose props are changing\n   * @param {Object} changedProps Bag of changed properties\n   * @private\n   */\n  function computeLinkedPaths(inst, changedProps, hasPaths) {\n    let links;\n    if (hasPaths && (links = inst.__dataLinkedPaths)) {\n      const cache = inst.__dataTemp;\n      let link;\n      for (let a in links) {\n        let b = links[a];\n        for (let path in changedProps) {\n          if (Polymer.Path.isDescendant(a, path)) {\n            link = Polymer.Path.translate(a, b, path);\n            cache[link] = changedProps[link] = changedProps[path];\n            let notifyProps = inst.__dataToNotify || (inst.__dataToNotify = {});\n            notifyProps[link] = true;\n          } else if (Polymer.Path.isDescendant(b, path)) {\n            link = Polymer.Path.translate(b, a, path);\n            cache[link] = changedProps[link] = changedProps[path];\n            let notifyProps = inst.__dataToNotify || (inst.__dataToNotify = {});\n            notifyProps[link] = true;\n          }\n        }\n      }\n    }\n  }\n\n  // -- bindings ----------------------------------------------\n\n  /**\n   * Adds \"binding\" property effects for the template annotation\n   * (\"note\" for short) and node index specified.  These may either be normal\n   * \"binding\" effects (property/path bindings) or \"method binding\"\n   * effects, aka inline computing functions, depending on the type of binding\n   * detailed in the note.\n   *\n   * @param {Object} model Prototype or instance\n   * @param {Object} note Annotation note returned from Annotator\n   * @param {number} index Index into `__templateNodes` list of annotated nodes that the\n   *   note applies to\n   * @param {Object=} dynamicFns Map indicating whether method names should\n   *   be included as a dependency to the effect.\n   * @private\n   */\n  function addBindingEffect(model, note, index, dynamicFns) {\n    for (let i=0; i<note.parts.length; i++) {\n      let part = note.parts[i];\n      if (part.signature) {\n        addMethodBindingEffect(model, note, part, index, dynamicFns);\n      } else if (!part.literal) {\n        if (note.kind === 'attribute' && note.name[0] === '-') {\n          console.warn('Cannot set attribute ' + note.name +\n            ' because \"-\" is not a valid attribute starting character');\n        } else {\n          model._addPropertyEffect(Polymer.Path.root(part.value), TYPES.PROPAGATE, {\n            fn: runBindingEffect,\n            info:  {\n              kind: note.kind,\n              index: index,\n              name: note.name,\n              propertyName: note.propertyName,\n              value: part.value,\n              isCompound: note.isCompound,\n              compoundIndex: part.compoundIndex,\n              event: part.event,\n              customEvent: part.customEvent,\n              negate: part.negate\n            }\n          });\n        }\n      }\n    }\n  }\n\n  /**\n   * Implements the \"binding\" (property/path binding) effect.\n   *\n   * @param {Element} inst The instance the effect will be run on\n   * @param {string} path Name of property\n   * @param {*} value Current value of property\n   * @param {*} old Previous value of property\n   * @param {Object} info Effect metadata\n   * @private\n   */\n  function runBindingEffect(inst, path, props, oldProps, info, hasPaths) {\n    let value;\n    let node = inst.__templateNodes[info.index];\n    // Subpath notification: transform path and set to client\n    // e.g.: foo=\"{{obj.sub}}\", path: 'obj.sub.prop', set 'foo.prop'=obj.sub.prop\n    if (hasPaths && (path.length > info.value.length) &&\n        (info.kind == 'property') && !info.isCompound &&\n        node.__propertyEffects && node.__propertyEffects[info.name]) {\n      let value = props[path];\n      path = Polymer.Path.translate(info.value, info.name, path);\n      if (node._setPendingPropertyOrPath(path, value, false, true)) {\n        inst._enqueueClient(node);\n      }\n    } else {\n      // Root or deeper path was set; extract bound path value\n      // e.g.: foo=\"{{obj.sub}}\", path: 'obj', set 'foo'=obj.sub\n      //   or: foo=\"{{obj.sub}}\", path: 'obj.sub.prop', set 'foo'=obj.sub\n      if (path != info.value) {\n        value = Polymer.Path.get(inst, info.value);\n      } else {\n        if (hasPaths && Polymer.Path.isPath(path)) {\n          value = Polymer.Path.get(inst, path);\n        } else {\n          value = inst.__data[path];\n        }\n      }\n      // Propagate value to child\n      applyBindingValue(inst, info, value);\n    }\n  }\n\n  /**\n   * Sets the value for an \"binding\" (binding) effect to a node,\n   * either as a property or attribute.\n   *\n   * @param {Object} inst The instance owning the binding effect\n   * @param {Object} info Effect metadata\n   * @param {*} value Value to set\n   * @private\n   */\n  function applyBindingValue(inst, info, value) {\n    let node = inst.__templateNodes[info.index];\n    value = computeBindingValue(node, value, info);\n    if (Polymer.sanitizeDOMValue) {\n      value = Polymer.sanitizeDOMValue(value, info.name, info.kind, node);\n    }\n    if (info.kind == 'attribute') {\n      // Attribute binding\n      inst._valueToNodeAttribute(node, value, info.name);\n    } else {\n      // Property binding\n      let prop = info.name;\n      if (node.__propertyEffects && node.__propertyEffects[prop]) {\n        if (!node.__readOnly || !node.__readOnly[prop]) {\n          if (node._setPendingProperty(prop, value)) {\n            inst._enqueueClient(node);\n          }\n        }\n      } else  {\n        inst._setUnmanagedPropertyToNode(node, prop, value);\n      }\n    }\n  }\n\n  /**\n   * Transforms an \"binding\" effect value based on compound & negation\n   * effect metadata, as well as handling for special-case properties\n   *\n   * @param {Node} node Node the value will be set to\n   * @param {*} value Value to set\n   * @param {Object} info Effect metadata\n   * @return {*} Transformed value to set\n   * @private\n   */\n  function computeBindingValue(node, value, info) {\n    if (info.negate) {\n      value = !value;\n    }\n    if (info.isCompound) {\n      let storage = node.__dataCompoundStorage[info.name];\n      storage[info.compoundIndex] = value;\n      value = storage.join('');\n    }\n    if (info.kind !== 'attribute') {\n      // Some browsers serialize `undefined` to `\"undefined\"`\n      if (info.name === 'textContent' ||\n          (node.localName == 'input' && info.name == 'value')) {\n        value = value == undefined ? '' : value;\n      }\n    }\n    return value;\n  }\n\n  /**\n   * Adds \"binding method\" property effects for the template binding\n   * (\"note\" for short), part metadata, and node index specified.\n   *\n   * @param {Object} model Prototype or instance\n   * @param {Object} note Binding note returned from Annotator\n   * @param {Object} part The compound part metadata\n   * @param {number} index Index into `__templateNodes` list of annotated nodes that the\n   *   note applies to\n   * @param {Object=} dynamicFns Map indicating whether method names should\n   *   be included as a dependency to the effect.\n   * @private\n   */\n  function addMethodBindingEffect(model, note, part, index, dynamicFns) {\n    createMethodEffect(model, part.signature, TYPES.PROPAGATE,\n      runMethodBindingEffect, {\n        index: index,\n        isCompound: note.isCompound,\n        compoundIndex: part.compoundIndex,\n        kind: note.kind,\n        name: note.name,\n        negate: part.negate,\n        part: part\n      }, dynamicFns\n    );\n  }\n\n  /**\n   * Implements the \"binding method\" (inline computed function) effect.\n   *\n   * Runs the method with the values of the arguments specified in the `info`\n   * object and setting the return value to the node property/attribute.\n   *\n   * @param {Object} inst The instance the effect will be run on\n   * @param {string} property Name of property\n   * @param {*} value Current value of property\n   * @param {*} old Previous value of property\n   * @param {Object} info Effect metadata\n   * @private\n   */\n  function runMethodBindingEffect(inst, property, props, oldProps, info) {\n    let val = runMethodEffect(inst, property, props, oldProps, info);\n    applyBindingValue(inst, info.methodInfo, val);\n  }\n\n  /**\n   * Post-processes template bindings (notes for short) provided by the\n   * Bindings library for use by the effects system:\n   * - Parses bindings for methods into method `signature` objects\n   * - Memoizes the root property for path bindings\n   * - Recurses into nested templates and processes those templates and\n   *   extracts any host properties, which are set to the template's\n   *   `_content._hostProps`\n   * - Adds bindings from the host to <template> elements for any nested\n   *   template's lexically bound \"host properties\"; template handling\n   *   elements can then add accessors to the template for these properties\n   *   to forward host properties into template instances accordingly.\n   *\n   * @param {Array<Object>} notes List of notes to process; the notes are\n   *   modified in place.\n   * @private\n   */\n  function processAnnotations(notes) {\n    if (!notes._processed) {\n      for (let i=0; i<notes.length; i++) {\n        let note = notes[i];\n        // Parse bindings for methods & path roots (models)\n        for (let j=0; j<note.bindings.length; j++) {\n          let b = note.bindings[j];\n          for (let k=0; k<b.parts.length; k++) {\n            let p = b.parts[k];\n            if (!p.literal) {\n              p.signature = parseMethod(p.value);\n              if (!p.signature) {\n                p.rootProperty = Polymer.Path.root(p.value);\n              }\n            }\n          }\n        }\n        // Recurse into nested templates & bind host props\n        if (note.templateContent) {\n          processAnnotations(note.templateContent._notes);\n          let hostProps = note.templateContent._hostProps =\n            discoverTemplateHostProps(note.templateContent._notes);\n          let bindings = [];\n          for (let prop in hostProps) {\n            bindings.push({\n              index: note.index,\n              kind: 'property',\n              name: '_host_' + prop,\n              parts: [{\n                mode: '{',\n                value: prop\n              }]\n            });\n          }\n          note.bindings = note.bindings.concat(bindings);\n        }\n      }\n      notes._processed = true;\n    }\n  }\n\n  /**\n   * Finds all property usage in templates (property/path bindings and function\n   * arguments) and returns the path roots as keys in a map. Each outer template\n   * merges inner _hostProps to propagate inner host property needs to outer\n   * templates.\n   *\n   * @param {Array<Object>} notes List of notes to process for a given template\n   * @return {Object<string,boolean>} Map of host properties that the template\n   *   (or any nested templates) uses\n   * @private\n   */\n  function discoverTemplateHostProps(notes) {\n    let hostProps = {};\n    for (let i=0, n; (i<notes.length) && (n=notes[i]); i++) {\n      // Find all bindings to parent.* and spread them into _parentPropChain\n      for (let j=0, b$=n.bindings, b; (j<b$.length) && (b=b$[j]); j++) {\n        for (let k=0, p$=b.parts, p; (k<p$.length) && (p=p$[k]); k++) {\n          if (p.signature) {\n            let args = p.signature.args;\n            for (let kk=0; kk<args.length; kk++) {\n              let rootProperty = args[kk].rootProperty;\n              if (rootProperty) {\n                hostProps[rootProperty] = true;\n              }\n            }\n            hostProps[p.signature.methodName] = true;\n          } else {\n            if (p.rootProperty) {\n              hostProps[p.rootProperty] = true;\n            }\n          }\n        }\n      }\n      // Merge child _hostProps into this _hostProps\n      if (n.templateContent) {\n        let templateHostProps = n.templateContent._hostProps;\n        Object.assign(hostProps, templateHostProps);\n      }\n    }\n    return hostProps;\n  }\n\n  /**\n   * Returns true if a binding's metadata meets all the requirements to allow\n   * 2-way binding, and therefore a <property>-changed event listener should be\n   * added:\n   * - used curly braces\n   * - is a property (not attribute) binding\n   * - is not a textContent binding\n   * - is not compound\n   *\n   * @param {Object} binding Binding metadata\n   * @return {boolean} True if 2-way listener should be added\n   * @private\n   */\n  function shouldAddListener(binding) {\n    return binding.name &&\n           binding.kind != 'attribute' &&\n           binding.kind != 'text' &&\n           !binding.isCompound &&\n           binding.parts[0].mode === '{';\n  }\n\n  /**\n   * Sets up a prototypical `__notifyListeners` metadata array to be used at\n   * instance time to add event listeners for 2-way bindings.\n   *\n   * @param {Object} model Prototype (instances not currently supported)\n   * @param {number} index Index into `__templateNodes` list of annotated nodes that the\n   *   event should be added to\n   * @param {string} property Property of target node to listen for changes\n   * @param {string} path Host path that the change should be propagated to\n   * @param {string=} event A custom event name to listen for (e.g. via the\n   *   `{{prop::eventName}}` syntax)\n   * @param {boolean=} negate Whether the notified value should be negated before\n   *   setting to host path\n   * @private\n   */\n  function addAnnotatedListener(model, index, property, path, event, negate) {\n    let eventName = event ||\n      (CaseMap.camelToDashCase(property) + '-changed');\n    model.__notifyListeners = model.__notifyListeners || [];\n    model.__notifyListeners.push({\n      index: index,\n      property: property,\n      path: path,\n      event: eventName,\n      negate: negate\n    });\n  }\n\n  /**\n   * Adds all 2-way binding notification listeners to a host based on\n   * `__notifyListeners` metadata recorded by prior calls to`addAnnotatedListener`\n   *\n   * @param {Object} inst Host element instance\n   * @private\n   */\n  function setupNotifyListeners(inst) {\n    let b$ = inst.__notifyListeners;\n    for (let i=0, l=b$.length, info; (i<l) && (info=b$[i]); i++) {\n      let node = inst.__templateNodes[info.index];\n      addNotifyListener(node, inst, info);\n    }\n  }\n\n  /**\n   * On the `inst` element that was previously bound, uses `inst.__templateNotes`\n   * to setup compound binding storage structures onto the bound\n   * nodes (`inst.__templateNodes`).\n   * (`inst._, and 2-way binding event listeners are also added.)\n   *\n   * @param {Object} inst Instance that bas been previously bound\n   * @private\n   */\n  function setupBindings(inst) {\n    let notes = inst.__templateNotes;\n    if (notes.length) {\n      for (let i=0; i < notes.length; i++) {\n        let note = notes[i];\n        let node = inst.__templateNodes[i];\n        node.__dataHost = inst;\n        if (note.bindings) {\n          setupCompoundBinding(note, node);\n        }\n      }\n    }\n    if (inst.__notifyListeners) {\n      setupNotifyListeners(inst);\n    }\n  }\n\n  // -- for method-based effects (complexObserver & computed) --------------\n\n  /**\n   * Adds property effects for each argument in the method signature (and\n   * optionally, for the method name if `dynamic` is true) that calls the\n   * provided effect function.\n   *\n   * @param {Element | Object} model Prototype or instance\n   * @param {Object} sig Method signature metadata\n   * @param {string} type\n   * @param {Function} effectFn Function to run when arguments change\n   * @param {*=} methodInfo\n   * @param {Object=} dynamicFns Map indicating whether method names should\n   *   be included as a dependency to the effect. Note, defaults to true\n   *   if the signature is statci (sig.static is true).\n   * @private\n   */\n  function createMethodEffect(model, sig, type, effectFn, methodInfo, dynamicFns) {\n    let dynamicFn = sig.static || dynamicFns && dynamicFns[sig.methodName];\n    let info = {\n      methodName: sig.methodName,\n      args: sig.args,\n      methodInfo,\n      dynamicFn\n    };\n    for (let i=0, arg; (i<sig.args.length) && (arg=sig.args[i]); i++) {\n      if (!arg.literal) {\n        model._addPropertyEffect(arg.rootProperty, type, {\n          fn: effectFn, info: info, trigger: arg\n        });\n      }\n    }\n    if (dynamicFn) {\n      model._addPropertyEffect(sig.methodName, type, {\n        fn: effectFn, info: info\n      });\n    }\n  }\n\n  /**\n   * Calls a method with arguments marshaled from properties on the instance\n   * based on the method signature contained in the effect metadata.\n   *\n   * Multi-property observers, computed properties, and inline computing\n   * functions call this function to invoke the method, then use the return\n   * value accordingly.\n   *\n   * @param {Object} inst The instance the effect will be run on\n   * @param {string} property Name of property\n   * @param {*} value Current value of property\n   * @param {*} old Previous value of property\n   * @param {Object} info Effect metadata\n   * @private\n   */\n  function runMethodEffect(inst, property, props, oldProps, info) {\n    // Instances can optionally have a _methodHost which allows redirecting where\n    // to find methods. Currently used by `templatize`.\n    let context = inst._methodHost || inst;\n    let fn = context[info.methodName];\n    if (fn) {\n      let args = marshalArgs(inst.__data, info.args, property, props);\n      return fn.apply(context, args);\n    } else if (!info.dynamicFn) {\n      console.warn('method `' + info.methodName + '` not defined');\n    }\n  }\n\n  const emptyArray = [];\n\n  /**\n   * Parses an expression string for a method signature, and returns a metadata\n   * describing the method in terms of `methodName`, `static` (whether all the\n   * arguments are literals), and an array of `args`\n   *\n   * @param {string} expression The expression to parse\n   * @return {?Object} The method metadata object if a method expression was\n   *   found, otherwise `undefined`\n   * @private\n   */\n  function parseMethod(expression) {\n    // tries to match valid javascript property names\n    let m = expression.match(/([^\\s]+?)\\(([\\s\\S]*)\\)/);\n    if (m) {\n      let sig = { methodName: m[1], static: true };\n      if (m[2].trim()) {\n        // replace escaped commas with comma entity, split on un-escaped commas\n        let args = m[2].replace(/\\\\,/g, '&comma;').split(',');\n        return parseArgs(args, sig);\n      } else {\n        sig.args = emptyArray;\n        return sig;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Parses an array of arguments and sets the `args` property of the supplied\n   * signature metadata object. Sets the `static` property to false if any\n   * argument is a non-literal.\n   *\n   * @param {Array<string>} argList Array of argument names\n   * @param {Object} sig Method signature metadata object\n   * @return {Object} The updated signature metadata object\n   * @private\n   */\n  function parseArgs(argList, sig) {\n    sig.args = argList.map(function(rawArg) {\n      let arg = parseArg(rawArg);\n      if (!arg.literal) {\n        sig.static = false;\n      }\n      return arg;\n    }, this);\n    return sig;\n  }\n\n  /**\n   * Parses an individual argument, and returns an argument metadata object\n   * with the following fields:\n   *\n   *   {\n   *     value: 'prop',        // property/path or literal value\n   *     literal: false,       // whether argument is a literal\n   *     structured: false,    // whether the property is a path\n   *     rootProperty: 'prop', // the root property of the path\n   *     wildcard: false       // whether the argument was a wildcard '.*' path\n   *   }\n   *\n   * @param {string} rawArg The string value of the argument\n   * @return {Object} Argument metadata object\n   * @private\n   */\n  function parseArg(rawArg) {\n    // clean up whitespace\n    let arg = rawArg.trim()\n      // replace comma entity with comma\n      .replace(/&comma;/g, ',')\n      // repair extra escape sequences; note only commas strictly need\n      // escaping, but we allow any other char to be escaped since its\n      // likely users will do this\n      .replace(/\\\\(.)/g, '\\$1')\n      ;\n    // basic argument descriptor\n    let a = {\n      name: arg\n    };\n    // detect literal value (must be String or Number)\n    let fc = arg[0];\n    if (fc === '-') {\n      fc = arg[1];\n    }\n    if (fc >= '0' && fc <= '9') {\n      fc = '#';\n    }\n    switch(fc) {\n      case \"'\":\n      case '\"':\n        a.value = arg.slice(1, -1);\n        a.literal = true;\n        break;\n      case '#':\n        a.value = Number(arg);\n        a.literal = true;\n        break;\n    }\n    // if not literal, look for structured path\n    if (!a.literal) {\n      a.rootProperty = Polymer.Path.root(arg);\n      // detect structured path (has dots)\n      a.structured = Polymer.Path.isDeep(arg);\n      if (a.structured) {\n        a.wildcard = (arg.slice(-2) == '.*');\n        if (a.wildcard) {\n          a.name = arg.slice(0, -2);\n        }\n      }\n    }\n    return a;\n  }\n\n  /**\n   * Gather the argument values for a method specified in the provided array\n   * of argument metadata.\n   *\n   * The `path` and `value` arguments are used to fill in wildcard descriptor\n   * when the method is being called as a result of a path notification.\n   *\n   * @param {Object} data Instance data storage object to read properties from\n   * @param {Array<Object>} args Array of argument metadata\n   * @return {Array<*>} Array of argument values\n   * @private\n   */\n  function marshalArgs(data, args, path, props) {\n    let values = [];\n    for (let i=0, l=args.length; i<l; i++) {\n      let arg = args[i];\n      let name = arg.name;\n      let v;\n      if (arg.literal) {\n        v = arg.value;\n      } else {\n        if (arg.structured) {\n          v = Polymer.Path.get(data, name);\n          // when data is not stored e.g. `splices`\n          if (v === undefined) {\n            v = props[name];\n          }\n        } else {\n          v = data[name];\n        }\n      }\n      if (arg.wildcard) {\n        // Only send the actual path changed info if the change that\n        // caused the observer to run matched the wildcard\n        let baseChanged = (name.indexOf(path + '.') === 0);\n        let matches = (path.indexOf(name) === 0 && !baseChanged);\n        values[i] = {\n          path: matches ? path : name,\n          value: matches ? props[path] : v,\n          base: v\n        };\n      } else {\n        values[i] = v;\n      }\n    }\n    return values;\n  }\n\n  /**\n   * Initializes `__dataCompoundStorage` local storage on a bound node with\n   * initial literal data for compound bindings, and sets the joined\n   * literal parts to the bound property.\n   *\n   * When changes to compound parts occur, they are first set into the compound\n   * storage array for that property, and then the array is joined to result in\n   * the final value set to the property/attribute.\n   *\n   * @param {Object} note Annotation metadata\n   * @param {Node} node Bound node to initialize\n   * @private\n   */\n  function setupCompoundBinding(note, node) {\n    let bindings = note.bindings;\n    for (let i=0; i<bindings.length; i++) {\n      let binding = bindings[i];\n      if (binding.isCompound) {\n        // Create compound storage map\n        let storage = node.__dataCompoundStorage ||\n          (node.__dataCompoundStorage = {});\n        let parts = binding.parts;\n        // Copy literals from parts into storage for this binding\n        let literals = new Array(parts.length);\n        for (let j=0; j<parts.length; j++) {\n          literals[j] = parts[j].literal;\n        }\n        let name = binding.name;\n        storage[name] = literals;\n        // Configure properties with their literal parts\n        if (binding.literal && binding.kind == 'property') {\n          node[name] = binding.literal;\n        }\n      }\n    }\n  }\n\n  // data api\n\n  /**\n   * Sends array splice notifications (`.splices` and `.length`)\n   *\n   * Note: this implementation only accepts normalized paths\n   *\n   * @param {Element} inst Instance to send notifications to\n   * @param {Array} array The array the mutations occurred on\n   * @param {string} path The path to the array that was mutated\n   * @param {Array} splices Array of splice records\n   * @private\n   */\n  function notifySplices(inst, array, path, splices) {\n    let splicesPath = path + '.splices';\n    inst.notifyPath(splicesPath, { indexSplices: splices });\n    inst.notifyPath(path + '.length', array.length);\n    // Null here to allow potentially large splice records to be GC'ed.\n    inst.__data[splicesPath] = {indexSplices: null};\n  }\n\n  /**\n   * Creates a splice record and sends an array splice notification for\n   * the described mutation\n   *\n   * Note: this implementation only accepts normalized paths\n   *\n   * @param {Element} inst Instance to send notifications to\n   * @param {Array} array The array the mutations occurred on\n   * @param {string} path The path to the array that was mutated\n   * @param {number} index Index at which the array mutation occurred\n   * @param {number} addedCount Number of added items\n   * @param {Array} removed Array of removed items\n   * @private\n   */\n  function notifySplice(inst, array, path, index, addedCount, removed) {\n    notifySplices(inst, array, path, [{\n      index: index,\n      addedCount: addedCount,\n      removed: removed,\n      object: array,\n      type: 'splice'\n    }]);\n  }\n\n  /**\n   * Returns an upper-cased version of the string.\n   *\n   * @param {string} name String to uppercase\n   * @return {string} Uppercased string\n   * @private\n   */\n  function upper(name) {\n    return name[0].toUpperCase() + name.substring(1);\n  }\n\n  /**\n   * Sets the provided properties into pending data on the instance.\n   *\n   * @param {HTMLElement} inst Instance to apply data to\n   * @param {object} props Bag of instance properties to set\n   * @private\n   */\n  function initalizeInstanceProperties(inst, props) {\n    inst.__dataOld = inst.__dataOld || {};\n    inst.__dataPending = inst.__dataPending || {};\n    let readOnly = inst.__readOnly;\n    for (let prop in props) {\n      if (!readOnly || !readOnly[prop]) {\n        inst.__data[prop] = inst.__dataPending[prop] = props[prop];\n      }\n    }\n  }\n\n  /**\n   * Element class mixin that provides meta-programming for Polymer's template\n   * binding and data observation (collectively, \"property effects\") system.\n   *\n   * This mixin uses provides the following key methods for adding property effects\n   * to this element:\n   * - `_createPropertyObserver`\n   * - `_createMethodObserver`\n   * - `_createNotifyingProperty`\n   * - `_createReadOnlyProperty`\n   * - `_createReflectedProperty`\n   * - `_createComputedProperty`\n   * - `_bindTemplate`\n   *\n   * Each method creates one or more property accessors, along with metadata\n   * used by this mixin's implementation of `_propertiesChanged` to perform\n   * the property effects.  These methods may be called on element instances,\n   * but are designed to be called on element prototypes such that the work to\n   * set up accessors and effect metadata are done once per element class.\n   *\n   * @polymerMixin\n   * @mixes Polymer.TemplateStamp\n   * @mixes Polymer.PropertyAccessors\n   * @memberof Polymer\n   * @summary Element class mixin that provides meta-programming for Polymer's\n   * template binding and data observation system.\n   */\n  Polymer.PropertyEffects = Polymer.dedupingMixin(function(superClass) {\n\n    const propertyEffectsBase = Polymer.TemplateStamp(Polymer.PropertyAccessors(superClass));\n\n    /**\n     * @polymerMixinClass\n     * @unrestricted\n     */\n    class PropertyEffects extends propertyEffectsBase {\n\n      get PROPERTY_EFFECT_TYPES() {\n        return TYPES;\n      }\n\n      /**\n       * Overrides `Polymer.PropertyAccessors` implementation to initialize\n       * additional property-effect related properties.\n       *\n       * @override\n       */\n      _initializeProperties() {\n        super._initializeProperties();\n        this.__dataInitialized = false;\n        this.__dataClientsInitialized = false;\n        this.__dataPendingClients = null;\n        this.__dataToNotify = null;\n        this.__dataLinkedPaths = null;\n        this.__dataHasPaths = false;\n        // May be set on instance prior to upgrade\n        this.__dataCompoundStorage = this.__dataCompoundStorage || null;\n        this.__dataHost = this.__dataHost || null;\n        this.__dataTemp = {};\n        // Capture instance properties; these will be set into accessors\n        // during first flush. Don't set them here, since we want\n        // these to overwrite defaults/constructor assignments\n        for (let p in this.__propertyEffects) {\n          if (this.hasOwnProperty(p)) {\n            this.__dataInstanceProps = this.__dataInstanceProps || {};\n            this.__dataInstanceProps[p] = this[p];\n            delete this[p];\n          }\n        }\n      }\n\n      /**\n       * Overrides `Polymer.PropertyAccessors` implementation to provide a\n       * more efficient implementation of initializing properties from\n       * the prototype on the instance.\n       *\n       * @override\n       */\n      _initializeProtoProperties(props) {\n        this.__data = Object.create(props);\n        this.__dataPending = Object.create(props);\n        this.__dataOld = {};\n      }\n\n      // Prototype setup ----------------------------------------\n\n      /**\n       * Ensures an accessor exists for the specified property, and adds\n       * to a list of \"property effects\" that will run when the accessor for\n       * the specified property is set.  Effects are grouped by \"type\", which\n       * roughly corresponds to a phase in effect processing.  The effect\n       * metadata should be in the following form:\n       *\n       *   {\n       *     fn: effectFunction, // Reference to function to call to perform effect\n       *     info: { ... }       // Effect metadata passed to function\n       *     // path: '...'      // Will be set by this method based on path arg\n       *   }\n       *\n       * Effect functions are called with the following signature:\n       *\n       *   effectFunction(inst, property, currentValue, oldValue, info)\n       *\n       * This method may be called either on the prototype of a class\n       * using the PropertyEffects mixin (for best performance), or on\n       * an instance to add dynamic effects.  When called on an instance or\n       * subclass of a class that has already had property effects added to\n       * its prototype, the property effect lists will be cloned and added as\n       * own properties of the caller.\n       *\n       * @param {string} path Property (or path) that should trigger the effect\n       * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES\n       * @param {Object=} effect Effect metadata object\n       * @protected\n       */\n      _addPropertyEffect(property, type, effect) {\n        let effects = ensureOwnEffectMap(this, TYPES.ANY)[property];\n        if (!effects) {\n          effects = this.__propertyEffects[property] = [];\n          this._createPropertyAccessor(property,\n            type == TYPES.READ_ONLY);\n        }\n        // effects are accumulated into arrays per property based on type\n        if (effect) {\n          effects.push(effect);\n        }\n        effects = ensureOwnEffectMap(this, type)[property];\n        if (!effects) {\n          effects = this[type][property] = [];\n        }\n        effects.push(effect);\n      }\n\n      /**\n       * Returns whether the current prototype/instance has a property effect\n       * of a certain type.\n       *\n       * @param {string} property Property name\n       * @param {string=} type Effect type, from this.PROPERTY_EFFECT_TYPES\n       * @return {boolean} True if the prototype/instance has an effect of this type\n       * @protected\n       */\n      _hasPropertyEffect(property, type) {\n        let effects = this[type || TYPES.ANY];\n        return Boolean(effects && effects[property]);\n      }\n\n      /**\n       * Returns whether the current prototype/instance has a \"read only\"\n       * accessor for the given property.\n       *\n       * @param {string} property Property name\n       * @return {boolean} True if the prototype/instance has an effect of this type\n       * @protected\n       */\n      _hasReadOnlyEffect(property) {\n        return this._hasPropertyEffect(property, TYPES.READ_ONLY);\n      }\n\n      /**\n       * Returns whether the current prototype/instance has a \"notify\"\n       * property effect for the given property.\n       *\n       * @param {string} property Property name\n       * @return {boolean} True if the prototype/instance has an effect of this type\n       * @protected\n       */\n      _hasNotifyEffect(property) {\n        return this._hasPropertyEffect(property, TYPES.NOTIFY);\n      }\n\n      /**\n       * Returns whether the current prototype/instance has a \"reflect to attribute\"\n       * property effect for the given property.\n       *\n       * @param {string} property Property name\n       * @return {boolean} True if the prototype/instance has an effect of this type\n       * @protected\n       */\n      _hasReflectEffect(property) {\n        return this._hasPropertyEffect(property, TYPES.REFLECT);\n      }\n\n      /**\n       * Returns whether the current prototype/instance has a \"computed\"\n       * property effect for the given property.\n       *\n       * @param {string} property Property name\n       * @return {boolean} True if the prototype/instance has an effect of this type\n       * @protected\n       */\n      _hasComputedEffect(property) {\n        return this._hasPropertyEffect(property, TYPES.COMPUTE);\n      }\n\n      // Runtime ----------------------------------------\n\n      /**\n       * Sets a pending property or path.  If the root property of the path in\n       * question had no accessor, the path is set, otherwise it is enqueued\n       * via `_setPendingProperty`.\n       *\n       * This function isolates relatively expensive functionality necessary\n       * for the public API (`set`, `setProperties`, `notifyPath`, and property\n       * change listeners via {{...}} bindings), such that it is only done\n       * when paths enter the system, and not at every propagation step.  It\n       * also sets a `__dataHasPaths` flag on the instance which is used to\n       * fast-path slower path-matching code in the property effects host paths.\n       *\n       * `path` can be a path string or array of path parts as accepted by the\n       * public API.\n       *\n       * @param {string | !Array<number|string>} path Path to set\n       * @param {*} value Value to set\n       * @param {boolean=} isPathNotification If the path being set is a path\n       *   notification of an already changed value, as opposed to a request\n       *   to set and notify the change.  In the latter `false` case, a dirty\n       *   check is performed and then the value is set to the path before\n       *   enqueuing the pending property change.\n       * @return {boolean} Returns true if the property/path was enqueued in\n       *   the pending changes bag.\n       * @protected\n       */\n      _setPendingPropertyOrPath(path, value, shouldNotify, isPathNotification) {\n        let rootProperty = Polymer.Path.root(Array.isArray(path) ? path[0] : path);\n        let hasEffect = this.__propertyEffects && this.__propertyEffects[rootProperty];\n        let isPath = (rootProperty !== path);\n        if (hasEffect) {\n          if (isPath) {\n            if (!isPathNotification) {\n              // Dirty check changes being set to a path against the actual object,\n              // since this is the entry point for paths into the system; from here\n              // the only dirty checks are against the `__dataTemp` cache to prevent\n              // duplicate work in the same turn only. Note, if this was a notification\n              // of a change already set to a path (isPathNotification: true),\n              // we always let the change through and skip the `set` since it was\n              // already dirty checked at the point of entry and the underlying\n              // object has already been updated\n              let old = Polymer.Path.get(this, path);\n              path = /** @type {string} */ Polymer.Path.set(this, path, value);\n              // Use property-accessor's simpler dirty check\n              if (!path || !super._shouldPropertyChange(path, value, old)) {\n                return false;\n              }\n            }\n            this.__dataHasPaths = true;\n          }\n          return this._setPendingProperty(path, value, shouldNotify);\n        } else {\n          if (isPath) {\n            Polymer.Path.set(this, path, value);\n          } else {\n            this[path] = value;\n          }\n        }\n        return false;\n      }\n\n      /**\n       * Applies a value to a non-Polymer element/node's property.\n       *\n       * The implementation makes a best-effort at binding interop:\n       * Some native element properties have side-effects when\n       * re-setting the same value (e.g. setting <input>.value resets the\n       * cursor position), so we do a dirty-check before setting the value.\n       * However, for better interop with non-Polymer custom elements that\n       * accept objects, we explicitly re-set object changes coming from the\n       * Polymer world (which may include deep object changes without the\n       * top reference changing), erring on the side of providing more\n       * information.\n       *\n       * Users may override this method to provide alternate approaches.\n       *\n       * @param {Node} node The node to set a property on\n       * @param {string} prop The property to set\n       * @param {*} value The value to set\n       * @protected\n       */\n      _setUnmanagedPropertyToNode(node, prop, value) {\n        // It is a judgment call that resetting primitives is\n        // \"bad\" and resettings objects is also \"good\"; alternatively we could\n        // implement a whitelist of tag & property values that should never\n        // be reset (e.g. <input>.value && <select>.value)\n        if (value !== node[prop] || typeof value == 'object') {\n          node[prop] = value;\n        }\n      }\n\n      /**\n       * Overrides the `PropertyAccessors` implementation to introduce special\n       * dirty check logic depending on the property & value being set:\n       *\n       * 1. Any value set to a path (e.g. 'obj.prop': 42 or 'obj.prop': {...})\n       *    Stored in `__dataTemp`, dirty checked against `__dataTemp`\n       * 2. Object set to simple property (e.g. 'prop': {...})\n       *    Stored in `__dataTemp` and `__data`, dirty checked against\n       *    `__dataTemp` by default implementation of `_shouldPropertyChange`\n       * 3. Primitive value set to simple property (e.g. 'prop': 42)\n       *    Stored in `__data`, dirty checked against `__data`\n       *\n       * The dirty-check is important to prevent cycles due to two-way\n       * notification, but paths and objects are only dirty checked against any\n       * previous value set during this turn via a \"temporary cache\" that is\n       * cleared when the last `_propertiesChaged` exits. This is so:\n       * a. any cached array paths (e.g. 'array.3.prop') may be invalidated\n       *    due to array mutations like shift/unshift/splice; this is fine\n       *    since path changes are dirty-checked at user entry points like `set`\n       * b. dirty-checking for objects only lasts one turn to allow the user\n       *    to mutate the object in-place and re-set it with the same identity\n       *    and have all sub-properties re-propagated in a subsequent turn.\n       *\n       * The temp cache is not necessarily sufficient to prevent invalid array\n       * paths, since a splice can happen during the same turn (with pathological\n       * user code); we could introduce a \"fixup\" for temporarily cached array\n       * paths if needed: https://github.com/Polymer/polymer/issues/4227\n       *\n       * @override\n       */\n      _setPendingProperty(property, value, shouldNotify) {\n        let isPath = this.__dataHasPaths && Polymer.Path.isPath(property);\n        let prevProps = isPath ? this.__dataTemp : this.__data;\n        if (this._shouldPropertyChange(property, value, prevProps[property])) {\n          if (!this.__dataPending) {\n            this.__dataPending = {};\n            this.__dataOld = {};\n          }\n          // Ensure old is captured from the last turn\n          if (!(property in this.__dataOld)) {\n            this.__dataOld[property] = this.__data[property];\n          }\n          // Paths are stored in temporary cache (cleared at end of turn),\n          // which is used for dirty-checking, all others stored in __data\n          if (isPath) {\n            this.__dataTemp[property] = value;\n          } else {\n            this.__data[property] = value;\n          }\n          // All changes go into pending property bag, passed to _propertiesChanged\n          this.__dataPending[property] = value;\n          // Track properties that should notify separately\n          if (isPath || (this.__notifyEffects && this.__notifyEffects[property])) {\n            this.__dataToNotify = this.__dataToNotify || {};\n            this.__dataToNotify[property] = shouldNotify;\n          }\n          return true;\n        }\n      }\n\n      /**\n       * Overrides base implementation to ensure all accessors set `shouldNotify`\n       * to true, for per-property notification tracking.\n       *\n       * @override\n       */\n      _setProperty(property, value) {\n        if (this._setPendingProperty(property, value, true)) {\n          this._invalidateProperties();\n        }\n      }\n\n      /**\n       * Overrides `PropertyAccessor`'s default async queuing of\n       * `_propertiesChanged`: if `__dataInitialized` is false (has not yet been\n       * manually flushed), the function no-ops; otherwise flushes\n       * `_propertiesChanged` synchronously.\n       *\n       * @override\n       */\n      _invalidateProperties() {\n        if (this.__dataInitialized) {\n          this._flushProperties();\n        }\n      }\n\n      /**\n       * Enqueues the given client on a list of pending clients, whose\n       * pending property changes can later be flushed via a call to\n       * `_flushClients`.\n       *\n       * @param {Object} client PropertyEffects client to enqueue\n       * @protected\n       */\n      _enqueueClient(client) {\n        this.__dataPendingClients = this.__dataPendingClients || [];\n        if (client !== this) {\n          this.__dataPendingClients.push(client);\n        }\n      }\n\n      /**\n       * Flushes any clients previously enqueued via `_enqueueClient`, causing\n       * their `_flushProperties` method to run.\n       *\n       * @protected\n       */\n      _flushClients() {\n        if (!this.__dataClientsInitialized) {\n          this._readyClients();\n        }\n        // Flush all clients\n        let clients = this.__dataPendingClients;\n        if (clients) {\n          this.__dataPendingClients = null;\n          for (let i=0; i < clients.length; i++) {\n            let client = clients[i];\n            if (!client.__dataInitialized || client.__dataPending) {\n              client._flushProperties();\n            }\n          }\n        }\n      }\n\n      /**\n       * Sets a bag of property changes to this instance, and\n       * synchronously processes all effects of the properties as a batch.\n       *\n       * Property names must be simple properties, not paths.  Batched\n       * path propagation is not supported.\n       *\n       * @param {Object} props Bag of one or more key-value pairs whose key is\n       *   a property and value is the new value to set for that property.\n       * @public\n       */\n      setProperties(props) {\n        for (let path in props) {\n          if (!this.__readOnly || !this.__readOnly[path]) {\n            //TODO(kschaaf): explicitly disallow paths in setProperty?\n            // wildcard observers currently only pass the first changed path\n            // in the `info` object, and you could do some odd things batching\n            // paths, e.g. {'foo.bar': {...}, 'foo': null}\n            this._setPendingPropertyOrPath(path, props[path], true);\n          }\n        }\n        this._invalidateProperties();\n      }\n\n      /**\n       * Overrides PropertyAccessor's default async queuing of\n       * `_propertiesChanged`, to instead synchronously flush\n       * `_propertiesChanged` unless the `this._asyncEffects` property is true.\n       *\n       * If this is the first time properties are being flushed, the `ready`\n       * callback will be called.\n       *\n       * @override\n       */\n      _flushProperties() {\n        if (!this.__dataInitialized) {\n          this.ready()\n        } else if (this.__dataPending) {\n          super._flushProperties();\n          if (!this.__dataCounter) {\n            // Clear temporary cache at end of turn\n            this.__dataTemp = {};\n          }\n        }\n      }\n\n      /**\n       * Polymer-specific lifecycle callback called the first time properties\n       * are being flushed.  Prior to `ready`, all property sets through\n       * accessors are queued and their effects are flushed after this method\n       * returns.\n       *\n       * Users may override this function to implement behavior that is\n       * dependent on the element having its properties initialized, e.g.\n       * from defaults (initialized from `constructor`, `_initializeProperties`),\n       * `attributeChangedCallback`, or binding values propagated from host\n       * \"binding effects\".  `super.ready()` must be called to ensure the\n       * data system becomes enabled.\n       *\n       * @public\n       */\n      ready() {\n        // Update instance properties that shadowed proto accessors; these take\n        // priority over any defaults set in `properties` or constructor\n        let instanceProps = this.__dataInstanceProps;\n        if (instanceProps) {\n          initalizeInstanceProperties(this, instanceProps);\n        }\n        // Enable acceessors\n        this.__dataInitialized = true;\n        if (this.__dataPending) {\n          // Run normal flush\n          this._flushProperties();\n        } else {\n          this._readyClients();\n        }\n      }\n\n      /**\n       * Perform any initial setup on client dom. Called before the first\n       * `_flushProperties` call on client dom and before any element\n       * observers are called.\n       *\n       * @protected\n       */\n      _readyClients() {\n        this.__dataClientsInitialized = true;\n      }\n\n      /**\n       * Stamps the provided template and performs instance-time setup for\n       * Polymer template features, including data bindings, declarative event\n       * listeners, and the `this.$` map of `id`'s to nodes.  A document fragment\n       * is returned containing the stamped DOM, ready for insertion into the\n       * DOM.\n       *\n       * Note that for host data to be bound into the stamped DOM, the template\n       * must have been previously bound to the prototype via a call to\n       * `_bindTemplate`, which performs one-time template binding work.\n       *\n       * Note that this method currently only supports being called once per\n       * instance.\n       *\n       * @param {HTMLTemplateElement} template Template to stamp\n       * @return {DocumentFragment} Cloned template content\n       * @protected\n       */\n      _stampTemplate(template) {\n        let dom = super._stampTemplate(template);\n        setupBindings(this);\n        return dom;\n      }\n\n      /**\n       * Implements `PropertyAccessors`'s properties changed callback.\n       *\n       * Runs each class of effects for the batch of changed properties in\n       * a specific order (compute, propagate, reflect, observe, notify).\n       *\n       * @override\n       */\n      _propertiesChanged(currentProps, changedProps, oldProps) {\n        // ----------------------------\n        // let c = Object.getOwnPropertyNames(changedProps || {});\n        // window.debug && console.group(this.localName + '#' + this.id + ': ' + c);\n        // if (window.debug) { debugger; }\n        // ----------------------------\n        let hasPaths = this.__dataHasPaths;\n        this.__dataHasPaths = false;\n        // Compute properties\n        runComputedEffects(this, changedProps, oldProps, hasPaths);\n        // Compute linked paths\n        computeLinkedPaths(this, changedProps, hasPaths);\n        // Clear notify properties prior to possible reentry (propagate, observe),\n        // but after computing effects have a chance to add to them\n        let notifyProps = this.__dataToNotify;\n        this.__dataToNotify = null;\n        // Propagate properties to clients\n        runEffects(this, this.__propagateEffects, changedProps, oldProps, hasPaths);\n        // Flush clients\n        this._flushClients();\n        // Reflect properties\n        runEffects(this, this.__reflectEffects, changedProps, oldProps, hasPaths);\n        // Observe properties\n        runEffects(this, this.__observeEffects, changedProps, oldProps, hasPaths);\n        // Notify properties to host\n        if (notifyProps) {\n          runNotifyEffects(this, notifyProps, changedProps, oldProps, hasPaths);\n        }\n        // ----------------------------\n        // window.debug && console.groupEnd(this.localName + '#' + this.id + ': ' + c);\n        // ----------------------------\n      }\n\n      /**\n       * Aliases one data path as another, such that path notifications from one\n       * are routed to the other.\n       *\n       * @method linkPaths\n       * @param {string | !Array<string|number>} to Target path to link.\n       * @param {string | !Array<string|number>} from Source path to link.\n       * @public\n       */\n      linkPaths(to, from) {\n        to = Polymer.Path.normalize(to);\n        from = Polymer.Path.normalize(from);\n        this.__dataLinkedPaths = this.__dataLinkedPaths || {};\n        this.__dataLinkedPaths[to] = from;\n      }\n\n      /**\n       * Removes a data path alias previously established with `_linkPaths`.\n       *\n       * Note, the path to unlink should be the target (`to`) used when\n       * linking the paths.\n       *\n       * @method unlinkPaths\n       * @param {string | !Array<string|number>} path Target path to unlink.\n       * @public\n       */\n      unlinkPaths(path) {\n        path = Polymer.Path.normalize(path);\n        if (this.__dataLinkedPaths) {\n          delete this.__dataLinkedPaths[path];\n        }\n      }\n\n      /**\n       * Notify that an array has changed.\n       *\n       * Example:\n       *\n       *     this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n       *     ...\n       *     this.items.splice(1, 1, {name: 'Sam'});\n       *     this.items.push({name: 'Bob'});\n       *     this.notifySplices('items', [\n       *       { index: 1, removed: [{name: 'Todd'}], addedCount: 1, obect: this.items, type: 'splice' },\n       *       { index: 3, removed: [], addedCount: 1, object: this.items, type: 'splice'}\n       *     ]);\n       *\n       * @param {string} path Path that should be notified.\n       * @param {Array} splices Array of splice records indicating ordered\n       *   changes that occurred to the array. Each record should have the\n       *   following fields:\n       *    * index: index at which the change occurred\n       *    * removed: array of items that were removed from this index\n       *    * addedCount: number of new items added at this index\n       *    * object: a reference to the array in question\n       *    * type: the string literal 'splice'\n       *\n       *   Note that splice records _must_ be normalized such that they are\n       *   reported in index order (raw results from `Object.observe` are not\n       *   ordered and must be normalized/merged before notifying).\n       * @public\n      */\n      notifySplices(path, splices) {\n        let info = {};\n        let array = /** @type {Array} */(Polymer.Path.get(this, path, info));\n        notifySplices(this, array, info.path, splices);\n      }\n\n      /**\n       * Convenience method for reading a value from a path.\n       *\n       * Note, if any part in the path is undefined, this method returns\n       * `undefined` (this method does not throw when dereferencing undefined\n       * paths).\n       *\n       * @method get\n       * @param {(string|!Array<(string|number)>)} path Path to the value\n       *   to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n       *   or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n       *   bracketed expressions are not supported; string-based path parts\n       *   *must* be separated by dots.  Note that when dereferencing array\n       *   indices, the index may be used as a dotted part directly\n       *   (e.g. `users.12.name` or `['users', 12, 'name']`).\n       * @param {Object=} root Root object from which the path is evaluated.\n       * @return {*} Value at the path, or `undefined` if any part of the path\n       *   is undefined.\n       * @public\n       */\n      get(path, root) {\n        return Polymer.Path.get(root || this, path);\n      }\n\n      /**\n       * Convenience method for setting a value to a path and notifying any\n       * elements bound to the same path.\n       *\n       * Note, if any part in the path except for the last is undefined,\n       * this method does nothing (this method does not throw when\n       * dereferencing undefined paths).\n       *\n       * @method set\n       * @param {(string|!Array<(string|number)>)} path Path to the value\n       *   to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n       *   or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n       *   bracketed expressions are not supported; string-based path parts\n       *   *must* be separated by dots.  Note that when dereferencing array\n       *   indices, the index may be used as a dotted part directly\n       *   (e.g. `'users.12.name'` or `['users', 12, 'name']`).\n       * @param {*} value Value to set at the specified path.\n       * @param {Object=} root Root object from which the path is evaluated.\n       *   When specified, no notification will occur.\n       * @public\n      */\n      set(path, value, root) {\n        if (root) {\n          Polymer.Path.set(root, path, value);\n        } else {\n          if (!this.__readOnly || !this.__readOnly[/** @type {string} */(path)]) {\n            if (this._setPendingPropertyOrPath(path, value, true)) {\n              this._invalidateProperties();\n            }\n          }\n        }\n      }\n\n      /**\n       * Adds items onto the end of the array at the path specified.\n       *\n       * The arguments after `path` and return value match that of\n       * `Array.prototype.push`.\n       *\n       * This method notifies other paths to the same array that a\n       * splice occurred to the array.\n       *\n       * @method push\n       * @param {string} path Path to array.\n       * @param {...*} items Items to push onto array\n       * @return {number} New length of the array.\n       * @public\n       */\n      push(path, ...items) {\n        let info = {};\n        let array = /** @type {Array}*/(Polymer.Path.get(this, path, info));\n        let len = array.length;\n        let ret = array.push(...items);\n        if (items.length) {\n          notifySplice(this, array, info.path, len, items.length, []);\n        }\n        return ret;\n      }\n\n      /**\n       * Removes an item from the end of array at the path specified.\n       *\n       * The arguments after `path` and return value match that of\n       * `Array.prototype.pop`.\n       *\n       * This method notifies other paths to the same array that a\n       * splice occurred to the array.\n       *\n       * @method pop\n       * @param {string} path Path to array.\n       * @return {*} Item that was removed.\n       * @public\n       */\n      pop(path) {\n        let info = {};\n        let array = /** @type {Array} */(Polymer.Path.get(this, path, info));\n        let hadLength = Boolean(array.length);\n        let ret = array.pop();\n        if (hadLength) {\n          notifySplice(this, array, info.path, array.length, 0, [ret]);\n        }\n        return ret;\n      }\n\n      /**\n       * Starting from the start index specified, removes 0 or more items\n       * from the array and inserts 0 or more new items in their place.\n       *\n       * The arguments after `path` and return value match that of\n       * `Array.prototype.splice`.\n       *\n       * This method notifies other paths to the same array that a\n       * splice occurred to the array.\n       *\n       * @method splice\n       * @param {string} path Path to array.\n       * @param {number} start Index from which to start removing/inserting.\n       * @param {number} deleteCount Number of items to remove.\n       * @param {...*} items Items to insert into array.\n       * @return {Array} Array of removed items.\n       * @public\n       */\n      splice(path, start, deleteCount, ...items) {\n        let info = {};\n        let array = /** @type {Array} */(Polymer.Path.get(this, path, info));\n        // Normalize fancy native splice handling of crazy start values\n        if (start < 0) {\n          start = array.length - Math.floor(-start);\n        } else {\n          start = Math.floor(start);\n        }\n        if (!start) {\n          start = 0;\n        }\n        let ret = array.splice(start, deleteCount, ...items);\n        if (items.length || ret.length) {\n          notifySplice(this, array, info.path, start, items.length, ret);\n        }\n        return ret;\n      }\n\n      /**\n       * Removes an item from the beginning of array at the path specified.\n       *\n       * The arguments after `path` and return value match that of\n       * `Array.prototype.pop`.\n       *\n       * This method notifies other paths to the same array that a\n       * splice occurred to the array.\n       *\n       * @method shift\n       * @param {string} path Path to array.\n       * @return {*} Item that was removed.\n       * @public\n       */\n      shift(path) {\n        let info = {};\n        let array = /** @type {Array} */(Polymer.Path.get(this, path, info));\n        let hadLength = Boolean(array.length);\n        let ret = array.shift();\n        if (hadLength) {\n          notifySplice(this, array, info.path, 0, 0, [ret]);\n        }\n        return ret;\n      }\n\n      /**\n       * Adds items onto the beginning of the array at the path specified.\n       *\n       * The arguments after `path` and return value match that of\n       * `Array.prototype.push`.\n       *\n       * This method notifies other paths to the same array that a\n       * splice occurred to the array.\n       *\n       * @method unshift\n       * @param {string} path Path to array.\n       * @param {...*} items Items to insert info array\n       * @return {number} New length of the array.\n       * @public\n       */\n      unshift(path, ...items) {\n        let info = {};\n        let array = /** @type {Array} */(Polymer.Path.get(this, path, info));\n        let ret = array.unshift(...items);\n        if (items.length) {\n          notifySplice(this, array, info.path, 0, items.length, []);\n        }\n        return ret;\n      }\n\n      /**\n       * Notify that a path has changed.\n       *\n       * Example:\n       *\n       *     this.item.user.name = 'Bob';\n       *     this.notifyPath('item.user.name');\n       *\n       * @param {string} path Path that should be notified.\n       * @param {*=} value Value at the path (optional).\n       * @public\n      */\n      notifyPath(path, value) {\n        /** @type {string} */\n        let propPath;\n        if (arguments.length == 1) {\n          // Get value if not supplied\n          let info = {};\n          value = Polymer.Path.get(this, path, info);\n          propPath = info.path;\n        } else if (Array.isArray(path)) {\n          // Normalize path if needed\n          propPath = Polymer.Path.normalize(path);\n        } else {\n          propPath = /** @type{string} */(path);\n        }\n        if (this._setPendingPropertyOrPath(propPath, value, true, true)) {\n          this._invalidateProperties();\n        }\n      }\n\n      /**\n       * Creates a read-only accessor for the given property.\n       *\n       * To set the property, use the protected `_setProperty` API.\n       * To create a custom protected setter (e.g. `_setMyProp()` for\n       * property `myProp`), pass `true` for `protectedSetter`.\n       *\n       * Note, if the property will have other property effects, this method\n       * should be called first, before adding other effects.\n       *\n       * @param {string} property Property name\n       * @param {boolean=} protectedSetter Creates a custom protected setter\n       *   when `true`.\n       * @protected\n       */\n      _createReadOnlyProperty(property, protectedSetter) {\n        this._addPropertyEffect(property, TYPES.READ_ONLY);\n        if (protectedSetter) {\n          this['_set' + upper(property)] = function(value) {\n            this._setProperty(property, value);\n          }\n        }\n      }\n\n      /**\n       * Creates a single-property observer for the given property.\n       *\n       * @param {string} property Property name\n       * @param {string} methodName Name of observer method to call\n       * @param {boolean=} dynamicFn Whether the method name should be included as\n       *   a dependency to the effect.\n       * @protected\n       */\n      _createPropertyObserver(property, methodName, dynamicFn) {\n        let info = { property, methodName };\n        this._addPropertyEffect(property, TYPES.OBSERVE, {\n          fn: runObserverEffect, info, trigger: {name: property}\n        });\n        if (dynamicFn) {\n          this._addPropertyEffect(methodName, TYPES.OBSERVE, {\n            fn: runObserverEffect, info, trigger: {name: methodName}\n          });\n        }\n      }\n\n      /**\n       * Creates a multi-property \"method observer\" based on the provided\n       * expression, which should be a string in the form of a normal Javascript\n       * function signature: `'methodName(arg1, [..., argn])'`.  Each argument\n       * should correspond to a property or path in the context of this\n       * prototype (or instance), or may be a literal string or number.\n       *\n       * @param {string} expression Method expression\n       * @param {Object=} dynamicFns Map indicating whether method names should\n       *   be included as a dependency to the effect.\n       * @protected\n       */\n      _createMethodObserver(expression, dynamicFns) {\n        let sig = parseMethod(expression);\n        if (!sig) {\n          throw new Error(\"Malformed observer expression '\" + expression + \"'\");\n        }\n        createMethodEffect(this, sig, TYPES.OBSERVE, runMethodEffect, null, dynamicFns);\n      }\n\n      /**\n       * Causes the setter for the given property to dispatch `<property>-changed`\n       * events to notify of changes to the property.\n       *\n       * @param {string} property Property name\n       * @protected\n       */\n      _createNotifyingProperty(property) {\n        this._addPropertyEffect(property, TYPES.NOTIFY, {\n          fn: runNotifyEffect,\n          info: {\n            eventName: CaseMap.camelToDashCase(property) + '-changed',\n            property: property\n          }\n        });\n      }\n\n      /**\n       * Causes the setter for the given property to reflect the property value\n       * to a (dash-cased) attribute of the same name.\n       *\n       * @param {string} property Property name\n       * @protected\n       */\n      _createReflectedProperty(property) {\n        let attr = CaseMap.camelToDashCase(property);\n        if (attr[0] === '-') {\n          console.warn('Property ' + property + ' cannot be reflected to attribute ' +\n            attr + ' because \"-\" is not a valid starting attribute name. Use a lowercase first letter for the property thisead.');\n        } else {\n          this._addPropertyEffect(property, TYPES.REFLECT, {\n            fn: runReflectEffect,\n            info: {\n              attrName: attr\n            }\n          });\n        }\n      }\n\n      /**\n       * Creates a computed property whose value is set to the result of the\n       * method described by the given `expression` each time one or more\n       * arguments to the method changes.  The expression should be a string\n       * in the form of a normal Javascript function signature:\n       * `'methodName(arg1, [..., argn])'`\n       *\n       * @param {string} property Name of computed property to set\n       * @param {string} expression Method expression\n       * @param {Object=} dynamicFns Map indicating whether method names should\n       *   be included as a dependency to the effect.\n       * @protected\n       */\n      _createComputedProperty(property, expression, dynamicFns) {\n        let sig = parseMethod(expression);\n        if (!sig) {\n          throw new Error(\"Malformed computed expression '\" + expression + \"'\");\n        }\n        createMethodEffect(this, sig, TYPES.COMPUTE, runComputedEffect, property, dynamicFns);\n      }\n\n      // -- binding ----------------------------------------------\n\n      /**\n       * Creates \"binding\" property effects for all binding bindings\n       * in the provided template that forward host properties into DOM stamped\n       * from the template via `_stampTemplate`.\n       *\n       * @param {HTMLTemplateElement} template Template containing binding\n       *   bindings\n       * @param {Object=} dynamicFns Map indicating whether method names should\n       *   be included as a dependency to the effect.\n       * @protected\n       */\n      _bindTemplate(template, dynamicFns) {\n        // Clear any existing propagation effects inherited from superClass\n        this.__propagateEffects = {};\n        this.__notifyListeners = [];\n        let notes = this._parseTemplateAnnotations(template);\n        processAnnotations(notes);\n        for (let i=0, note; (i<notes.length) && (note=notes[i]); i++)  {\n          // where to find the node in the concretized list\n          let b$ = note.bindings;\n          for (let j=0, binding; (j<b$.length) && (binding=b$[j]); j++) {\n            if (shouldAddListener(binding)) {\n              addAnnotatedListener(this, i, binding.name,\n                binding.parts[0].value,\n                binding.parts[0].event,\n                binding.parts[0].negate);\n            }\n            addBindingEffect(this, binding, i, dynamicFns);\n          }\n        }\n      }\n\n    }\n\n    return PropertyEffects;\n  });\n\n})();\n\n\n\n\n// WEBPACK FOOTER //\n// ./bower_components/polymer/lib/mixins/property-effects.html","/*__wc__loader*/\n\n\n    (function(document) {\n      var _htmlStr = \"\\n\\n\\n\\n\";\n      if (document.head) {\n        var el = document.head;\n        var div = document.createElement('div');\n        div.innerHTML = _htmlStr;\n        while (div.children.length > 0) {\n          el.appendChild(div.children[0]);\n        }\n      } else {\n        document.write(_htmlStr);\n      }\n    })(document);\n    \n\n\n    (function(document) {\n      var _htmlStr = \"\";\n      if (document.body) {\n        var el = document.body;\n        var div = document.createElement('div');\n        div.innerHTML = _htmlStr;\n        while (div.children.length > 0) {\n          el.appendChild(div.children[0]);\n        }\n      } else {\n        document.write(_htmlStr);\n      }\n    })(document);\n    \n\nrequire('../utils/boot.html');\n\nrequire('../utils/mixin.html');\n\n\n(function() {\n\n  'use strict';\n\n  // null-array (shared empty array to avoid null-checks)\n  const emptyArray = [];\n\n  let bindingRegex = (function() {\n    let IDENT  = '(?:' + '[a-zA-Z_$][\\\\w.:$\\\\-*]*' + ')';\n    let NUMBER = '(?:' + '[-+]?[0-9]*\\\\.?[0-9]+(?:[eE][-+]?[0-9]+)?' + ')';\n    let SQUOTE_STRING = '(?:' + '\\'(?:[^\\'\\\\\\\\]|\\\\\\\\.)*\\'' + ')';\n    let DQUOTE_STRING = '(?:' + '\"(?:[^\"\\\\\\\\]|\\\\\\\\.)*\"' + ')';\n    let STRING = '(?:' + SQUOTE_STRING + '|' + DQUOTE_STRING + ')';\n    let ARGUMENT = '(?:' + IDENT + '|' + NUMBER + '|' +  STRING + '\\\\s*' + ')';\n    let ARGUMENTS = '(?:' + ARGUMENT + '(?:,\\\\s*' + ARGUMENT + ')*' + ')';\n    let ARGUMENT_LIST = '(?:' + '\\\\(\\\\s*' +\n                                  '(?:' + ARGUMENTS + '?' + ')' +\n                                '\\\\)\\\\s*' + ')';\n    let BINDING = '(' + IDENT + '\\\\s*' + ARGUMENT_LIST + '?' + ')'; // Group 3\n    let OPEN_BRACKET = '(\\\\[\\\\[|{{)' + '\\\\s*';\n    let CLOSE_BRACKET = '(?:]]|}})';\n    let NEGATE = '(?:(!)\\\\s*)?'; // Group 2\n    let EXPRESSION = OPEN_BRACKET + NEGATE + BINDING + CLOSE_BRACKET;\n    return new RegExp(EXPRESSION, \"g\");\n  })();\n\n  let insertionPointTag = 'slot';\n\n  /**\n   * Scans a template to produce an annotation map that stores expression metadata\n   * and information that associates the metadata to nodes in a template instance.\n   *\n   * Supported annotations are:\n   *   * id attributes\n   *   * binding annotations in text nodes\n   *     * double-mustache expressions: {{expression}}\n   *     * double-bracket expressions: [[expression]]\n   *   * binding annotations in attributes\n   *     * attribute-bind expressions: name=\"{{expression}} || [[expression]]\"\n   *     * property-bind expressions: name*=\"{{expression}} || [[expression]]\"\n   *     * property-bind expressions: name:=\"expression\"\n   *   * event annotations\n   *     * event delegation directives: on-<eventName>=\"expression\"\n   *\n   * Generated data-structure:\n   *   [\n   *     {\n   *       id: '<id>',\n   *       events: [\n   *         {\n   *           mode: ['auto'|''],\n   *           name: '<name>'\n   *           value: '<expression>'\n   *         }, ...\n   *       ],\n   *       bindings: [\n   *         {\n   *           kind: ['text'|'attribute'|'property'],\n   *           mode: ['auto'|''],\n   *           name: '<name>'\n   *           value: '<expression>'\n   *         }, ...\n   *       ],\n   *       parent: <reference to parent annotation>,\n   *       index: <integer index in parent's childNodes collection>\n   *     },\n   *     ...\n   *   ]\n   *\n   * @param {HTMLTemplateElement} template\n   * @param {boolean=} stripWhiteSpace\n   * @return {Array<Object>}\n   */\n  function parseTemplateAnnotations(template, stripWhiteSpace, ownerDocument) {\n    // TODO(kschaaf): File issue and/or remove when fixed\n    // hold a reference to content as _content to prevent odd Chrome gc issue\n    // nested templates also may receive their content as _content\n    let content = (template._content = template._content || template.content);\n    // since a template may be re-used, memo-ize notes.\n    if (!content._notes) {\n      content._notes = [];\n      // TODO(sorvell): whitespace and processAnnotations need to be factored\n      // into plugins\n      ownerDocument = ownerDocument || template.ownerDocument;\n      parseNodeAnnotations(content, content._notes,\n        stripWhiteSpace || template.hasAttribute('strip-whitespace'), ownerDocument);\n    }\n    return content._notes;\n  }\n\n  // add annotations gleaned from subtree at `node` to `list`\n  function parseNodeAnnotations(node, list, stripWhiteSpace, ownerDocument) {\n    return node.nodeType === Node.TEXT_NODE ?\n      parseTextNodeAnnotation(node, list) :\n        parseElementAnnotations(node, list, stripWhiteSpace, ownerDocument);\n  }\n\n  function parseBindings(text) {\n    let parts = [];\n    let lastIndex = 0;\n    let m;\n    // Example: \"literal1{{prop}}literal2[[!compute(foo,bar)]]final\"\n    // Regex matches:\n    //        Iteration 1:  Iteration 2:\n    // m[1]: '{{'          '[['\n    // m[2]: ''            '!'\n    // m[3]: 'prop'        'compute(foo,bar)'\n    while ((m = bindingRegex.exec(text)) !== null) {\n      // Add literal part\n      if (m.index > lastIndex) {\n        parts.push({literal: text.slice(lastIndex, m.index)});\n      }\n      // Add binding part\n      // Mode (one-way or two)\n      let mode = m[1][0];\n      let negate = Boolean(m[2]);\n      let value = m[3].trim();\n      let customEvent, notifyEvent, colon;\n      if (mode == '{' && (colon = value.indexOf('::')) > 0) {\n        notifyEvent = value.substring(colon + 2);\n        value = value.substring(0, colon);\n        customEvent = true;\n      }\n      parts.push({\n        compoundIndex: parts.length,\n        value: value,\n        mode: mode,\n        negate: negate,\n        event: notifyEvent,\n        customEvent: customEvent\n      });\n      lastIndex = bindingRegex.lastIndex;\n    }\n    // Add a final literal part\n    if (lastIndex && lastIndex < text.length) {\n      let literal = text.substring(lastIndex);\n      if (literal) {\n        parts.push({\n          literal: literal\n        });\n      }\n    }\n    if (parts.length) {\n      return parts;\n    }\n  }\n\n  function literalFromParts(parts) {\n    let s = '';\n    for (let i=0; i<parts.length; i++) {\n      let literal = parts[i].literal;\n      s += literal || '';\n    }\n    return s;\n  }\n\n  // add annotations gleaned from TextNode `node` to `list`\n  function parseTextNodeAnnotation(node, list) {\n    let parts = parseBindings(node.textContent);\n    if (parts) {\n      // Initialize the textContent with any literal parts\n      // NOTE: default to a space here so the textNode remains; some browsers\n      // (IE) evacipate an empty textNode following cloneNode/importNode.\n      node.textContent = literalFromParts(parts) || ' ';\n      let note = {\n        bindings: [{\n          kind: 'text',\n          name: 'textContent',\n          parts: parts,\n          isCompound: parts.length !== 1\n        }]\n      };\n      list.push(note);\n      return note;\n    }\n  }\n\n  // add annotations gleaned from Element `node` to `list`\n  function parseElementAnnotations(element, list, stripWhiteSpace, ownerDocument) {\n    let note = {\n      bindings: [],\n      events: []\n    };\n    if (element.localName === insertionPointTag) {\n      list._hasInsertionPoint = true;\n    }\n    parseChildNodesAnnotations(element, note, list, stripWhiteSpace, ownerDocument);\n    if (element.attributes) {\n      parseNodeAttributeAnnotations(element, note);\n    }\n    if (note.bindings.length || note.events.length || note.id) {\n      list.push(note);\n    }\n    return note;\n  }\n\n  // 1.x backwards-compatible auto-wrapper for template type extensions\n  // This is a clear layering violation and gives favored-nation status to\n  // dom-if and dom-repeat templates.  This is a conceit we're choosing to keep\n  // a.) to ease 1.x backwards-compatibility due to loss of `is`, and\n  // b.) to maintain if/repeat capability in parser-constrained elements\n  //     (e.g. table, select) in lieu of native CE type extensions without\n  //     massive new invention in this space (e.g. directive system)\n  const templateExtensions = {\n    'dom-if': true,\n    'dom-repeat': true\n  };\n  function wrapTemplateExtension(node) {\n    let is = node.getAttribute('is');\n    if (is && templateExtensions[is]) {\n      let t = node;\n      t.removeAttribute('is');\n      node = t.ownerDocument.createElement(is);\n      t.parentNode.replaceChild(node, t);\n      node.appendChild(t);\n      while(t.attributes.length) {\n        node.setAttribute(t.attributes[0].name, t.attributes[0].value);\n        t.removeAttribute(t.attributes[0].name);\n      }\n    }\n    return node;\n  }\n\n  // add annotations gleaned from children of `root` to `list`, `root`'s\n  // `note` is supplied as it is the note.parent of added annotations\n  function parseChildNodesAnnotations(root, note, list, stripWhiteSpace, ownerDocument) {\n    if (root.firstChild) {\n      let node = root.firstChild;\n      let i = 0;\n      while (node) {\n        // Wrap templates\n        if (node.localName == 'template') {\n          node = wrapTemplateExtension(node);\n        }\n        // Recurse\n        if (node.localName == 'template' &&\n          !node.hasAttribute('preserve-content')) {\n          parseTemplate(node, i, list, note, stripWhiteSpace, ownerDocument);\n        }\n        // collapse adjacent textNodes: fixes an IE issue that can cause\n        // text nodes to be inexplicably split =(\n        // note that root.normalize() should work but does not so we do this\n        // manually.\n        let next = node.nextSibling;\n        if (node.nodeType === Node.TEXT_NODE) {\n          let n = next;\n          while (n && (n.nodeType === Node.TEXT_NODE)) {\n            node.textContent += n.textContent;\n            next = n.nextSibling;\n            root.removeChild(n);\n            n = next;\n          }\n          // optionally strip whitespace\n          if (stripWhiteSpace && !node.textContent.trim()) {\n            root.removeChild(node);\n            // decrement index since node is removed\n            i--;\n          }\n        }\n        // if this node didn't get evacipated, parse it.\n        if (node.parentNode) {\n          let childAnnotation = parseNodeAnnotations(node, list,\n            stripWhiteSpace, ownerDocument);\n          if (childAnnotation) {\n            childAnnotation.parent = note;\n            childAnnotation.index = i;\n          }\n        }\n        node = next;\n        i++;\n      }\n    }\n  }\n\n  // 1. Parse annotations from the template and memoize them on\n  //    content._notes (recurses into nested templates)\n  // 2. Remove template.content and store it in annotation list, where it\n  //    will be the responsibility of the host to set it back to the template\n  //    (this is both an optimization to avoid re-stamping nested template\n  //    children and avoids a bug in Chrome where nested template children\n  //    upgrade)\n  function parseTemplate(node, index, list, parent, stripWhiteSpace, ownerDocument) {\n    let content = node.content.ownerDocument.createDocumentFragment();\n    content._notes = parseTemplateAnnotations(node, stripWhiteSpace, ownerDocument);\n    content.appendChild(node.content);\n    list.push({\n      bindings: emptyArray,\n      events: emptyArray,\n      templateContent: content,\n      parent: parent,\n      index: index\n    });\n  }\n\n  // add annotation data from attributes to the `annotation` for node `node`\n  function parseNodeAttributeAnnotations(node, annotation) {\n    // Make copy of original attribute list, since the order may change\n    // as attributes are added and removed\n    let attrs = Array.prototype.slice.call(node.attributes);\n    for (let i=attrs.length-1, a; (a=attrs[i]); i--) {\n      let n = a.name;\n      let v = a.value;\n      let b;\n      // events (on-*)\n      if (n.slice(0, 3) === 'on-') {\n        node.removeAttribute(n);\n        annotation.events.push({\n          name: n.slice(3),\n          value: v\n        });\n      }\n      // bindings (other attributes)\n      else if ((b = parseNodeAttributeAnnotation(node, n, v))) {\n        annotation.bindings.push(b);\n      }\n      // static id\n      else if (n === 'id') {\n        annotation.id = v;\n      }\n    }\n  }\n\n  // construct annotation data from a generic attribute, or undefined\n  function parseNodeAttributeAnnotation(node, name, value) {\n    let parts = parseBindings(value);\n    if (parts) {\n      // Attribute or property\n      let origName = name;\n      let kind = 'property';\n      if (name[name.length-1] == '$') {\n        name = name.slice(0, -1);\n        kind = 'attribute';\n      }\n      // Initialize attribute bindings with any literal parts\n      let literal = literalFromParts(parts);\n      if (literal && kind == 'attribute') {\n        node.setAttribute(name, literal);\n      }\n      // Clear attribute before removing, since IE won't allow removing\n      // `value` attribute if it previously had a value (can't\n      // unconditionally set '' before removing since attributes with `$`\n      // can't be set using setAttribute)\n      if (node.localName === 'input' && origName === 'value') {\n        node.setAttribute(origName, '');\n      }\n      // Remove annotation\n      node.removeAttribute(origName);\n      // Case hackery: attributes are lower-case, but bind targets\n      // (properties) are case sensitive. Gambit is to map dash-case to\n      // camel-case: `foo-bar` becomes `fooBar`.\n      // Attribute bindings are excepted.\n      let propertyName = Polymer.CaseMap.dashToCamelCase(name);\n      if (kind === 'property') {\n        name = propertyName;\n      }\n      return {\n        kind: kind,\n        name: name,\n        propertyName: propertyName,\n        parts: parts,\n        literal: literal,\n        isCompound: parts.length !== 1\n      };\n    }\n  }\n\n  function findTemplateAnnotatedNode(root, note) {\n    // recursively ascend tree until we hit root\n    let parent = note.parent && findTemplateAnnotatedNode(root,\n      note.parent);\n    // unwind the stack, returning the indexed node at each level\n    if (parent) {\n      // note: marginally faster than indexing via childNodes\n      // (http://jsperf.com/childnodes-lookup)\n      for (let n=parent.firstChild, i=0; n; n=n.nextSibling) {\n        if (note.index === i++) {\n          return n;\n        }\n      }\n    } else {\n      return root;\n    }\n  }\n\n  // construct `$` map (from id annotations)\n  function applyIdToMap(inst, map, node, note) {\n    if (note.id) {\n      map[note.id] = node;\n    }\n  }\n\n  // install event listeners (from event annotations)\n  function applyEventListener(inst, node, note, host) {\n    if (note.events && note.events.length) {\n      for (let j=0, e$=note.events, e; (j<e$.length) && (e=e$[j]); j++) {\n        inst._addMethodEventListenerToNode(node, e.name, e.value, host);\n      }\n    }\n  }\n\n  // push configuration references at configure time\n  function applyTemplateContent(inst, node, note) {\n    if (note.templateContent) {\n      node._content = note.templateContent;\n    }\n  }\n\n  function createNodeEventHandler(context, eventName, methodName) {\n    // Instances can optionally have a _methodHost which allows redirecting where\n    // to find methods. Currently used by `templatize`.\n    context = context._methodHost || context;\n    let handler = function(e) {\n      if (context[methodName]) {\n        context[methodName](e, e.detail);\n      } else {\n        console.warn('listener method `' + methodName + '` not defined');\n      }\n    };\n    return handler;\n  }\n\n  /**\n   * Element mixin that provides basic template parsing and stamping, including\n   * the following template-related features for stamped templates:\n   *\n   * - Declarative event listeners (`on-eventname=\"listener\"`)\n   * - Map of node id's to stamped node instances (`this.$.id`)\n   * - Nested template content caching/removal and re-installation (performance\n   *   optimization)\n   * - Relative URL's relative to original template location\n   * - Template binding annotation parsing (note that this library only parses\n   *   template bindings and provides annotation metadata; see\n   *   `Polymer.PropertyEffects` for a full implementation of data-binding)\n   *\n   * @polymerMixin\n   * @memberof Polymer\n   * @summary Element class mixin that provides basic template parsing and stamping\n   */\n  Polymer.TemplateStamp = Polymer.dedupingMixin(function(superClass) {\n\n    return class TemplateStamp extends superClass {\n\n      constructor() {\n        super();\n        this.$ = null;\n        this.__templateNodes = null;\n        this.__templateNotes = null;\n      }\n\n      /**\n       * Clones the provided template content and returns a document fragment\n       * containing the cloned dom.\n       *\n       * The template is parsed (once and memoized) using this library's\n       * template parsing features, which identify nodes with declarative\n       * event listeners (`on-...``), `id`'s, `<template>`s, and bindings\n       * (`{{...}}` and `[[...]]`).  This template metadata (\"notes\")\n       * are stored as `this.__templateNotes`, and any nodes identified in\n       * notes are collected for this instance into `__templateNodes` in\n       * the same order as the notes array.\n       *\n       * Finally, this method generates an \"id map\" for all nodes with id's\n       * under `this.$`, passes template content back to templates as `_content`\n       * (a performance optimization to avoid deep template cloning), and\n       * installs declarative event listeners.\n       *\n       * Note that the memoized template parsing process is destructive to the\n       * template: attributes for bindings and declarative event listeners are\n       * removed after being noted in notes, and any nested <template>.content\n       * is removed and stored in notes as well.\n       *\n       * Note that this method may only be called once per instance (it does\n       * not support stamping multiple templates per element instance).\n       *\n       * @param {HTMLTemplateElement} template Template to stamp\n       */\n      _stampTemplate(template) {\n        // Polyfill support: bootstrap the template if it has not already been\n        if (template && !template.content &&\n            window.HTMLTemplateElement && HTMLTemplateElement.decorate) {\n          HTMLTemplateElement.decorate(template);\n        }\n        let notes = this.__templateNotes = this._parseTemplateAnnotations(template);\n        let dom = document.importNode(template._content || template.content, true);\n        // NOTE: ShadyDom optimization indicating there is an insertion point\n        dom.__noInsertionPoint = !notes._hasInsertionPoint;\n        this.$ = {};\n        this.__templateNodes = new Array(notes.length);\n        for (let i=0, l=notes.length, note, node; (i<l) && (note=notes[i]); i++) {\n          node = this.__templateNodes[i] = findTemplateAnnotatedNode(dom, note);\n          applyIdToMap(this, this.$, node, note);\n          applyTemplateContent(this, node, note);\n          applyEventListener(this, node, note, this);\n        }\n        return dom;\n      }\n\n      // preprocess-time\n\n      // construct and return a list of annotation records\n      // by scanning `template`'s content\n      //\n      // TODO(sorvell): This should just crawl over a template and call\n      // a supplied list of callbacks.\n      _parseTemplateAnnotations(template) {\n        return parseTemplateAnnotations(template);\n      }\n\n      _addMethodEventListenerToNode(node, eventName, methodName, context) {\n        context = context || node;\n        let handler = createNodeEventHandler(context, eventName, methodName);\n        this._addEventListenerToNode(node, eventName, handler);\n        return handler;\n      }\n\n      _addEventListenerToNode(node, eventName, handler) {\n        node.addEventListener(eventName, handler);\n      }\n\n      _removeEventListenerFromNode(node, eventName, handler) {\n        node.removeEventListener(eventName, handler);\n      }\n\n    }\n\n  });\n\n})();\n\n\n\n\n// WEBPACK FOOTER //\n// ./bower_components/polymer/lib/mixins/template-stamp.html","/*__wc__loader*/\n\n\n    (function(document) {\n      var _htmlStr = \"\\n\\n\\n\";\n      if (document.head) {\n        var el = document.head;\n        var div = document.createElement('div');\n        div.innerHTML = _htmlStr;\n        while (div.children.length > 0) {\n          el.appendChild(div.children[0]);\n        }\n      } else {\n        document.write(_htmlStr);\n      }\n    })(document);\n    \n\n\n    (function(document) {\n      var _htmlStr = \"\";\n      if (document.body) {\n        var el = document.body;\n        var div = document.createElement('div');\n        div.innerHTML = _htmlStr;\n        while (div.children.length > 0) {\n          el.appendChild(div.children[0]);\n        }\n      } else {\n        document.write(_htmlStr);\n      }\n    })(document);\n    \n\nrequire('./boot.html');\n\n\n(function() {\n\n  'use strict';\n\n  /** @typedef {{run: function(function(), number=):number, cancel: function(number)}} */\n  let AsyncInterface; // eslint-disable-line no-unused-vars\n\n  // Microtask implemented using Mutation Observer\n  let microtaskCurrHandle = 0;\n  let microtaskLastHandle = 0;\n  let microtaskCallbacks = [];\n  let microtaskNodeContent = 0;\n  let microtaskNode = document.createTextNode('');\n  new window.MutationObserver(microtaskFlush).observe(microtaskNode, {characterData: true});\n\n  function microtaskFlush() {\n    const len = microtaskCallbacks.length;\n    for (let i = 0; i < len; i++) {\n      let cb = microtaskCallbacks[i];\n      if (cb) {\n        try {\n          cb();\n        } catch (e) {\n          setTimeout(() => { throw e });\n        }\n      }\n    }\n    microtaskCallbacks.splice(0, len);\n    microtaskLastHandle += len;\n  }\n\n  /**\n   * Module that provides a number of strategies for enqueuing asynchronous\n   * tasks.  Each sub-module provides a standard `run(fn)` interface that returns a\n   * handle, and a `cancel(handle)` interface for canceling async tasks before\n   * they run.\n   *\n   * @namespace\n   * @memberof Polymer\n   * @summary Module that provides a number of strategies for enqueuing asynchronous\n   * tasks.\n   */\n  Polymer.Async = {\n\n    /**\n     * Async interface wrapper around `setTimeout`.\n     *\n     * @namespace\n     * @memberof Polymer.Async\n     * @summary Async interface wrapper around `setTimeout`.\n     */\n    timeOut: {\n      /**\n       * Returns a sub-module with the async interface providing the provided\n       * delay.\n       *\n       * @memberof Polymer.Async.timeOut\n       * @param {number} delay Time to wait before calling callbacks in ms\n       * @return {AsyncInterface} An async timeout interface\n       */\n      after(delay) {\n        return  {\n          run(fn) { return setTimeout(fn, delay) },\n          cancel: window.clearTimeout.bind(window)\n        }\n      },\n      /**\n       * Enqueues a function called in the next task.\n       *\n       * @memberof Polymer.Async.timeOut\n       * @param {Function} fn Callback to run\n       * @return {*} Handle used for canceling task\n       */\n      run: window.setTimeout.bind(window),\n      /**\n       * Cancels a previously enqueued `timeOut` callback.\n       *\n       * @memberof Polymer.Async.timeOut\n       * @param {*} handle Handle returned from `run` of callback to cancel\n       */\n      cancel: window.clearTimeout.bind(window)\n    },\n\n    /**\n     * Async interface wrapper around `requestAnimationFrame`.\n     *\n     * @namespace\n     * @memberof Polymer.Async\n     * @summary Async interface wrapper around `requestAnimationFrame`.\n     */\n    animationFrame: {\n      /**\n       * Enqueues a function called at `requestAnimationFrame` timing.\n       *\n       * @memberof Polymer.Async.timeOut\n       * @param {Function} fn Callback to run\n       * @return {*} Handle used for canceling task\n       */\n      run: window.requestAnimationFrame.bind(window),\n      /**\n       * Cancels a previously enqueued `animationFrame` callback.\n       *\n       * @memberof Polymer.Async.timeOut\n       * @param {*} handle Handle returned from `run` of callback to cancel\n       */\n      cancel: window.cancelAnimationFrame.bind(window)\n    },\n\n    /**\n     * Async interface wrapper around `requestIdleCallback`.  Falls back to\n     * `setTimeout` on browsers that do not support `requestIdleCallback`.\n     *\n     * @namespace\n     * @memberof Polymer.Async\n     * @summary Async interface wrapper around `requestIdleCallback`.\n     */\n    idlePeriod: {\n      /**\n       * Enqueues a function called at `requestIdleCallback` timing.\n       *\n       * @memberof Polymer.Async.timeOut\n       * @param {Function} fn Callback to run\n       * @return {*} Handle used for canceling task\n       */\n      run(fn) {\n        return window.requestIdleCallback ?\n          window.requestIdleCallback(fn) :\n          window.setTimeout(fn, 16);\n      },\n      /**\n       * Cancels a previously enqueued `idlePeriod` callback.\n       *\n       * @memberof Polymer.Async.timeOut\n       * @param {*} handle Handle returned from `run` of callback to cancel\n       */\n      cancel(timer) {\n        return window.cancelIdleCallback ?\n          window.cancelIdleCallback(timer) :\n          window.clearTimeout(timer);\n      }\n    },\n\n    /**\n     * Async interface for enqueueing callbacks that run at microtask timing.\n     *\n     * Note that microtask timing is achieved via a single `MutationObserver`,\n     * and thus callbacks enqueued with this API will all run in a single\n     * batch, and not interleaved with other microtasks such as promises.\n     * Promises are avoided as an implementation choice for the time being\n     * due to Safari bugs that cause Promises to lack microtask guarantees.\n     *\n     * @namespace\n     * @memberof Polymer.Async\n     * @summary Async interface for enqueueing callbacks that run at microtask\n     *   timing.\n     */\n    microTask: {\n\n      /**\n       * Enqueues a function called at microtask timing.\n       *\n       * @memberof Polymer.Async.timeOut\n       * @param {Function} fn Callback to run\n       */\n      run(callback) {\n        microtaskNode.textContent = microtaskNodeContent++;\n        microtaskCallbacks.push(callback);\n        return microtaskCurrHandle++;\n      },\n\n      /**\n       * Cancels a previously enqueued `microTask` callback.\n       *\n       * @param {*} handle Handle returned from `run` of callback to cancel\n       */\n      cancel(handle) {\n        const idx = handle - microtaskLastHandle;\n        if (idx >= 0) {\n          if (!microtaskCallbacks[idx]) {\n            throw new Error('invalid async handle: ' + handle);\n          }\n          microtaskCallbacks[idx] = null;\n        }\n      }\n\n    }\n  };\n\n})();\n\n\n\n\n// WEBPACK FOOTER //\n// ./bower_components/polymer/lib/utils/async.html","/*__wc__loader*/\n\n\n    (function(document) {\n      var _htmlStr = \"\\n\\n\\n\";\n      if (document.head) {\n        var el = document.head;\n        var div = document.createElement('div');\n        div.innerHTML = _htmlStr;\n        while (div.children.length > 0) {\n          el.appendChild(div.children[0]);\n        }\n      } else {\n        document.write(_htmlStr);\n      }\n    })(document);\n    \n\n\n    (function(document) {\n      var _htmlStr = \"\";\n      if (document.body) {\n        var el = document.body;\n        var div = document.createElement('div');\n        div.innerHTML = _htmlStr;\n        while (div.children.length > 0) {\n          el.appendChild(div.children[0]);\n        }\n      } else {\n        document.write(_htmlStr);\n      }\n    })(document);\n    \n\nrequire('./boot.html');\n\n\n(function() {\n  'use strict';\n\n  /**\n   * Module with utilities for manipulating structured data path strings.\n   *\n   * @namespace\n   * @memberof Polymer\n   * @summary Module with utilities for manipulating structured data path strings.\n   */\n  const Path = {\n\n    /**\n     * Returns true if the given string is a structured data path (has dots).\n     *\n     * Example:\n     *\n     * ```\n     * Polymer.Path.isPath('foo.bar.baz') // true\n     * Polymer.Path.isPath('foo')         // false\n     * ```\n     *\n     * @memberof Polymer.Path\n     * @param {string} path Path string\n     * @return {boolean} True if the string contained one or more dots\n     */\n    isPath: function(path) {\n      return path.indexOf('.') >= 0;\n    },\n\n    /**\n     * Returns the root property name for the given path.\n     *\n     * Example:\n     *\n     * ```\n     * Polymer.Path.root('foo.bar.baz') // 'foo'\n     * Polymer.Path.root('foo')         // 'foo'\n     * ```\n     *\n     * @memberof Polymer.Path\n     * @param {string} path Path string\n     * @return {string} Root property name\n     */\n    root: function(path) {\n      let dotIndex = path.indexOf('.');\n      if (dotIndex === -1) {\n        return path;\n      }\n      return path.slice(0, dotIndex);\n    },\n\n    /**\n     * Given `base` is `foo.bar`, `foo` is an ancestor, `foo.bar` is not\n     * Returns true if the given path is an ancestor of the base path.\n     *\n     * Example:\n     *\n     * ```\n     * Polymer.Path.isAncestor('foo.bar', 'foo')         // true\n     * Polymer.Path.isAncestor('foo.bar', 'foo.bar')     // false\n     * Polymer.Path.isAncestor('foo.bar', 'foo.bar.baz') // false\n     * ```\n     *\n     * @memberof Polymer.Path\n     * @param {string} path Path string\n     * @return {boolean} True if `path` is an ancestor of `base`\n     */\n    isAncestor: function(base, path) {\n      //     base.startsWith(path + '.');\n      return base.indexOf(path + '.') === 0;\n    },\n\n    /**\n     * Given `base` is `foo.bar`, `foo.bar.baz` is an descendant\n     *\n     * Example:\n     *\n     * ```\n     * Polymer.Path.isDescendant('foo.bar', 'foo.bar.baz') // true\n     * Polymer.Path.isDescendant('foo.bar', 'foo.bar')     // false\n     * Polymer.Path.isDescendant('foo.bar', 'foo')         // false\n     * ```\n     *\n     * @memberof Polymer.Path\n     */\n    isDescendant: function(base, path) {\n      //     path.startsWith(base + '.');\n      return path.indexOf(base + '.') === 0;\n    },\n\n    /**\n     * Replaces a previous base path with a new base path, preserving the\n     * remainder of the path.\n     *\n     * User must ensure `path` has a prefix of `base`.\n     *\n     * Example:\n     *\n     * ```\n     * Polymer.Path.translate('foo.bar', 'zot' 'foo.bar.baz') // 'zot.baz'\n     * ```\n     *\n     * @memberof Polymer.Path\n     * @param {string} base Current base string to remove\n     * @param {string} newBase New base string to replace with\n     * @param {string} path Path to translate\n     * @return {string} Translated string\n     */\n    translate: function(base, newBase, path) {\n      return newBase + path.slice(base.length);\n    },\n\n    matches: function(base, path) {\n      return (base === path) ||\n             this.isAncestor(base, path) ||\n             this.isDescendant(base, path);\n    },\n\n    /**\n     * Converts array-based paths to flattened path.  String-based paths\n     * are returned as-is.\n     *\n     * Example:\n     *\n     * ```\n     * Polymer.Path.normalize(['foo.bar', 0, 'baz'])  // 'foo.bar.0.baz'\n     * Polymer.Path.normalize('foo.bar.0.baz')        // 'foo.bar.0.baz'\n     * ```\n     *\n     * @memberof Polymer.Path\n     * @param {string | !Array<string|number>} path Input path\n     * @return {string} Flattened path\n     */\n    normalize: function(path) {\n      if (Array.isArray(path)) {\n        let parts = [];\n        for (let i=0; i<path.length; i++) {\n          let args = path[i].toString().split('.');\n          for (let j=0; j<args.length; j++) {\n            parts.push(args[j]);\n          }\n        }\n        return parts.join('.');\n      } else {\n        return path;\n      }\n    },\n\n    /**\n     * Splits a path into an array of property names. Accepts either arrays\n     * of path parts or strings.\n     *\n     * Example:\n     *\n     * ```\n     * Polymer.Path.split(['foo.bar', 0, 'baz'])  // ['foo', 'bar', '0', 'baz']\n     * Polymer.Path.split('foo.bar.0.baz')        // ['foo', 'bar', '0', 'baz']\n     * ```\n     *\n     * @memberof Polymer.Path\n     * @param {string | !Array<string|number>} path Input path\n     * @return {!Array<string>} Array of path parts\n     */\n    split: function(path) {\n      if (Array.isArray(path)) {\n        return this.normalize(path).split('.');\n      }\n      return path.toString().split('.');\n    },\n\n    /**\n     * Reads a value from a path.  If any sub-property in the path is `undefined`,\n     * this method returns `undefined` (will never throw.\n     *\n     * @memberof Polymer.Path\n     * @param {Object} root Object from which to dereference path from\n     * @param {string | !Array<string|number>} path Path to read\n     * @param {Object=} info If an object is provided to `info`, the normalized\n     *  (flattened) path will be set to `info.path`.\n     * @return {*} Value at path, or `undefined` if the path could not be\n     *  fully dereferenced.\n     */\n    get: function(root, path, info) {\n      let prop = root;\n      let parts = this.split(path);\n      // Loop over path parts[0..n-1] and dereference\n      for (let i=0; i<parts.length; i++) {\n        if (!prop) {\n          return;\n        }\n        let part = parts[i];\n        prop = prop[part];\n      }\n      if (info) {\n        info.path = parts.join('.');\n      }\n      return prop;\n    },\n\n    /**\n     * Sets a value to a path.  If any sub-property in the path is `undefined`,\n     * this method will no-op.\n     *\n     * @memberof Polymer.Path\n     * @param {Object} root Object from which to dereference path from\n     * @param {string | !Array<string|number>} path Path to set\n     * @param {*} value Value to set to path\n     * @return {string | undefined} The normalized version of the input path\n     */\n    set: function(root, path, value) {\n      let prop = root;\n      let parts = this.split(path);\n      let last = parts[parts.length-1];\n      if (parts.length > 1) {\n        // Loop over path parts[0..n-2] and dereference\n        for (let i=0; i<parts.length-1; i++) {\n          let part = parts[i];\n          prop = prop[part];\n          if (!prop) {\n            return;\n          }\n        }\n        // Set value to object at end of path\n        prop[last] = value;\n      } else {\n        // Simple property set\n        prop[path] = value;\n      }\n      return parts.join('.');\n    }\n\n  };\n\n  /**\n   * Returns true if the given string is a structured data path (has dots).\n   *\n   * This function is deprecated.  Use `Polymer.Path.isPath` instead.\n   *\n   * Example:\n   *\n   * ```\n   * Polymer.Path.isDeep('foo.bar.baz') // true\n   * Polymer.Path.isDeep('foo')         // false\n   * ```\n   *\n   * @deprecated\n   * @memberof Polymer.Path\n   * @param {string} path Path string\n   * @return {boolean} True if the string contained one or more dots\n   */\n  Path.isDeep = Path.isPath;\n\n  Polymer.Path = Path;\n\n})();\n\n\n\n\n// WEBPACK FOOTER //\n// ./bower_components/polymer/lib/utils/path.html","/*__wc__loader*/\n\n\n    (function(document) {\n      var _htmlStr = \"\\n\\n\";\n      if (document.head) {\n        var el = document.head;\n        var div = document.createElement('div');\n        div.innerHTML = _htmlStr;\n        while (div.children.length > 0) {\n          el.appendChild(div.children[0]);\n        }\n      } else {\n        document.write(_htmlStr);\n      }\n    })(document);\n    \n\n\n    (function(document) {\n      var _htmlStr = \"\";\n      if (document.body) {\n        var el = document.body;\n        var div = document.createElement('div');\n        div.innerHTML = _htmlStr;\n        while (div.children.length > 0) {\n          el.appendChild(div.children[0]);\n        }\n      } else {\n        document.write(_htmlStr);\n      }\n    })(document);\n    \n\nrequire('./resolve-url.html');\n\n\n(function() {\n  'use strict';\n\n  const MODULE_STYLE_LINK_SELECTOR = 'link[rel=import][type~=css]';\n  const INCLUDE_ATTR = 'include';\n\n  function importModule(moduleId) {\n    if (!Polymer.DomModule) {\n      return null;\n    }\n    return Polymer.DomModule.import(moduleId);\n  }\n\n  /**\n   * Module with utilities for collection CSS text from `<templates>`, external\n   * stylesheets, and `dom-module`s.\n   *\n   * @namespace\n   * @memberof Polymer\n   * @summary Module with utilities for collection CSS text from various sources.\n   */\n  const StyleGather = {\n\n    /**\n     * Returns CSS text of styles in a space-separated list of `dom-module`s.\n     *\n     * @memberof Polymer.StyleGather\n     * @param {string} moduleIds\n     * @return {string} Concatenated CSS content from specified `dom-module`s\n     */\n    cssFromModules(moduleIds) {\n      let modules = moduleIds.trim().split(' ');\n      let cssText = '';\n      for (let i=0; i < modules.length; i++) {\n        cssText += this.cssFromModule(modules[i]);\n      }\n      return cssText;\n    },\n\n    /**\n     * Returns CSS text of styles in a given `dom-module`.  CSS in a `dom-module`\n     * can come either from `<style>`s within the first `<template>`, or else\n     * from one or more `<link rel=\"import\" type=\"css\">` links outside the\n     * template.\n     *\n     * Any `<styles>` processed are removed from their original location.\n     *\n     * @memberof Polymer.StyleGather\n     * @param {string} moduleId dom-module id to gather styles from\n     * @return {string} Concatenated CSS content from specified `dom-module`\n     */\n    cssFromModule(moduleId) {\n      let m = importModule(moduleId);\n      if (m && m._cssText === undefined) {\n        let cssText = '';\n        // include css from the first template in the module\n        let t = m.querySelector('template');\n        if (t) {\n          cssText += this.cssFromTemplate(t, m.assetpath);\n        }\n        // module imports: <link rel=\"import\" type=\"css\">\n        cssText += this.cssFromModuleImports(moduleId);\n        m._cssText = cssText || null;\n      }\n      if (!m) {\n        console.warn('Could not find style data in module named', moduleId);\n      }\n      return m && m._cssText || '';\n    },\n\n    /**\n     * Returns CSS text of `<styles>` within a given template.\n     *\n     * Any `<styles>` processed are removed from their original location.\n     *\n     * @memberof Polymer.StyleGather\n     * @param {HTMLTemplateElement} template Template to gather styles from\n     * @param {string} baseURI Base URI to resolve the URL against\n     * @return {string} Concatenated CSS content from specified template\n     */\n    cssFromTemplate(template, baseURI) {\n      let cssText = '';\n      // if element is a template, get content from its .content\n      let e$ = template.content.querySelectorAll('style');\n      for (let i=0; i < e$.length; i++) {\n        let e = e$[i];\n        // support style sharing by allowing styles to \"include\"\n        // other dom-modules that contain styling\n        let include = e.getAttribute(INCLUDE_ATTR);\n        if (include) {\n          cssText += this.cssFromModules(include);\n        }\n        e.parentNode.removeChild(e);\n        cssText += baseURI ?\n          Polymer.ResolveUrl.resolveCss(e.textContent, baseURI) : e.textContent;\n      }\n      return cssText;\n    },\n\n    /**\n     * Returns CSS text from stylsheets loaded via `<link rel=\"import\" type=\"css\">`\n     * links within the specified `dom-module`.\n     *\n     * @memberof Polymer.StyleGather\n     * @param {string} moduleId Id of `dom-module` to gather CSS from\n     * @return {string} Concatenated CSS content from links in specified `dom-module`\n     */\n    cssFromModuleImports(moduleId) {\n      let cssText = '';\n      let m = importModule(moduleId);\n      if (!m) {\n        return cssText;\n      }\n      let p$ = m.querySelectorAll(MODULE_STYLE_LINK_SELECTOR);\n      for (let i=0; i < p$.length; i++) {\n        let p = p$[i];\n        if (p.import) {\n          let importDoc = p.import;\n          // NOTE: polyfill affordance.\n          // under the HTMLImports polyfill, there will be no 'body',\n          // but the import pseudo-doc can be used directly.\n          let container = importDoc.body ? importDoc.body : importDoc;\n          cssText +=\n            Polymer.ResolveUrl.resolveCss(container.textContent,\n              importDoc.baseURI);\n        }\n      }\n      return cssText;\n    }\n  };\n\n  Polymer.StyleGather = StyleGather;\n})();\n\n\n\n\n// WEBPACK FOOTER //\n// ./bower_components/polymer/lib/utils/style-gather.html","/*__wc__loader*/\n\n\n    (function(document) {\n      var _htmlStr = \"\\n\";\n      if (document.head) {\n        var el = document.head;\n        var div = document.createElement('div');\n        div.innerHTML = _htmlStr;\n        while (div.children.length > 0) {\n          el.appendChild(div.children[0]);\n        }\n      } else {\n        document.write(_htmlStr);\n      }\n    })(document);\n    \n\n\n    (function(document) {\n      var _htmlStr = \"\";\n      if (document.body) {\n        var el = document.body;\n        var div = document.createElement('div');\n        div.innerHTML = _htmlStr;\n        while (div.children.length > 0) {\n          el.appendChild(div.children[0]);\n        }\n      } else {\n        document.write(_htmlStr);\n      }\n    })(document);\n    \n\nrequire('./lib/mixins/element-mixin.html');\n\n\n(function() {\n  'use strict';\n\n  /**\n   * Base class that provides the core API for Polymer's meta-programming\n   * features including template stamping, data-binding, attribute deserialization,\n   * and property change observation.\n   *\n   * @polymerElement\n   * @memberof Polymer\n   * @extends HTMLElement\n   * @mixes Polymer.ElementMixin\n   * @summary Custom element base class that provides the core API for Polymer's\n   *   key meta-programming features including template stamping, data-binding,\n   *   attribute deserialization, and property change observation\n   */\n  const Element = Polymer.ElementMixin(HTMLElement);\n  Polymer.Element = Element;\n})();\n\n\n\n\n// WEBPACK FOOTER //\n// ./bower_components/polymer/polymer-element.html"],"sourceRoot":""}